# generated by datamodel-codegen:
#   filename:  https://eros.rest/openapi.json
#   timestamp: 2024-03-11T22:04:02+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, Field


class AchievementsInfo(BaseModel):
    show_achievements: Optional[bool] = Field(None, title='Show Achievements')


class AdData(BaseModel):
    grid_click_type: Optional[int] = Field(None, title='Grid Click Type')


class AdMetadataContainer(BaseModel):
    renderLegacyWebsiteCard: Optional[bool] = Field(
        None, title='Renderlegacywebsitecard'
    )


class AggregateRating(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    rating_distribution: Optional[List] = Field(None, title='Rating Distribution')
    name: Optional[Any] = Field(None, title='Name')
    type: Optional[str] = Field(None, title='Type')


class AllowDownloadStatus(BaseModel):
    allow_download: Optional[bool] = Field(None, title='Allow Download')


class ArtistryMakeup(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    name: Optional[str] = Field(None, title='Name')


class Audience(BaseModel):
    name: Optional[str] = Field(None, title='Name')


class AuthorDetail(BaseModel):
    name: Optional[str] = Field(None, title='Name')
    href: Optional[str] = Field(None, title='Href')


class BeautyMakeup(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    name: Optional[str] = Field(None, title='Name')


class BioLink(BaseModel):
    title: Optional[str] = Field(None, title='Title')
    lynx_url: Optional[str] = Field(None, title='Lynx Url')
    url: Optional[str] = Field(None, title='Url')
    link_type: Optional[str] = Field(None, title='Link Type')


class BiographyWithEntities(BaseModel):
    raw_text: Optional[str] = Field(None, title='Raw Text')
    entities: Optional[List] = Field(None, title='Entities')


class BlockStyle(BaseModel):
    corner_radius: Optional[int] = Field(None, title='Corner Radius')
    width: Optional[int] = Field(None, title='Width')
    rotation: Optional[int] = Field(None, title='Rotation')
    y_coord: Optional[int] = Field(None, title='Y Coord')
    x_coord: Optional[int] = Field(None, title='X Coord')
    height: Optional[int] = Field(None, title='Height')


class CanonicalPin(BaseModel):
    id: Optional[str] = Field(None, title='Id')


class CloseupAttribution(BaseModel):
    full_name: Optional[str] = Field(None, title='Full Name')
    ads_only_profile_site: Optional[Any] = Field(None, title='Ads Only Profile Site')
    image_medium_url: Optional[str] = Field(None, title='Image Medium Url')
    followed_by_me: Optional[bool] = Field(None, title='Followed By Me')
    verified_identity: Optional[Dict[str, Any]] = Field(None, title='Verified Identity')
    domain_url: Optional[str] = Field(None, title='Domain Url')
    id: Optional[str] = Field(None, title='Id')
    follower_count: Optional[int] = Field(None, title='Follower Count')
    first_name: Optional[str] = Field(None, title='First Name')
    blocked_by_me: Optional[bool] = Field(None, title='Blocked By Me')
    is_default_image: Optional[bool] = Field(None, title='Is Default Image')
    image_small_url: Optional[str] = Field(None, title='Image Small Url')
    is_verified_merchant: Optional[bool] = Field(None, title='Is Verified Merchant')
    type: Optional[str] = Field(None, title='Type')
    username: Optional[str] = Field(None, title='Username')
    domain_verified: Optional[bool] = Field(None, title='Domain Verified')
    indexed: Optional[bool] = Field(None, title='Indexed')
    explicitly_followed_by_me: Optional[bool] = Field(
        None, title='Explicitly Followed By Me'
    )
    is_ads_only_profile: Optional[bool] = Field(None, title='Is Ads Only Profile')


class CommerceUserInfo(BaseModel):
    commerceUser: Optional[bool] = Field(None, title='Commerceuser')


class Component(BaseModel):
    type: Optional[str] = Field(None, title='Type')
    content: Optional[str] = Field(None, title='Content')


class ConsumptionInfo(BaseModel):
    is_trending_in_clips: Optional[bool] = Field(None, title='Is Trending In Clips')
    should_mute_audio_reason: Optional[str] = Field(
        None, title='Should Mute Audio Reason'
    )
    should_mute_audio_reason_type: Optional[str] = Field(
        None, title='Should Mute Audio Reason Type'
    )


class ContactPhoneCountry(BaseModel):
    code: Optional[str] = Field(None, title='Code')
    phone_code: Optional[str] = Field(None, title='Phone Code')


class ConversationDetails(BaseModel):
    conversationSection: Optional[str] = Field(None, title='Conversationsection')


class Description12(BaseModel):
    urls: Optional[List] = Field(None, title='Urls')


class Description3(BaseModel):
    urls: Optional[List] = Field(None, title='Urls')


class Description8(BaseModel):
    urls: Optional[List] = Field(None, title='Urls')


class Device(BaseModel):
    name: Optional[str] = Field(None, title='Name')
    version: Optional[str] = Field(None, title='Version')


class DisplayResource(BaseModel):
    src: Optional[str] = Field(None, title='Src')
    config_width: Optional[int] = Field(None, title='Config Width')
    config_height: Optional[int] = Field(None, title='Config Height')


class DopeMakeup(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    name: Optional[str] = Field(None, title='Name')


class EdgeFollow(BaseModel):
    count: Optional[int] = Field(None, title='Count')


class EdgeMediaPreviewComment1(BaseModel):
    count: Optional[int] = Field(None, title='Count')


class EdgeMediaPreviewLike1(BaseModel):
    count: Optional[int] = Field(None, title='Count')


class EdgeMediaToComment(BaseModel):
    count: Optional[int] = Field(None, title='Count')


class EdgeMediaToHoistedComment(BaseModel):
    edges: Optional[List] = Field(None, title='Edges')


class EdgeMediaToSponsorUser(BaseModel):
    edges: Optional[List] = Field(None, title='Edges')


class EdgeMutualFollowedBy(BaseModel):
    count: Optional[int] = Field(None, title='Count')
    edges: Optional[List] = Field(None, title='Edges')


class EdgeWebMediaToRelatedMedia(BaseModel):
    edges: Optional[List] = Field(None, title='Edges')


class EdgyMakeup(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    name: Optional[str] = Field(None, title='Name')


class EligibleProfileTab(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    type: Optional[str] = Field(None, title='Type')
    tab_type: Optional[int] = Field(None, title='Tab Type')
    name: Optional[str] = Field(None, title='Name')
    is_default: Optional[bool] = Field(None, title='Is Default')


class Embed(BaseModel):
    src: Optional[AnyUrl] = Field(None, title='Src')
    height: Optional[int] = Field(None, title='Height')
    width: Optional[int] = Field(None, title='Width')
    type: Optional[str] = Field(None, title='Type')


class Entities14(BaseModel):
    description: Optional[Description8] = None


class Entities15(BaseModel):
    description: Optional[Description8] = None


class EntitySet(BaseModel):
    hashtags: Optional[List] = Field(None, title='Hashtags')
    symbols: Optional[List] = Field(None, title='Symbols')
    urls: Optional[List] = Field(None, title='Urls')
    user_mentions: Optional[List] = Field(None, title='User Mentions')


class EntitySet1(BaseModel):
    hashtags: Optional[List] = Field(None, title='Hashtags')
    symbols: Optional[List] = Field(None, title='Symbols')
    urls: Optional[List] = Field(None, title='Urls')
    user_mentions: Optional[List] = Field(None, title='User Mentions')
    timestamps: Optional[List] = Field(None, title='Timestamps')


class ExperimentValue(BaseModel):
    key: Optional[str] = Field(None, title='Key')
    value: Optional[str] = Field(None, title='Value')


class Extra(BaseModel):
    fatal_item_ids: Optional[List] = Field(None, title='Fatal Item Ids')
    logid: Optional[str] = Field(None, title='Logid')
    now: Optional[int] = Field(None, title='Now')


class EyeMakeupArt(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    name: Optional[str] = Field(None, title='Name')


class EyeMakeupTutorials(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    name: Optional[str] = Field(None, title='Name')


class Face(BaseModel):
    x: Optional[int] = Field(None, title='X')
    y: Optional[int] = Field(None, title='Y')
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')


class FaviconImages(BaseModel):
    orig: Optional[str] = Field(None, title='Orig')


class FelixProfileGridCrop(BaseModel):
    crop_left: Optional[float] = Field(None, title='Crop Left')
    crop_right: Optional[float] = Field(None, title='Crop Right')
    crop_top: Optional[float] = Field(None, title='Crop Top')
    crop_bottom: Optional[float] = Field(None, title='Crop Bottom')


class Field1200x(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field136x136(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field136x1361(BaseModel):
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')
    url: Optional[str] = Field(None, title='Url')


class Field150x150(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field170x(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field170x1(BaseModel):
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')
    url: Optional[str] = Field(None, title='Url')


class Field192x(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field200X(BaseModel):
    url: Optional[AnyUrl] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')


class Field200x(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field200x150(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field216x146(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field222x(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field236x(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field236x1(BaseModel):
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')
    url: Optional[str] = Field(None, title='Url')


class Field237x(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field290x(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field30x30(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field345X(BaseModel):
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')
    url: Optional[AnyUrl] = Field(None, title='Url')


class Field345x(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field400x(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field400x300(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field432x292(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field45x45(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field474x(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field474x1(BaseModel):
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')
    url: Optional[str] = Field(None, title='Url')


class Field550x(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field564x(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field564x1(BaseModel):
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')
    url: Optional[str] = Field(None, title='Url')


class Field600x(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field600x315(BaseModel):
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')
    url: Optional[str] = Field(None, title='Url')


class Field60x60(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field60x601(BaseModel):
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')
    url: Optional[str] = Field(None, title='Url')


class Field640x(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field70x(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field70x70(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field736x(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field736x1(BaseModel):
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')
    url: Optional[str] = Field(None, title='Url')


class Field750x(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field75x75(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Field90x90(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class FocusRect(BaseModel):
    x: Optional[int] = Field(None, title='X')
    y: Optional[int] = Field(None, title='Y')
    w: Optional[int] = Field(None, title='W')
    h: Optional[int] = Field(None, title='H')


class FormattedDescription(BaseModel):
    components: Optional[List[Component]] = Field(None, title='Components')


class FriendshipStatus1(BaseModel):
    blocking: Optional[str] = Field(None, title='Blocking')
    is_feed_favorite: Optional[bool] = Field(None, title='Is Feed Favorite')
    following: Optional[bool] = Field(None, title='Following')
    is_muting_reel: Optional[str] = Field(None, title='Is Muting Reel')
    muting: Optional[str] = Field(None, title='Muting')
    outgoing_request: Optional[str] = Field(None, title='Outgoing Request')
    followed_by: Optional[str] = Field(None, title='Followed By')
    incoming_request: Optional[str] = Field(None, title='Incoming Request')
    is_restricted: Optional[bool] = Field(None, title='Is Restricted')
    is_bestie: Optional[bool] = Field(None, title='Is Bestie')


class GothicMakeup(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    name: Optional[str] = Field(None, title='Name')


class GrungeMakeup(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    name: Optional[str] = Field(None, title='Name')


class HairMakeup(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    name: Optional[str] = Field(None, title='Name')


class HdProfilePicUrlInfo(BaseModel):
    url: Optional[str] = Field(None, title='Url')


class Header(BaseModel):
    displayType: Optional[str] = Field(None, title='Displaytype')
    text: Optional[str] = Field(None, title='Text')
    sticky: Optional[bool] = Field(None, title='Sticky')


class HighlightsInfo(BaseModel):
    can_highlight_tweets: Optional[bool] = Field(None, title='Can Highlight Tweets')
    highlighted_tweets: Optional[str] = Field(None, title='Highlighted Tweets')


class Icon(BaseModel):
    height: Optional[int] = Field(None, title='Height')
    uri: Optional[str] = Field(None, title='Uri')
    url_list: Optional[List[str]] = Field(None, title='Url List')
    url_prefix: None = Field(None, title='Url Prefix')
    width: Optional[int] = Field(None, title='Width')


class IgArtist(BaseModel):
    username: Optional[str] = Field(None, title='Username')
    id: Optional[str] = Field(None, title='Id')


class IgMention(BaseModel):
    full_name: Optional[str] = Field(None, title='Full Name')
    username: Optional[str] = Field(None, title='Username')


class ImageCrop(BaseModel):
    min_y: Optional[int] = Field(None, title='Min Y')
    max_y: Optional[int] = Field(None, title='Max Y')


class ImageImages(BaseModel):
    originals: Optional[Field345X] = None
    field_1200x: Optional[Field345X] = Field(None, alias='1200x')
    field_345x: Optional[Field345X] = Field(None, alias='345x')
    field_736x: Optional[Field345X] = Field(None, alias='736x')


class ImageValue(BaseModel):
    height: Optional[int] = Field(None, title='Height')
    width: Optional[int] = Field(None, title='Width')
    url: Optional[str] = Field(None, title='Url')


class InstagramDLModelsFeedCandidate(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    height: Optional[int] = Field(None, title='Height')
    width: Optional[int] = Field(None, title='Width')


class InstagramDLModelsFeedCaption(BaseModel):
    has_translation: Optional[str] = Field(None, title='Has Translation')
    created_at: Optional[int] = Field(None, title='Created At')
    pk: Optional[str] = Field(None, title='Pk')
    text: Optional[str] = Field(None, title='Text')


class InstagramDLModelsFeedCoauthorProducer(BaseModel):
    pk: Optional[str] = Field(None, title='Pk')
    profile_pic_url: Optional[str] = Field(None, title='Profile Pic Url')
    is_unpublished: Optional[str] = Field(None, title='Is Unpublished')
    username: Optional[str] = Field(None, title='Username')
    id: Optional[str] = Field(None, title='Id')
    full_name: Optional[str] = Field(None, title='Full Name')
    is_verified: Optional[bool] = Field(None, title='Is Verified')


class InstagramDLModelsFeedExtensions(BaseModel):
    is_final: Optional[bool] = Field(None, title='Is Final')


class InstagramDLModelsFeedFriendshipStatus(BaseModel):
    blocking: Optional[str] = Field(None, title='Blocking')
    followed_by: Optional[str] = Field(None, title='Followed By')
    following: Optional[bool] = Field(None, title='Following')
    incoming_request: Optional[str] = Field(None, title='Incoming Request')
    is_bestie: Optional[bool] = Field(None, title='Is Bestie')
    is_feed_favorite: Optional[bool] = Field(None, title='Is Feed Favorite')
    is_muting_reel: Optional[str] = Field(None, title='Is Muting Reel')
    is_private: Optional[str] = Field(None, title='Is Private')
    is_restricted: Optional[bool] = Field(None, title='Is Restricted')
    is_viewer_unconnected: Optional[str] = Field(None, title='Is Viewer Unconnected')
    muting: Optional[str] = Field(None, title='Muting')
    outgoing_request: Optional[str] = Field(None, title='Outgoing Request')
    subscribed: Optional[str] = Field(None, title='Subscribed')


class InstagramDLModelsFeedImageVersions2(BaseModel):
    candidates: Optional[List[InstagramDLModelsFeedCandidate]] = Field(
        None, title='Candidates'
    )


class InstagramDLModelsFeedMusicAssetInfo(BaseModel):
    audio_cluster_id: Optional[str] = Field(None, title='Audio Cluster Id')
    title: Optional[str] = Field(None, title='Title')
    display_artist: Optional[str] = Field(None, title='Display Artist')
    is_explicit: Optional[bool] = Field(None, title='Is Explicit')


class InstagramDLModelsFeedOwner(BaseModel):
    pk: Optional[str] = Field(None, title='Pk')
    profile_pic_url: Optional[str] = Field(None, title='Profile Pic Url')
    username: Optional[str] = Field(None, title='Username')
    friendship_status: Optional[FriendshipStatus1] = None
    is_embeds_disabled: Optional[str] = Field(None, title='Is Embeds Disabled')
    is_unpublished: Optional[bool] = Field(None, title='Is Unpublished')
    is_verified: Optional[bool] = Field(None, title='Is Verified')
    show_account_transparency_details: Optional[bool] = Field(
        None, title='Show Account Transparency Details'
    )
    supervision_info: Optional[str] = Field(None, title='Supervision Info')
    transparency_product: Optional[str] = Field(None, title='Transparency Product')
    transparency_product_enabled: Optional[bool] = Field(
        None, title='Transparency Product Enabled'
    )
    transparency_label: Optional[str] = Field(None, title='Transparency Label')
    id: Optional[str] = Field(None, title='Id')
    is_private: Optional[bool] = Field(None, title='Is Private')
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    full_name: Optional[str] = Field(None, title='Full Name')


class InstagramDLModelsFeedPageInfo(BaseModel):
    end_cursor: Optional[str] = Field(None, title='End Cursor')
    has_next_page: Optional[bool] = Field(None, title='Has Next Page')
    has_previous_page: Optional[bool] = Field(None, title='Has Previous Page')
    start_cursor: Optional[str] = Field(None, title='Start Cursor')


class InstagramDLModelsFeedSharingFrictionInfo(BaseModel):
    bloks_app_url: Optional[str] = Field(None, title='Bloks App Url')
    should_have_sharing_friction: Optional[bool] = Field(
        None, title='Should Have Sharing Friction'
    )


class InstagramDLModelsFeedUser(BaseModel):
    pk: Optional[str] = Field(None, title='Pk')
    username: Optional[str] = Field(None, title='Username')
    profile_pic_url: Optional[str] = Field(None, title='Profile Pic Url')
    is_private: Optional[bool] = Field(None, title='Is Private')
    is_embeds_disabled: Optional[str] = Field(None, title='Is Embeds Disabled')
    is_unpublished: Optional[bool] = Field(None, title='Is Unpublished')
    is_verified: Optional[bool] = Field(None, title='Is Verified')
    friendship_status: Optional[InstagramDLModelsFeedFriendshipStatus] = None
    latest_besties_reel_media: Optional[int] = Field(
        None, title='Latest Besties Reel Media'
    )
    latest_reel_media: Optional[int] = Field(None, title='Latest Reel Media')
    live_broadcast_visibility: Optional[str] = Field(
        None, title='Live Broadcast Visibility'
    )
    live_broadcast_id: Optional[str] = Field(None, title='Live Broadcast Id')
    seen: Optional[str] = Field(None, title='Seen')
    supervision_info: Optional[str] = Field(None, title='Supervision Info')
    id: Optional[str] = Field(None, title='Id')
    hd_profile_pic_url_info: Optional[HdProfilePicUrlInfo] = None
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')


class InstagramDLModelsFeedUser1(BaseModel):
    pk: Optional[str] = Field(None, title='Pk')
    full_name: Optional[str] = Field(None, title='Full Name')
    username: Optional[str] = Field(None, title='Username')
    profile_pic_url: Optional[str] = Field(None, title='Profile Pic Url')
    is_verified: Optional[bool] = Field(None, title='Is Verified')
    id: Optional[str] = Field(None, title='Id')


class InstagramDLModelsFeedVideoVersion(BaseModel):
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')
    url: Optional[str] = Field(None, title='Url')
    type: Optional[int] = Field(None, title='Type')


class InstagramDLModelsPostClipsMusicAttributionInfo(BaseModel):
    artist_name: Optional[str] = Field(None, title='Artist Name')
    song_name: Optional[str] = Field(None, title='Song Name')
    uses_original_audio: Optional[bool] = Field(None, title='Uses Original Audio')
    should_mute_audio: Optional[bool] = Field(None, title='Should Mute Audio')
    should_mute_audio_reason: Optional[str] = Field(
        None, title='Should Mute Audio Reason'
    )
    audio_id: Optional[str] = Field(None, title='Audio Id')


class InstagramDLModelsPostDashInfo(BaseModel):
    is_dash_eligible: Optional[bool] = Field(None, title='Is Dash Eligible')
    video_dash_manifest: None = Field(None, title='Video Dash Manifest')
    number_of_qualities: Optional[int] = Field(None, title='Number Of Qualities')


class InstagramDLModelsPostDimensions(BaseModel):
    height: Optional[int] = Field(None, title='Height')
    width: Optional[int] = Field(None, title='Width')


class InstagramDLModelsPostEdgeFollowedBy(BaseModel):
    count: Optional[int] = Field(None, title='Count')


class InstagramDLModelsPostEdgeLikedBy(BaseModel):
    count: Optional[int] = Field(None, title='Count')


class InstagramDLModelsPostEdgeMediaPreviewLike(BaseModel):
    count: Optional[int] = Field(None, title='Count')
    edges: Optional[List] = Field(None, title='Edges')


class InstagramDLModelsPostEdgeMediaToTaggedUser(BaseModel):
    edges: Optional[List] = Field(None, title='Edges')


class InstagramDLModelsPostEdgeOwnerToTimelineMedia(BaseModel):
    count: Optional[int] = Field(None, title='Count')


class InstagramDLModelsPostExtensions(BaseModel):
    is_final: Optional[bool] = Field(None, title='Is Final')


class InstagramDLModelsPostNode(BaseModel):
    created_at: Optional[str] = Field(None, title='Created At')
    text: Optional[str] = Field(None, title='Text')
    id: Optional[str] = Field(None, title='Id')


class InstagramDLModelsPostOwner(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    username: Optional[str] = Field(None, title='Username')
    is_verified: Optional[bool] = Field(None, title='Is Verified')
    profile_pic_url: Optional[str] = Field(None, title='Profile Pic Url')
    blocked_by_viewer: Optional[bool] = Field(None, title='Blocked By Viewer')
    restricted_by_viewer: None = Field(None, title='Restricted By Viewer')
    followed_by_viewer: Optional[bool] = Field(None, title='Followed By Viewer')
    full_name: Optional[str] = Field(None, title='Full Name')
    has_blocked_viewer: Optional[bool] = Field(None, title='Has Blocked Viewer')
    is_embeds_disabled: Optional[bool] = Field(None, title='Is Embeds Disabled')
    is_private: Optional[bool] = Field(None, title='Is Private')
    is_unpublished: Optional[bool] = Field(None, title='Is Unpublished')
    requested_by_viewer: Optional[bool] = Field(None, title='Requested By Viewer')
    pass_tiering_recommendation: Optional[bool] = Field(
        None, title='Pass Tiering Recommendation'
    )
    edge_owner_to_timeline_media: Optional[
        InstagramDLModelsPostEdgeOwnerToTimelineMedia
    ] = None
    edge_followed_by: Optional[InstagramDLModelsPostEdgeFollowedBy] = None


class InstagramDLModelsPostPageInfo(BaseModel):
    has_next_page: Optional[bool] = Field(None, title='Has Next Page')
    end_cursor: None = Field(None, title='End Cursor')


class InstagramDLModelsPostSharingFrictionInfo(BaseModel):
    should_have_sharing_friction: Optional[bool] = Field(
        None, title='Should Have Sharing Friction'
    )
    bloks_app_url: None = Field(None, title='Bloks App Url')


class InstagramDLModelsStoryCandidate(BaseModel):
    height: Optional[int] = Field(None, title='Height')
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')


class InstagramDLModelsStoryFriendshipStatus(BaseModel):
    following: Optional[bool] = Field(None, title='Following')


class InstagramDLModelsStoryImageVersions2(BaseModel):
    candidates: Optional[List[InstagramDLModelsStoryCandidate]] = Field(
        None, title='Candidates'
    )


class InstagramDLModelsStoryMusicAssetInfo(BaseModel):
    should_mute_audio: Optional[bool] = Field(None, title='Should Mute Audio')
    should_mute_audio_reason: Optional[str] = Field(
        None, title='Should Mute Audio Reason'
    )
    display_artist: Optional[str] = Field(None, title='Display Artist')
    title: Optional[str] = Field(None, title='Title')


class InstagramDLModelsStorySharingFrictionInfo(BaseModel):
    bloks_app_url: None = Field(None, title='Bloks App Url')
    should_have_sharing_friction: Optional[bool] = Field(
        None, title='Should Have Sharing Friction'
    )


class InstagramDLModelsStoryUser(BaseModel):
    is_private: Optional[bool] = Field(None, title='Is Private')
    pk: Optional[str] = Field(None, title='Pk')
    profile_pic_url: None = Field(None, title='Profile Pic Url')
    username: None = Field(None, title='Username')
    id: None = Field(None, title='Id')
    interop_messaging_user_fbid: None = Field(None, title='Interop Messaging User Fbid')


class InstagramDLModelsStoryUser1(BaseModel):
    username: Optional[str] = Field(None, title='Username')
    id: None = Field(None, title='Id')
    friendship_status: Optional[InstagramDLModelsStoryFriendshipStatus] = None
    profile_pic_url: Optional[str] = Field(None, title='Profile Pic Url')
    pk: Optional[str] = Field(None, title='Pk')
    is_verified: Optional[bool] = Field(None, title='Is Verified')
    is_private: Optional[bool] = Field(None, title='Is Private')
    interop_messaging_user_fbid: Optional[str] = Field(
        None, title='Interop Messaging User Fbid'
    )


class InstagramDLModelsStoryVideoVersion(BaseModel):
    type: Optional[int] = Field(None, title='Type')
    url: Optional[str] = Field(None, title='Url')


class InstagramDLModelsUserClipsMusicAttributionInfo(BaseModel):
    artist_name: Optional[str] = Field(None, title='Artist Name')
    song_name: Optional[str] = Field(None, title='Song Name')
    uses_original_audio: Optional[bool] = Field(None, title='Uses Original Audio')
    should_mute_audio: Optional[bool] = Field(None, title='Should Mute Audio')
    should_mute_audio_reason: Optional[str] = Field(
        None, title='Should Mute Audio Reason'
    )
    audio_id: Optional[str] = Field(None, title='Audio Id')


class InstagramDLModelsUserCoauthorProducer(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    is_verified: Optional[bool] = Field(None, title='Is Verified')
    profile_pic_url: Optional[str] = Field(None, title='Profile Pic Url')
    username: Optional[str] = Field(None, title='Username')


class InstagramDLModelsUserDashInfo(BaseModel):
    is_dash_eligible: Optional[bool] = Field(None, title='Is Dash Eligible')
    video_dash_manifest: None = Field(None, title='Video Dash Manifest')
    number_of_qualities: Optional[int] = Field(None, title='Number Of Qualities')


class InstagramDLModelsUserDimensions(BaseModel):
    height: Optional[int] = Field(None, title='Height')
    width: Optional[int] = Field(None, title='Width')


class InstagramDLModelsUserEdgeFollowedBy(BaseModel):
    count: Optional[int] = Field(None, title='Count')


class InstagramDLModelsUserEdgeLikedBy(BaseModel):
    count: Optional[int] = Field(None, title='Count')


class InstagramDLModelsUserEdgeMediaPreviewLike(BaseModel):
    count: Optional[int] = Field(None, title='Count')


class InstagramDLModelsUserNode2(BaseModel):
    text: Optional[str] = Field(None, title='Text')


class InstagramDLModelsUserOwner(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    username: Optional[str] = Field(None, title='Username')


class InstagramDLModelsUserPageInfo(BaseModel):
    has_next_page: Optional[bool] = Field(None, title='Has Next Page')
    end_cursor: Optional[str] = Field(None, title='End Cursor')


class InstagramDLModelsUserSharingFrictionInfo(BaseModel):
    should_have_sharing_friction: Optional[bool] = Field(
        None, title='Should Have Sharing Friction'
    )
    bloks_app_url: None = Field(None, title='Bloks App Url')


class InstagramDLModelsUserUser1(BaseModel):
    full_name: Optional[str] = Field(None, title='Full Name')
    followed_by_viewer: Optional[bool] = Field(None, title='Followed By Viewer')
    id: Optional[str] = Field(None, title='Id')
    is_verified: Optional[bool] = Field(None, title='Is Verified')
    profile_pic_url: Optional[str] = Field(None, title='Profile Pic Url')
    username: Optional[str] = Field(None, title='Username')


class LandingUrl(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    urlType: Optional[str] = Field(None, title='Urltype')


class Large1(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class Large10(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class Large11(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class Large12(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class Large13(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class Large14(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class Large15(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class Large2(BaseModel):
    faces: Optional[List] = Field(None, title='Faces')


class Large3(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class Large5(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class Large6(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class Large7(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class Large8(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class Large9(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class LastHit(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    args: Optional[List[str]] = Field(None, title='Args')
    method: Optional[str] = Field(None, title='Method')
    time: Optional[float] = Field(None, title='Time')


class Legacy16(BaseModel):
    can_dm: Optional[bool] = Field(None, title='Can Dm')
    can_media_tag: Optional[bool] = Field(None, title='Can Media Tag')
    created_at: Optional[str] = Field(None, title='Created At')
    default_profile: Optional[bool] = Field(None, title='Default Profile')
    default_profile_image: Optional[bool] = Field(None, title='Default Profile Image')
    description: Optional[str] = Field(None, title='Description')
    entities: Optional[Entities14] = None
    fast_followers_count: Optional[int] = Field(None, title='Fast Followers Count')
    favourites_count: Optional[int] = Field(None, title='Favourites Count')
    followers_count: Optional[int] = Field(None, title='Followers Count')
    friends_count: Optional[int] = Field(None, title='Friends Count')
    has_custom_timelines: Optional[bool] = Field(None, title='Has Custom Timelines')
    is_translator: Optional[bool] = Field(None, title='Is Translator')
    listed_count: Optional[int] = Field(None, title='Listed Count')
    location: Optional[str] = Field(None, title='Location')
    media_count: Optional[int] = Field(None, title='Media Count')
    name: Optional[str] = Field(None, title='Name')
    normal_followers_count: Optional[int] = Field(None, title='Normal Followers Count')
    pinned_tweet_ids_str: Optional[List[str]] = Field(
        None, title='Pinned Tweet Ids Str'
    )
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    profile_banner_url: Optional[str] = Field(None, title='Profile Banner Url')
    profile_image_url_https: Optional[str] = Field(
        None, title='Profile Image Url Https'
    )
    profile_interstitial_type: Optional[str] = Field(
        None, title='Profile Interstitial Type'
    )
    screen_name: Optional[str] = Field(None, title='Screen Name')
    statuses_count: Optional[int] = Field(None, title='Statuses Count')
    translator_type: Optional[str] = Field(None, title='Translator Type')
    verified: Optional[bool] = Field(None, title='Verified')
    want_retweets: Optional[bool] = Field(None, title='Want Retweets')
    withheld_in_countries: Optional[List] = Field(None, title='Withheld In Countries')


class Legacy17(BaseModel):
    can_dm: Optional[bool] = Field(None, title='Can Dm')
    can_media_tag: Optional[bool] = Field(None, title='Can Media Tag')
    created_at: Optional[str] = Field(None, title='Created At')
    default_profile: Optional[bool] = Field(None, title='Default Profile')
    default_profile_image: Optional[bool] = Field(None, title='Default Profile Image')
    description: Optional[str] = Field(None, title='Description')
    entities: Optional[Entities15] = None
    fast_followers_count: Optional[int] = Field(None, title='Fast Followers Count')
    favourites_count: Optional[int] = Field(None, title='Favourites Count')
    followers_count: Optional[int] = Field(None, title='Followers Count')
    friends_count: Optional[int] = Field(None, title='Friends Count')
    has_custom_timelines: Optional[bool] = Field(None, title='Has Custom Timelines')
    is_translator: Optional[bool] = Field(None, title='Is Translator')
    listed_count: Optional[int] = Field(None, title='Listed Count')
    location: Optional[str] = Field(None, title='Location')
    media_count: Optional[int] = Field(None, title='Media Count')
    name: Optional[str] = Field(None, title='Name')
    normal_followers_count: Optional[int] = Field(None, title='Normal Followers Count')
    pinned_tweet_ids_str: Optional[List[str]] = Field(
        None, title='Pinned Tweet Ids Str'
    )
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    profile_banner_url: Optional[str] = Field(None, title='Profile Banner Url')
    profile_image_url_https: Optional[str] = Field(
        None, title='Profile Image Url Https'
    )
    profile_interstitial_type: Optional[str] = Field(
        None, title='Profile Interstitial Type'
    )
    screen_name: Optional[str] = Field(None, title='Screen Name')
    statuses_count: Optional[int] = Field(None, title='Statuses Count')
    translator_type: Optional[str] = Field(None, title='Translator Type')
    verified: Optional[bool] = Field(None, title='Verified')
    want_retweets: Optional[bool] = Field(None, title='Want Retweets')
    withheld_in_countries: Optional[List] = Field(None, title='Withheld In Countries')


class Location(BaseModel):
    pk: Optional[int] = Field(None, title='Pk')


class LogPb(BaseModel):
    impr_id: Optional[str] = Field(None, title='Impr Id')


class MakeupEyeliner(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    name: Optional[str] = Field(None, title='Name')


class MakeupIdeas(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    name: Optional[str] = Field(None, title='Name')


class MakeupInspo(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    name: Optional[str] = Field(None, title='Name')


class MakeupLooks(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    name: Optional[str] = Field(None, title='Name')


class MakeupTutorials(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    name: Optional[str] = Field(None, title='Name')


class Media(BaseModel):
    inline_media: Optional[List] = Field(None, title='Inline Media')


class MediaContentItem(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    type: Optional[str] = Field(None, title='Type')
    width: Optional[str] = Field(None, title='Width')
    height: Optional[str] = Field(None, title='Height')


class MediaStarrating(BaseModel):
    count: Optional[str] = Field(None, title='Count')
    average: Optional[str] = Field(None, title='Average')
    min: Optional[str] = Field(None, title='Min')
    max: Optional[str] = Field(None, title='Max')


class MediaStatistics(BaseModel):
    views: Optional[str] = Field(None, title='Views')


class MediaThumbnailItem(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[str] = Field(None, title='Width')
    height: Optional[str] = Field(None, title='Height')


class Medium1(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class Medium10(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class Medium11(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class Medium12(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class Medium13(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class Medium14(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class Medium15(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class Medium2(BaseModel):
    faces: Optional[List] = Field(None, title='Faces')


class Medium3(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class Medium5(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class Medium6(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class Medium7(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class Medium8(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class Medium9(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class MusicConsumptionInfo(BaseModel):
    should_mute_audio: Optional[bool] = Field(None, title='Should Mute Audio')
    should_mute_audio_reason: Optional[str] = Field(
        None, title='Should Mute Audio Reason'
    )
    is_trending_in_clips: Optional[bool] = Field(None, title='Is Trending In Clips')


class Namespaces(BaseModel):
    field_: Optional[str] = Field(None, title='Field ')


class Node5(BaseModel):
    text: Optional[str] = Field(None, title='Text')


class Node7(BaseModel):
    user: Optional[InstagramDLModelsUserUser1] = None
    x: Optional[float] = Field(None, title='X')
    y: Optional[float] = Field(None, title='Y')


class Node8(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    full_name: Optional[str] = Field(None, title='Full Name')
    is_private: Optional[bool] = Field(None, title='Is Private')
    is_verified: Optional[bool] = Field(None, title='Is Verified')
    profile_pic_url: Optional[str] = Field(None, title='Profile Pic Url')
    username: Optional[str] = Field(None, title='Username')


class Offer(BaseModel):
    in_stock: Optional[bool] = Field(None, title='In Stock')
    min_ad_price: Optional[Any] = Field(None, title='Min Ad Price')
    price_currency: Optional[str] = Field(None, title='Price Currency')
    id: Optional[str] = Field(None, title='Id')
    price_value: Optional[int] = Field(None, title='Price Value')
    name: Optional[Any] = Field(None, title='Name')
    type: Optional[str] = Field(None, title='Type')
    condition: Optional[int] = Field(None, title='Condition')
    availability: Optional[int] = Field(None, title='Availability')


class OfferSummary(BaseModel):
    price_val: Optional[int] = Field(None, title='Price Val')
    currency: Optional[str] = Field(None, title='Currency')
    price: Optional[str] = Field(None, title='Price')
    in_stock: Optional[bool] = Field(None, title='In Stock')
    availability: Optional[int] = Field(None, title='Availability')
    condition: Optional[int] = Field(None, title='Condition')
    standard_price: Optional[str] = Field(None, title='Standard Price')


class OfficialUser(BaseModel):
    full_name: Optional[str] = Field(None, title='Full Name')
    ads_only_profile_site: Optional[Any] = Field(None, title='Ads Only Profile Site')
    image_medium_url: Optional[str] = Field(None, title='Image Medium Url')
    followed_by_me: Optional[bool] = Field(None, title='Followed By Me')
    verified_identity: Optional[Dict[str, Any]] = Field(None, title='Verified Identity')
    domain_url: Optional[str] = Field(None, title='Domain Url')
    id: Optional[str] = Field(None, title='Id')
    follower_count: Optional[int] = Field(None, title='Follower Count')
    first_name: Optional[str] = Field(None, title='First Name')
    blocked_by_me: Optional[bool] = Field(None, title='Blocked By Me')
    is_default_image: Optional[bool] = Field(None, title='Is Default Image')
    image_small_url: Optional[str] = Field(None, title='Image Small Url')
    is_verified_merchant: Optional[bool] = Field(None, title='Is Verified Merchant')
    type: Optional[str] = Field(None, title='Type')
    username: Optional[str] = Field(None, title='Username')
    domain_verified: Optional[bool] = Field(None, title='Domain Verified')
    indexed: Optional[bool] = Field(None, title='Indexed')
    explicitly_followed_by_me: Optional[bool] = Field(
        None, title='Explicitly Followed By Me'
    )
    is_ads_only_profile: Optional[bool] = Field(None, title='Is Ads Only Profile')


class Orig2(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class Orig3(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class Orig4(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class Orig5(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class Orig6(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class Orig7(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class OriginalInfo1(BaseModel):
    height: Optional[int] = Field(None, title='Height')
    width: Optional[int] = Field(None, title='Width')
    focus_rects: Optional[List[FocusRect]] = Field(None, title='Focus Rects')


class OriginalInfo2(BaseModel):
    height: Optional[int] = Field(None, title='Height')
    width: Optional[int] = Field(None, title='Width')
    focus_rects: Optional[List[FocusRect]] = Field(None, title='Focus Rects')


class OriginalInfo3(BaseModel):
    height: Optional[int] = Field(None, title='Height')
    width: Optional[int] = Field(None, title='Width')
    focus_rects: Optional[List[FocusRect]] = Field(None, title='Focus Rects')


class OriginalInfo4(BaseModel):
    height: Optional[int] = Field(None, title='Height')
    width: Optional[int] = Field(None, title='Width')
    focus_rects: Optional[List[FocusRect]] = Field(None, title='Focus Rects')


class OriginalInfo5(BaseModel):
    height: Optional[int] = Field(None, title='Height')
    width: Optional[int] = Field(None, title='Width')
    focus_rects: Optional[List[FocusRect]] = Field(None, title='Focus Rects')


class OriginalInfo6(BaseModel):
    height: Optional[int] = Field(None, title='Height')
    width: Optional[int] = Field(None, title='Width')
    focus_rects: Optional[List[FocusRect]] = Field(None, title='Focus Rects')


class OriginalInfo7(BaseModel):
    height: Optional[int] = Field(None, title='Height')
    width: Optional[int] = Field(None, title='Width')
    focus_rects: Optional[List[FocusRect]] = Field(None, title='Focus Rects')


class OriginalSoundInfo(BaseModel):
    original_audio_title: Optional[str] = Field(None, title='Original Audio Title')
    should_mute_audio: Optional[bool] = Field(None, title='Should Mute Audio')
    audio_asset_id: Optional[str] = Field(None, title='Audio Asset Id')
    consumption_info: Optional[ConsumptionInfo] = None
    ig_artist: Optional[IgArtist] = None
    is_explicit: Optional[bool] = Field(None, title='Is Explicit')


class Originals(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class Owner1(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    is_verified: Optional[bool] = Field(None, title='Is Verified')
    profile_pic_url: Optional[str] = Field(None, title='Profile Pic Url')
    username: Optional[str] = Field(None, title='Username')


class Owner3(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    username: Optional[str] = Field(None, title='Username')


class PageInfo2(BaseModel):
    has_next_page: Optional[bool] = Field(None, title='Has Next Page')
    end_cursor: None = Field(None, title='End Cursor')


class Partner(BaseModel):
    node_id: Optional[str] = Field(None, title='Node Id')
    contact_phone_country: Optional[ContactPhoneCountry] = None
    contact_email: Optional[Any] = Field(None, title='Contact Email')
    profile_place: Optional[Any] = Field(None, title='Profile Place')
    enable_profile_address: Optional[bool] = Field(None, title='Enable Profile Address')
    contact_phone: Optional[str] = Field(None, title='Contact Phone')
    enable_profile_message: Optional[bool] = Field(None, title='Enable Profile Message')


class PinnedPostInfo(BaseModel):
    is_pinned_to_profile: Optional[bool] = Field(None, title='Is Pinned To Profile')
    is_pinned_to_parent_post: Optional[bool] = Field(
        None, title='Is Pinned To Parent Post'
    )


class Pinner(BaseModel):
    full_name: Optional[str] = Field(None, title='Full Name')
    ads_only_profile_site: Optional[Any] = Field(None, title='Ads Only Profile Site')
    image_medium_url: Optional[str] = Field(None, title='Image Medium Url')
    followed_by_me: Optional[bool] = Field(None, title='Followed By Me')
    verified_identity: Optional[Dict[str, Any]] = Field(None, title='Verified Identity')
    domain_url: Optional[Any] = Field(None, title='Domain Url')
    id: Optional[str] = Field(None, title='Id')
    follower_count: Optional[int] = Field(None, title='Follower Count')
    first_name: Optional[str] = Field(None, title='First Name')
    blocked_by_me: Optional[bool] = Field(None, title='Blocked By Me')
    is_default_image: Optional[bool] = Field(None, title='Is Default Image')
    image_small_url: Optional[str] = Field(None, title='Image Small Url')
    is_verified_merchant: Optional[bool] = Field(None, title='Is Verified Merchant')
    type: Optional[str] = Field(None, title='Type')
    username: Optional[str] = Field(None, title='Username')
    domain_verified: Optional[bool] = Field(None, title='Domain Verified')
    indexed: Optional[bool] = Field(None, title='Indexed')
    explicitly_followed_by_me: Optional[bool] = Field(
        None, title='Explicitly Followed By Me'
    )
    is_ads_only_profile: Optional[bool] = Field(None, title='Is Ads Only Profile')


class PinterestDLModelsFeedLink(BaseModel):
    rel: Optional[str] = Field(None, title='Rel')
    type: Optional[str] = Field(None, title='Type')
    href: Optional[str] = Field(None, title='Href')


class PinterestDLModelsFeedSummaryDetail(BaseModel):
    type: Optional[str] = Field(None, title='Type')
    language: None = Field(None, title='Language')
    base: Optional[str] = Field(None, title='Base')
    value: Optional[str] = Field(None, title='Value')


class PinterestDLModelsFeedTitleDetail(BaseModel):
    type: Optional[str] = Field(None, title='Type')
    language: None = Field(None, title='Language')
    base: Optional[str] = Field(None, title='Base')
    value: Optional[str] = Field(None, title='Value')


class PinterestDLModelsPostAggregatedStats(BaseModel):
    saves: Optional[int] = Field(None, title='Saves')
    done: Optional[int] = Field(None, title='Done')


class PinterestDLModelsPostAnalysisUa(BaseModel):
    app_type: Optional[int] = Field(None, title='App Type')
    browser_name: Optional[str] = Field(None, title='Browser Name')
    browser_version: Optional[str] = Field(None, title='Browser Version')
    device_type: Optional[Any] = Field(None, title='Device Type')
    device: Optional[str] = Field(None, title='Device')
    os_name: Optional[str] = Field(None, title='Os Name')
    os_version: Optional[str] = Field(None, title='Os Version')


class PinterestDLModelsPostImage(BaseModel):
    field_736x: Optional[Field736x] = Field(None, alias='736x')
    field_750x: Optional[Field750x] = Field(None, alias='750x')
    field_474x: Optional[Field474x] = Field(None, alias='474x')
    field_200x: Optional[Field200x] = Field(None, alias='200x')
    field_222x: Optional[Field222x] = Field(None, alias='222x')
    field_640x: Optional[Field640x] = Field(None, alias='640x')
    field_70x70: Optional[Field70x70] = Field(None, alias='70x70')
    field_290x: Optional[Field290x] = Field(None, alias='290x')
    field_45x45: Optional[Field45x45] = Field(None, alias='45x45')
    field_345x: Optional[Field345x] = Field(None, alias='345x')
    field_432x292: Optional[Field432x292] = Field(None, alias='432x292')
    field_75x75: Optional[Field75x75] = Field(None, alias='75x75')
    field_70x: Optional[Field70x] = Field(None, alias='70x')
    field_1200x: Optional[Field1200x] = Field(None, alias='1200x')
    field_200x150: Optional[Field200x150] = Field(None, alias='200x150')
    field_400x300: Optional[Field400x300] = Field(None, alias='400x300')
    field_400x: Optional[Field400x] = Field(None, alias='400x')
    field_60x60: Optional[Field60x60] = Field(None, alias='60x60')
    field_170x: Optional[Field170x] = Field(None, alias='170x')
    field_564x: Optional[Field564x] = Field(None, alias='564x')
    field_236x: Optional[Field236x] = Field(None, alias='236x')
    field_30x30: Optional[Field30x30] = Field(None, alias='30x30')
    field_216x146: Optional[Field216x146] = Field(None, alias='216x146')
    field_600x: Optional[Field600x] = Field(None, alias='600x')
    field_237x: Optional[Field237x] = Field(None, alias='237x')
    field_192x: Optional[Field192x] = Field(None, alias='192x')
    field_136x136: Optional[Field136x136] = Field(None, alias='136x136')
    field_90x90: Optional[Field90x90] = Field(None, alias='90x90')
    field_150x150: Optional[Field150x150] = Field(None, alias='150x150')
    field_550x: Optional[Field550x] = Field(None, alias='550x')
    originals: Optional[Originals] = None


class PinterestDLModelsPostNativeCreator(BaseModel):
    full_name: Optional[str] = Field(None, title='Full Name')
    ads_only_profile_site: Optional[Any] = Field(None, title='Ads Only Profile Site')
    image_medium_url: Optional[str] = Field(None, title='Image Medium Url')
    followed_by_me: Optional[bool] = Field(None, title='Followed By Me')
    verified_identity: Optional[Dict[str, Any]] = Field(None, title='Verified Identity')
    domain_url: Optional[Any] = Field(None, title='Domain Url')
    id: Optional[str] = Field(None, title='Id')
    follower_count: Optional[int] = Field(None, title='Follower Count')
    first_name: Optional[str] = Field(None, title='First Name')
    blocked_by_me: Optional[bool] = Field(None, title='Blocked By Me')
    is_default_image: Optional[bool] = Field(None, title='Is Default Image')
    image_small_url: Optional[str] = Field(None, title='Image Small Url')
    is_verified_merchant: Optional[bool] = Field(None, title='Is Verified Merchant')
    type: Optional[str] = Field(None, title='Type')
    username: Optional[str] = Field(None, title='Username')
    domain_verified: Optional[bool] = Field(None, title='Domain Verified')
    indexed: Optional[bool] = Field(None, title='Indexed')
    explicitly_followed_by_me: Optional[bool] = Field(
        None, title='Explicitly Followed By Me'
    )
    is_ads_only_profile: Optional[bool] = Field(None, title='Is Ads Only Profile')


class PinterestDLModelsPostOptions(BaseModel):
    bookmarks: Optional[List[str]] = Field(None, title='Bookmarks')
    field_set_key: Optional[str] = Field(None, title='Field Set Key')
    id: Optional[str] = Field(None, title='Id')


class PinterestDLModelsPostOrig(BaseModel):
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')
    url: Optional[str] = Field(None, title='Url')


class PinterestDLModelsPostOwner(BaseModel):
    full_name: Optional[str] = Field(None, title='Full Name')
    ads_only_profile_site: Optional[Any] = Field(None, title='Ads Only Profile Site')
    image_medium_url: Optional[str] = Field(None, title='Image Medium Url')
    followed_by_me: Optional[bool] = Field(None, title='Followed By Me')
    verified_identity: Optional[Dict[str, Any]] = Field(None, title='Verified Identity')
    domain_url: Optional[Any] = Field(None, title='Domain Url')
    id: Optional[str] = Field(None, title='Id')
    follower_count: Optional[int] = Field(None, title='Follower Count')
    first_name: Optional[str] = Field(None, title='First Name')
    blocked_by_me: Optional[bool] = Field(None, title='Blocked By Me')
    is_default_image: Optional[bool] = Field(None, title='Is Default Image')
    image_small_url: Optional[str] = Field(None, title='Image Small Url')
    is_verified_merchant: Optional[bool] = Field(None, title='Is Verified Merchant')
    type: Optional[str] = Field(None, title='Type')
    username: Optional[str] = Field(None, title='Username')
    domain_verified: Optional[bool] = Field(None, title='Domain Verified')
    indexed: Optional[bool] = Field(None, title='Indexed')
    explicitly_followed_by_me: Optional[bool] = Field(
        None, title='Explicitly Followed By Me'
    )
    is_ads_only_profile: Optional[bool] = Field(None, title='Is Ads Only Profile')


class PinterestDLModelsPostReactionCounts(BaseModel):
    field_1: Optional[int] = Field(None, alias='1', title='1')
    field_11: Optional[int] = Field(None, alias='11', title='11')
    field_13: Optional[int] = Field(None, alias='13', title='13')


class PinterestDLModelsPostResource(BaseModel):
    name: Optional[str] = Field(None, title='Name')
    options: Optional[PinterestDLModelsPostOptions] = None


class PinterestDLModelsPostUser(BaseModel):
    unauth_id: Optional[str] = Field(None, title='Unauth Id')
    ip_country: Optional[str] = Field(None, title='Ip Country')
    ip_region: Optional[str] = Field(None, title='Ip Region')


class PinterestDLModelsReverseAggregatedStats(BaseModel):
    saves: Optional[int] = Field(None, title='Saves')
    done: Optional[int] = Field(None, title='Done')


class PinterestDLModelsReverseImage(BaseModel):
    images: Optional[ImageImages] = None
    dominant_color: Optional[str] = Field(None, title='Dominant Color')


class PinterestDLModelsReverseMetadata(BaseModel):
    version: Optional[str] = Field(None, title='Version')
    root_pin_id: Optional[str] = Field(None, title='Root Pin Id')
    is_compatible: Optional[bool] = Field(None, title='Is Compatible')
    compatible_version: Optional[str] = Field(None, title='Compatible Version')
    canvas_aspect_ratio: Optional[float] = Field(None, title='Canvas Aspect Ratio')
    pin_image_signature: Optional[str] = Field(None, title='Pin Image Signature')
    is_editable: Optional[bool] = Field(None, title='Is Editable')
    is_promotable: Optional[bool] = Field(None, title='Is Promotable')
    pin_title: Optional[str] = Field(None, title='Pin Title')
    root_user_id: Optional[str] = Field(None, title='Root User Id')


class PinterestDLModelsReverseNativeCreator(BaseModel):
    explicitly_followed_by_me: Optional[bool] = Field(
        None, title='Explicitly Followed By Me'
    )
    full_name: Optional[str] = Field(None, title='Full Name')
    image_small_url: Optional[AnyUrl] = Field(None, title='Image Small Url')
    native_pin_count: Optional[int] = Field(None, title='Native Pin Count')
    show_creator_profile: Optional[bool] = Field(None, title='Show Creator Profile')
    id: Optional[str] = Field(None, title='Id')
    first_name: Optional[str] = Field(None, title='First Name')
    username: Optional[str] = Field(None, title='Username')


class PinterestDLModelsReverseReactionCounts(BaseModel):
    field_1: Optional[int] = Field(None, alias='1', title='1')


class PinterestDLModelsUserAnalysisUa(BaseModel):
    app_type: Optional[int] = Field(None, title='App Type')
    browser_name: Optional[str] = Field(None, title='Browser Name')
    browser_version: Optional[str] = Field(None, title='Browser Version')
    device_type: Optional[int] = Field(None, title='Device Type')
    device: Optional[str] = Field(None, title='Device')
    os_name: Optional[str] = Field(None, title='Os Name')
    os_version: Optional[str] = Field(None, title='Os Version')


class PinterestDLModelsUserOptions(BaseModel):
    bookmarks: Optional[List[str]] = Field(None, title='Bookmarks')
    username: Optional[str] = Field(None, title='Username')
    field_set_key: Optional[str] = Field(None, title='Field Set Key')


class PinterestDLModelsUserResource(BaseModel):
    name: Optional[str] = Field(None, title='Name')
    options: Optional[PinterestDLModelsUserOptions] = None


class PinterestDLModelsUserUser(BaseModel):
    node_id: Optional[str] = Field(None, title='Node Id')
    is_employee: Optional[bool] = Field(None, title='Is Employee')
    opt_in_private_account: Optional[bool] = Field(None, title='Opt In Private Account')
    push_package_user_id: Optional[str] = Field(None, title='Push Package User Id')
    age_in_years: Optional[int] = Field(None, title='Age In Years')
    is_candidate_for_parental_control_passcode: Optional[bool] = Field(
        None, title='Is Candidate For Parental Control Passcode'
    )
    facebook_publish_stream_enabled: Optional[bool] = Field(
        None, title='Facebook Publish Stream Enabled'
    )
    has_quicksave_board: Optional[bool] = Field(None, title='Has Quicksave Board')
    connected_to_microsoft: Optional[bool] = Field(None, title='Connected To Microsoft')
    search_privacy_enabled: Optional[bool] = Field(None, title='Search Privacy Enabled')
    domain_verified: Optional[bool] = Field(None, title='Domain Verified')
    profile_discovered_public: None = Field(None, title='Profile Discovered Public')
    twitter_url: None = Field(None, title='Twitter Url')
    allow_marketing_cookies: None = Field(None, title='Allow Marketing Cookies')
    verified_user_websites: Optional[List] = Field(None, title='Verified User Websites')
    has_mfa_enabled: Optional[bool] = Field(None, title='Has Mfa Enabled')
    created_at: Optional[str] = Field(None, title='Created At')
    image_small_url: Optional[str] = Field(None, title='Image Small Url')
    image_large_url: Optional[str] = Field(None, title='Image Large Url')
    website_url: None = Field(None, title='Website Url')
    can_enable_mfa: Optional[bool] = Field(None, title='Can Enable Mfa')
    is_under_16: Optional[bool] = Field(None, title='Is Under 16')
    is_ads_only_profile: Optional[bool] = Field(None, title='Is Ads Only Profile')
    exclude_from_search: Optional[bool] = Field(None, title='Exclude From Search')
    parental_control_anonymized_email: None = Field(
        None, title='Parental Control Anonymized Email'
    )
    allow_analytic_cookies: None = Field(None, title='Allow Analytic Cookies')
    allow_personalization_cookies: None = Field(
        None, title='Allow Personalization Cookies'
    )
    epik: Optional[str] = Field(None, title='Epik')
    country: Optional[str] = Field(None, title='Country')
    custom_gender: None = Field(None, title='Custom Gender')
    is_private_profile: Optional[bool] = Field(None, title='Is Private Profile')
    unverified_phone_country: None = Field(None, title='Unverified Phone Country')
    domain_url: None = Field(None, title='Domain Url')
    connected_to_facebook: Optional[bool] = Field(None, title='Connected To Facebook')
    allow_switch_between_private_and_public_profile: Optional[bool] = Field(
        None, title='Allow Switch Between Private And Public Profile'
    )
    gender: Optional[str] = Field(None, title='Gender')
    ip_country: Optional[str] = Field(None, title='Ip Country')
    can_edit_search_privacy: Optional[bool] = Field(
        None, title='Can Edit Search Privacy'
    )
    ads_only_profile_site: None = Field(None, title='Ads Only Profile Site')
    id: Optional[str] = Field(None, title='Id')
    twitter_publish_enabled: Optional[bool] = Field(
        None, title='Twitter Publish Enabled'
    )
    connected_to_google: Optional[bool] = Field(None, title='Connected To Google')
    is_eligible_for_image_only_grid: Optional[bool] = Field(
        None, title='Is Eligible For Image Only Grid'
    )
    phone_number_end: Optional[str] = Field(None, title='Phone Number End')
    unverified_phone_number: None = Field(None, title='Unverified Phone Number')
    is_high_risk: Optional[bool] = Field(None, title='Is High Risk')
    listed_website_url: None = Field(None, title='Listed Website Url')
    should_show_messaging: Optional[bool] = Field(None, title='Should Show Messaging')
    is_under_18: Optional[bool] = Field(None, title='Is Under 18')
    image_xlarge_url: Optional[str] = Field(None, title='Image Xlarge Url')
    resurrection_info: None = Field(None, title='Resurrection Info')
    facebook_id: Optional[str] = Field(None, title='Facebook Id')
    is_any_website_verified: Optional[bool] = Field(
        None, title='Is Any Website Verified'
    )
    phone_number: None = Field(None, title='Phone Number')
    verified_identity: Optional[Dict[str, Any]] = Field(None, title='Verified Identity')
    facebook_timeline_enabled: Optional[bool] = Field(
        None, title='Facebook Timeline Enabled'
    )
    full_name: Optional[str] = Field(None, title='Full Name')
    phone_country: None = Field(None, title='Phone Country')
    email: Optional[str] = Field(None, title='Email')
    connected_to_youtube: Optional[bool] = Field(None, title='Connected To Youtube')
    has_password: Optional[bool] = Field(None, title='Has Password')
    third_party_marketing_tracking_enabled: Optional[bool] = Field(
        None, title='Third Party Marketing Tracking Enabled'
    )
    last_name: Optional[str] = Field(None, title='Last Name')
    is_write_banned: Optional[bool] = Field(None, title='Is Write Banned')
    connected_to_dropbox: Optional[bool] = Field(None, title='Connected To Dropbox')
    is_matured_new_user: Optional[bool] = Field(None, title='Is Matured New User')
    nags: Optional[List] = Field(None, title='Nags')
    verified_domains: Optional[List] = Field(None, title='Verified Domains')
    username: Optional[str] = Field(None, title='Username')
    ip_region: Optional[str] = Field(None, title='Ip Region')
    login_state: Optional[int] = Field(None, title='Login State')
    unverified_phone_number_without_country: Optional[str] = Field(
        None, title='Unverified Phone Number Without Country'
    )
    personalize_from_offsite_browsing: Optional[bool] = Field(
        None, title='Personalize From Offsite Browsing'
    )
    is_parental_control_passcode_enabled: Optional[bool] = Field(
        None, title='Is Parental Control Passcode Enabled'
    )
    connected_to_etsy: Optional[bool] = Field(None, title='Connected To Etsy')
    connected_to_instagram: Optional[bool] = Field(None, title='Connected To Instagram')
    image_medium_url: Optional[str] = Field(None, title='Image Medium Url')
    first_name: Optional[str] = Field(None, title='First Name')
    is_partner: Optional[bool] = Field(None, title='Is Partner')
    type: Optional[str] = Field(None, title='Type')
    gplus_url: Optional[str] = Field(None, title='Gplus Url')


class Platform(BaseModel):
    audience: Optional[Audience] = None
    device: Optional[Device] = None


class Platform1(BaseModel):
    audience: Optional[Audience] = None
    device: Optional[Device] = None


class PrettyMakeup(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    name: Optional[str] = Field(None, title='Name')


class Product(BaseModel):
    offer_summary: Optional[OfferSummary] = None
    variant_set: Optional[Any] = Field(None, title='Variant Set')
    videos: Optional[List] = Field(None, title='Videos')
    name: Optional[str] = Field(None, title='Name')
    type: Optional[str] = Field(None, title='Type')
    shipping_info: Optional[Dict[str, Any]] = Field(None, title='Shipping Info')
    additional_images: Optional[Any] = Field(None, title='Additional Images')
    id: Optional[str] = Field(None, title='Id')
    additional_images_per_spec: Optional[Any] = Field(
        None, title='Additional Images Per Spec'
    )
    purchase_url: Optional[Any] = Field(None, title='Purchase Url')
    has_multi_images: Optional[bool] = Field(None, title='Has Multi Images')
    offers: Optional[List[Offer]] = Field(None, title='Offers')
    label_info: Optional[Dict[str, Any]] = Field(None, title='Label Info')
    price_history_summary: Optional[Dict[str, Any]] = Field(
        None, title='Price History Summary'
    )


class ProfileCover(BaseModel):
    type: Optional[str] = Field(None, title='Type')
    source_id: Optional[Any] = Field(None, title='Source Id')
    source: Optional[str] = Field(None, title='Source')
    video: Optional[Any] = Field(None, title='Video')
    images: Optional[Any] = Field(None, title='Images')


class ProfileTab(BaseModel):
    showPlayListTab: Optional[bool] = Field(None, title='Showplaylisttab')


class QuotedStatusPermalink(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    expanded: Optional[str] = Field(None, title='Expanded')
    display: Optional[str] = Field(None, title='Display')


class RecommendScore(BaseModel):
    score: Optional[float] = Field(None, title='Score')
    count: Optional[int] = Field(None, title='Count')


class Ref(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    url_type: Optional[str] = Field(None, title='Url Type')


class Result10(BaseModel):
    media_key: Optional[str] = Field(None, title='Media Key')


class Result12(BaseModel):
    media_key: Optional[str] = Field(None, title='Media Key')


class Result15(BaseModel):
    media_key: Optional[str] = Field(None, title='Media Key')


class Result22(BaseModel):
    media_key: Optional[str] = Field(None, title='Media Key')


class Result24(BaseModel):
    media_key: Optional[str] = Field(None, title='Media Key')


class Result27(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    rest_id: Optional[str] = Field(None, title='Rest Id')


class Rgb(BaseModel):
    blue: Optional[int] = Field(None, title='Blue')
    green: Optional[int] = Field(None, title='Green')
    red: Optional[int] = Field(None, title='Red')


class RichMetadata(BaseModel):
    url: Optional[Any] = Field(None, title='Url')
    amp_valid: Optional[bool] = Field(None, title='Amp Valid')
    link_status: Optional[Any] = Field(None, title='Link Status')
    locale: Optional[Any] = Field(None, title='Locale')
    apple_touch_icon_images: Optional[Any] = Field(
        None, title='Apple Touch Icon Images'
    )
    canonical_url: Optional[Any] = Field(None, title='Canonical Url')
    apple_touch_icon_link: Optional[Any] = Field(None, title='Apple Touch Icon Link')
    id: Optional[str] = Field(None, title='Id')
    amp_url: Optional[Any] = Field(None, title='Amp Url')
    description: Optional[str] = Field(None, title='Description')
    products: Optional[List[Product]] = Field(None, title='Products')
    aggregate_rating: Optional[AggregateRating] = None
    favicon_link: Optional[str] = Field(None, title='Favicon Link')
    tracker: Optional[Any] = Field(None, title='Tracker')
    type: Optional[str] = Field(None, title='Type')
    favicon_images: Optional[FaviconImages] = None
    site_name: Optional[str] = Field(None, title='Site Name')
    has_price_drop: Optional[bool] = Field(None, title='Has Price Drop')
    title: Optional[str] = Field(None, title='Title')


class RichSummary(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    products: Optional[List] = Field(None, title='Products')
    actions: Optional[List] = Field(None, title='Actions')
    display_name: Optional[str] = Field(None, title='Display Name')
    site_name: Optional[str] = Field(None, title='Site Name')
    type_name: Optional[str] = Field(None, title='Type Name')


class Richtext(BaseModel):
    richtext_tags: Optional[List] = Field(None, title='Richtext Tags')


class RichtextTag(BaseModel):
    from_index: Optional[int] = Field(None, title='From Index')
    to_index: Optional[int] = Field(None, title='To Index')
    richtext_types: Optional[List[str]] = Field(None, title='Richtext Types')


class Scopes(BaseModel):
    followers: Optional[bool] = Field(None, title='Followers')


class ScribeConfig(BaseModel):
    page: Optional[str] = Field(None, title='Page')


class Section(BaseModel):
    slug: Optional[str] = Field(None, title='Slug')
    id: Optional[str] = Field(None, title='Id')
    title: Optional[str] = Field(None, title='Title')


class SeoBreadcrumb(BaseModel):
    name: Optional[str] = Field(None, title='Name')
    url: Optional[str] = Field(None, title='Url')


class SeoRelatedInterest(BaseModel):
    name: Optional[str] = Field(None, title='Name')
    url: Optional[str] = Field(None, title='Url')
    origin_interest_id: Optional[int] = Field(None, title='Origin Interest Id')
    translated_interest_id: Optional[Any] = Field(None, title='Translated Interest Id')
    image: Optional[PinterestDLModelsPostImage] = None


class ShareInfo(BaseModel):
    reposted_post: None = Field(None, title='Reposted Post')
    quoted_post: None = Field(None, title='Quoted Post')
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    can_quote_post: Optional[bool] = Field(None, title='Can Quote Post')
    can_repost: Optional[bool] = Field(None, title='Can Repost')
    is_reposted_by_viewer: Optional[bool] = Field(None, title='Is Reposted By Viewer')
    repost_restricted_reason: Optional[str] = Field(
        None, title='Repost Restricted Reason'
    )


class ShareMeta(BaseModel):
    desc: Optional[str] = Field(None, title='Desc')
    title: Optional[str] = Field(None, title='Title')


class SharingFrictionInfo1(BaseModel):
    should_have_sharing_friction: Optional[bool] = Field(
        None, title='Should Have Sharing Friction'
    )
    bloks_app_url: Optional[str] = Field(None, title='Bloks App Url')


class Small1(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class Small10(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class Small11(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class Small12(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class Small13(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class Small14(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class Small15(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class Small2(BaseModel):
    faces: Optional[List] = Field(None, title='Faces')


class Small3(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class Small5(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class Small6(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class Small7(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class Small8(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class Small9(BaseModel):
    faces: Optional[List[Face]] = Field(None, title='Faces')


class SocialContext(BaseModel):
    type: Optional[str] = Field(None, title='Type')
    contextType: Optional[str] = Field(None, title='Contexttype')
    text: Optional[str] = Field(None, title='Text')


class SquareCrop(BaseModel):
    crop_bottom: Optional[float] = Field(None, title='Crop Bottom')
    crop_left: Optional[float] = Field(None, title='Crop Left')
    crop_right: Optional[float] = Field(None, title='Crop Right')
    crop_top: Optional[float] = Field(None, title='Crop Top')


class Stats(BaseModel):
    diggCount: Optional[int] = Field(None, title='Diggcount')
    followerCount: Optional[int] = Field(None, title='Followercount')
    followingCount: Optional[int] = Field(None, title='Followingcount')
    friendCount: Optional[int] = Field(None, title='Friendcount')
    heart: Optional[int] = Field(None, title='Heart')
    heartCount: Optional[int] = Field(None, title='Heartcount')
    videoCount: Optional[int] = Field(None, title='Videocount')


class StickerData(BaseModel):
    ig_mention: Optional[IgMention] = None


class StoryLink(BaseModel):
    url: Optional[str] = Field(None, title='Url')


class StoryLinkSticker(BaseModel):
    x: Optional[float] = Field(None, title='X')
    y: Optional[float] = Field(None, title='Y')
    width: Optional[float] = Field(None, title='Width')
    height: Optional[float] = Field(None, title='Height')
    rotation: Optional[int] = Field(None, title='Rotation')
    story_link: Optional[StoryLink] = None
    id: None = Field(None, title='Id')


class StoryLocation(BaseModel):
    x: Optional[float] = Field(None, title='X')
    y: Optional[float] = Field(None, title='Y')
    width: Optional[float] = Field(None, title='Width')
    height: Optional[float] = Field(None, title='Height')
    rotation: Optional[int] = Field(None, title='Rotation')
    location: Optional[Location] = None
    id: None = Field(None, title='Id')


class StoryMusicSticker(BaseModel):
    music_asset_info: Optional[InstagramDLModelsStoryMusicAssetInfo] = None
    id: None = Field(None, title='Id')


class Style(BaseModel):
    background_color: Optional[str] = Field(None, title='Background Color')


class SubtitleDetail(BaseModel):
    type: Optional[str] = Field(None, title='Type')
    language: None = Field(None, title='Language')
    base: Optional[str] = Field(None, title='Base')
    value: Optional[str] = Field(None, title='Value')


class SwagMakeup(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    name: Optional[str] = Field(None, title='Name')


class TextPostAppInfo(BaseModel):
    is_post_unavailable: Optional[bool] = Field(None, title='Is Post Unavailable')
    pinned_post_info: Optional[PinnedPostInfo] = None
    share_info: Optional[ShareInfo] = None
    reply_to_author: None = Field(None, title='Reply To Author')
    direct_reply_count: Optional[int] = Field(None, title='Direct Reply Count')
    hush_info: None = Field(None, title='Hush Info')
    can_reply: Optional[bool] = Field(None, title='Can Reply')
    is_reply: Optional[bool] = Field(None, title='Is Reply')
    link_preview_attachment: None = Field(None, title='Link Preview Attachment')
    fediverse_info: None = Field(None, title='Fediverse Info')
    post_unavailable_reason: None = Field(None, title='Post Unavailable Reason')


class ThreadsDLModelsGraphQLPostCandidate(BaseModel):
    height: Optional[int] = Field(None, title='Height')
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')


class ThreadsDLModelsGraphQLPostCaption(BaseModel):
    text: Optional[str] = Field(None, title='Text')


class ThreadsDLModelsGraphQLPostImageVersions2(BaseModel):
    candidates: Optional[List[ThreadsDLModelsGraphQLPostCandidate]] = Field(
        None, title='Candidates'
    )


class ThreadsDLModelsGraphQLPostUser(BaseModel):
    friendship_status: None = Field(None, title='Friendship Status')
    id: None = Field(None, title='Id')
    pk: Optional[str] = Field(None, title='Pk')
    transparency_label: None = Field(None, title='Transparency Label')
    transparency_product: None = Field(None, title='Transparency Product')
    transparency_product_enabled: Optional[bool] = Field(
        None, title='Transparency Product Enabled'
    )
    is_verified: Optional[bool] = Field(None, title='Is Verified')
    username: Optional[str] = Field(None, title='Username')
    profile_pic_url: Optional[str] = Field(None, title='Profile Pic Url')


class ThreadsDLModelsGraphQLPostVideoVersion(BaseModel):
    type: Optional[int] = Field(None, title='Type')
    height: Optional[int] = Field(None, title='Height')
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')


class ThreadsDLModelsProfileCandidate(BaseModel):
    height: Optional[int] = Field(None, title='Height')
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')


class ThreadsDLModelsProfileImageVersions2(BaseModel):
    candidates: Optional[List[ThreadsDLModelsProfileCandidate]] = Field(
        None, title='Candidates'
    )


class ThreadsDLModelsProfileUser(BaseModel):
    is_private: Optional[bool] = Field(None, title='Is Private')
    is_verified: Optional[bool] = Field(None, title='Is Verified')
    profile_pic: Optional[str] = Field(None, title='Profile Pic')
    username: Optional[str] = Field(None, title='Username')
    full_name: Optional[str] = Field(None, title='Full Name')
    bio: Optional[str] = Field(None, title='Bio')
    bio_links: Optional[List[str]] = Field(None, title='Bio Links')
    followers: Optional[int] = Field(None, title='Followers')
    url: Optional[str] = Field(None, title='Url')


class ThreadsDLModelsProfileVideoVersion(BaseModel):
    type: Optional[int] = Field(None, title='Type')
    height: Optional[int] = Field(None, title='Height')
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')


class Thumbnail(BaseModel):
    height: Optional[int] = Field(None, title='Height')
    uri: Optional[str] = Field(None, title='Uri')
    url_list: Optional[List[str]] = Field(None, title='Url List')
    url_prefix: None = Field(None, title='Url Prefix')
    width: Optional[int] = Field(None, title='Width')


class ThumbnailResource(BaseModel):
    src: Optional[str] = Field(None, title='Src')
    config_width: Optional[int] = Field(None, title='Config Width')
    config_height: Optional[int] = Field(None, title='Config Height')


class TikTokDLModelsFeedAuthor(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    unique_id: Optional[str] = Field(None, title='Unique Id')
    nickname: Optional[str] = Field(None, title='Nickname')
    avatar: Optional[str] = Field(None, title='Avatar')


class TikTokDLModelsFeedCommerceInfo(BaseModel):
    adv_promotable: Optional[bool] = Field(None, title='Adv Promotable')
    auction_ad_invited: Optional[bool] = Field(None, title='Auction Ad Invited')
    branded_content_type: Optional[int] = Field(None, title='Branded Content Type')
    with_comment_filter_words: Optional[bool] = Field(
        None, title='With Comment Filter Words'
    )


class TikTokDLModelsFeedMusicInfo(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    title: Optional[str] = Field(None, title='Title')
    play: Optional[str] = Field(None, title='Play')
    author: Optional[str] = Field(None, title='Author')
    original: Optional[bool] = Field(None, title='Original')
    duration: Optional[int] = Field(None, title='Duration')
    album: Optional[str] = Field(None, title='Album')


class TikTokDLModelsPostAuthor(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    unique_id: Optional[str] = Field(None, title='Unique Id')
    nickname: Optional[str] = Field(None, title='Nickname')
    avatar: Optional[str] = Field(None, title='Avatar')


class TikTokDLModelsPostCommerceInfo(BaseModel):
    adv_promotable: Optional[bool] = Field(None, title='Adv Promotable')
    auction_ad_invited: Optional[bool] = Field(None, title='Auction Ad Invited')
    branded_content_type: Optional[int] = Field(None, title='Branded Content Type')
    with_comment_filter_words: Optional[bool] = Field(
        None, title='With Comment Filter Words'
    )


class TikTokDLModelsPostMusicInfo(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    title: Optional[str] = Field(None, title='Title')
    play: Optional[str] = Field(None, title='Play')
    author: Optional[str] = Field(None, title='Author')
    original: Optional[bool] = Field(None, title='Original')
    duration: Optional[int] = Field(None, title='Duration')
    album: Optional[str] = Field(None, title='Album')


class TikTokDLModelsUserUser(BaseModel):
    avatarLarger: Optional[str] = Field(None, title='Avatarlarger')
    avatarMedium: Optional[str] = Field(None, title='Avatarmedium')
    avatarThumb: Optional[str] = Field(None, title='Avatarthumb')
    canExpPlaylist: Optional[bool] = Field(None, title='Canexpplaylist')
    commentSetting: Optional[int] = Field(None, title='Commentsetting')
    commerceUserInfo: Optional[CommerceUserInfo] = None
    duetSetting: Optional[int] = Field(None, title='Duetsetting')
    followingVisibility: Optional[int] = Field(None, title='Followingvisibility')
    ftc: Optional[bool] = Field(None, title='Ftc')
    id: Optional[str] = Field(None, title='Id')
    isADVirtual: Optional[bool] = Field(None, title='Isadvirtual')
    isEmbedBanned: Optional[bool] = Field(None, title='Isembedbanned')
    nickNameModifyTime: Optional[int] = Field(None, title='Nicknamemodifytime')
    nickname: Optional[str] = Field(None, title='Nickname')
    openFavorite: Optional[bool] = Field(None, title='Openfavorite')
    privateAccount: Optional[bool] = Field(None, title='Privateaccount')
    profileEmbedPermission: Optional[int] = Field(None, title='Profileembedpermission')
    profileTab: Optional[ProfileTab] = None
    relation: Optional[int] = Field(None, title='Relation')
    secUid: Optional[str] = Field(None, title='Secuid')
    secret: Optional[bool] = Field(None, title='Secret')
    signature: Optional[str] = Field(None, title='Signature')
    stitchSetting: Optional[int] = Field(None, title='Stitchsetting')
    ttSeller: Optional[bool] = Field(None, title='Ttseller')
    uniqueId: Optional[str] = Field(None, title='Uniqueid')
    verified: Optional[bool] = Field(None, title='Verified')


class TwitterDLModelsPostAdditionalMediaInfo(BaseModel):
    title: Optional[str] = Field(None, title='Title')
    description: Optional[str] = Field(None, title='Description')
    embeddable: Optional[bool] = Field(None, title='Embeddable')
    monetizable: Optional[bool] = Field(None, title='Monetizable')


class TwitterDLModelsPostCategoryItem(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    name: Optional[str] = Field(None, title='Name')
    icon_name: Optional[str] = Field(None, title='Icon Name')


class TwitterDLModelsPostDescription(BaseModel):
    urls: Optional[List] = Field(None, title='Urls')


class TwitterDLModelsPostDescription2(BaseModel):
    urls: Optional[List] = Field(None, title='Urls')


class TwitterDLModelsPostDetails1(BaseModel):
    conversationDetails: Optional[ConversationDetails] = None


class TwitterDLModelsPostEditControl(BaseModel):
    edit_tweet_ids: Optional[List[str]] = Field(None, title='Edit Tweet Ids')
    editable_until_msecs: Optional[str] = Field(None, title='Editable Until Msecs')
    is_edit_eligible: Optional[bool] = Field(None, title='Is Edit Eligible')
    edits_remaining: Optional[str] = Field(None, title='Edits Remaining')


class TwitterDLModelsPostEntities4(BaseModel):
    description: Optional[TwitterDLModelsPostDescription2] = None


class TwitterDLModelsPostEntities5(BaseModel):
    description: Optional[TwitterDLModelsPostDescription2] = None


class TwitterDLModelsPostExtMediaAvailability(BaseModel):
    status: Optional[str] = Field(None, title='Status')


class TwitterDLModelsPostHashtag(BaseModel):
    indices: Optional[List[int]] = Field(None, title='Indices')
    text: Optional[str] = Field(None, title='Text')


class TwitterDLModelsPostLarge(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class TwitterDLModelsPostLegacy4(BaseModel):
    can_dm: Optional[bool] = Field(None, title='Can Dm')
    can_media_tag: Optional[bool] = Field(None, title='Can Media Tag')
    created_at: Optional[str] = Field(None, title='Created At')
    default_profile: Optional[bool] = Field(None, title='Default Profile')
    default_profile_image: Optional[bool] = Field(None, title='Default Profile Image')
    description: Optional[str] = Field(None, title='Description')
    entities: Optional[TwitterDLModelsPostEntities4] = None
    fast_followers_count: Optional[int] = Field(None, title='Fast Followers Count')
    favourites_count: Optional[int] = Field(None, title='Favourites Count')
    followers_count: Optional[int] = Field(None, title='Followers Count')
    friends_count: Optional[int] = Field(None, title='Friends Count')
    has_custom_timelines: Optional[bool] = Field(None, title='Has Custom Timelines')
    is_translator: Optional[bool] = Field(None, title='Is Translator')
    listed_count: Optional[int] = Field(None, title='Listed Count')
    location: Optional[str] = Field(None, title='Location')
    media_count: Optional[int] = Field(None, title='Media Count')
    name: Optional[str] = Field(None, title='Name')
    normal_followers_count: Optional[int] = Field(None, title='Normal Followers Count')
    pinned_tweet_ids_str: Optional[List] = Field(None, title='Pinned Tweet Ids Str')
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    profile_banner_url: Optional[str] = Field(None, title='Profile Banner Url')
    profile_image_url_https: Optional[str] = Field(
        None, title='Profile Image Url Https'
    )
    profile_interstitial_type: Optional[str] = Field(
        None, title='Profile Interstitial Type'
    )
    screen_name: Optional[str] = Field(None, title='Screen Name')
    statuses_count: Optional[int] = Field(None, title='Statuses Count')
    translator_type: Optional[str] = Field(None, title='Translator Type')
    verified: Optional[bool] = Field(None, title='Verified')
    want_retweets: Optional[bool] = Field(None, title='Want Retweets')
    withheld_in_countries: Optional[List] = Field(None, title='Withheld In Countries')


class TwitterDLModelsPostLegacy5(BaseModel):
    can_dm: Optional[bool] = Field(None, title='Can Dm')
    can_media_tag: Optional[bool] = Field(None, title='Can Media Tag')
    created_at: Optional[str] = Field(None, title='Created At')
    default_profile: Optional[bool] = Field(None, title='Default Profile')
    default_profile_image: Optional[bool] = Field(None, title='Default Profile Image')
    description: Optional[str] = Field(None, title='Description')
    entities: Optional[TwitterDLModelsPostEntities5] = None
    fast_followers_count: Optional[int] = Field(None, title='Fast Followers Count')
    favourites_count: Optional[int] = Field(None, title='Favourites Count')
    followers_count: Optional[int] = Field(None, title='Followers Count')
    friends_count: Optional[int] = Field(None, title='Friends Count')
    has_custom_timelines: Optional[bool] = Field(None, title='Has Custom Timelines')
    is_translator: Optional[bool] = Field(None, title='Is Translator')
    listed_count: Optional[int] = Field(None, title='Listed Count')
    location: Optional[str] = Field(None, title='Location')
    media_count: Optional[int] = Field(None, title='Media Count')
    name: Optional[str] = Field(None, title='Name')
    normal_followers_count: Optional[int] = Field(None, title='Normal Followers Count')
    pinned_tweet_ids_str: Optional[List] = Field(None, title='Pinned Tweet Ids Str')
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    profile_banner_url: Optional[str] = Field(None, title='Profile Banner Url')
    profile_image_url_https: Optional[str] = Field(
        None, title='Profile Image Url Https'
    )
    profile_interstitial_type: Optional[str] = Field(
        None, title='Profile Interstitial Type'
    )
    screen_name: Optional[str] = Field(None, title='Screen Name')
    statuses_count: Optional[int] = Field(None, title='Statuses Count')
    translator_type: Optional[str] = Field(None, title='Translator Type')
    verified: Optional[bool] = Field(None, title='Verified')
    want_retweets: Optional[bool] = Field(None, title='Want Retweets')
    withheld_in_countries: Optional[List] = Field(None, title='Withheld In Countries')


class TwitterDLModelsPostMedium(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class TwitterDLModelsPostOriginalInfo(BaseModel):
    height: Optional[int] = Field(None, title='Height')
    width: Optional[int] = Field(None, title='Width')
    focus_rects: Optional[List] = Field(None, title='Focus Rects')


class TwitterDLModelsPostProfessional(BaseModel):
    rest_id: Optional[str] = Field(None, title='Rest Id')
    professional_type: Optional[str] = Field(None, title='Professional Type')
    category: Optional[List] = Field(None, title='Category')


class TwitterDLModelsPostProfessional1(BaseModel):
    rest_id: Optional[str] = Field(None, title='Rest Id')
    professional_type: Optional[str] = Field(None, title='Professional Type')
    category: Optional[List[TwitterDLModelsPostCategoryItem]] = Field(
        None, title='Category'
    )


class TwitterDLModelsPostProfessional2(BaseModel):
    rest_id: Optional[str] = Field(None, title='Rest Id')
    professional_type: Optional[str] = Field(None, title='Professional Type')
    category: Optional[List[TwitterDLModelsPostCategoryItem]] = Field(
        None, title='Category'
    )


class TwitterDLModelsPostProfessional3(BaseModel):
    rest_id: Optional[str] = Field(None, title='Rest Id')
    professional_type: Optional[str] = Field(None, title='Professional Type')
    category: Optional[List[TwitterDLModelsPostCategoryItem]] = Field(
        None, title='Category'
    )


class TwitterDLModelsPostQuickPromoteEligibility(BaseModel):
    eligibility: Optional[str] = Field(None, title='Eligibility')


class TwitterDLModelsPostResult2(BaseModel):
    media_key: Optional[str] = Field(None, title='Media Key')


class TwitterDLModelsPostResult7(BaseModel):
    media_key: Optional[str] = Field(None, title='Media Key')


class TwitterDLModelsPostResult8(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    id: Optional[str] = Field(None, title='Id')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    affiliates_highlighted_label: Optional[Dict[str, Any]] = Field(
        None, title='Affiliates Highlighted Label'
    )
    has_graduated_access: Optional[bool] = Field(None, title='Has Graduated Access')
    is_blue_verified: Optional[bool] = Field(None, title='Is Blue Verified')
    profile_image_shape: Optional[str] = Field(None, title='Profile Image Shape')
    legacy: Optional[TwitterDLModelsPostLegacy5] = None
    professional: Optional[TwitterDLModelsPostProfessional3] = None


class TwitterDLModelsPostResult9(BaseModel):
    media_key: Optional[str] = Field(None, title='Media Key')


class TwitterDLModelsPostSmall(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class TwitterDLModelsPostThumb(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class TwitterDLModelsPostTimelinesDetails(BaseModel):
    controllerData: Optional[str] = Field(None, title='Controllerdata')


class TwitterDLModelsPostUrl2(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    url: Optional[str] = Field(None, title='Url')
    indices: Optional[List[int]] = Field(None, title='Indices')


class TwitterDLModelsPostUrl3(BaseModel):
    urls: Optional[List[TwitterDLModelsPostUrl2]] = Field(None, title='Urls')


class TwitterDLModelsPostUserMention(BaseModel):
    id_str: Optional[str] = Field(None, title='Id Str')
    name: Optional[str] = Field(None, title='Name')
    screen_name: Optional[str] = Field(None, title='Screen Name')
    indices: Optional[List[int]] = Field(None, title='Indices')


class TwitterDLModelsPostUserResults3(BaseModel):
    result: Optional[TwitterDLModelsPostResult8] = None


class TwitterDLModelsPostVariant(BaseModel):
    bitrate: Optional[int] = Field(None, title='Bitrate')
    content_type: Optional[str] = Field(None, title='Content Type')
    url: Optional[str] = Field(None, title='Url')


class TwitterDLModelsPostVideoInfo(BaseModel):
    aspect_ratio: Optional[List[int]] = Field(None, title='Aspect Ratio')
    duration_millis: Optional[int] = Field(None, title='Duration Millis')
    variants: Optional[List[TwitterDLModelsPostVariant]] = Field(None, title='Variants')


class TwitterDLModelsPostVideoInfo1(BaseModel):
    aspect_ratio: Optional[List[int]] = Field(None, title='Aspect Ratio')
    duration_millis: Optional[int] = Field(None, title='Duration Millis')
    variants: Optional[List[TwitterDLModelsPostVariant]] = Field(None, title='Variants')


class TwitterDLModelsPostVideoInfo2(BaseModel):
    aspect_ratio: Optional[List[int]] = Field(None, title='Aspect Ratio')
    duration_millis: Optional[int] = Field(None, title='Duration Millis')
    variants: Optional[List[TwitterDLModelsPostVariant]] = Field(None, title='Variants')


class TwitterDLModelsPostVideoInfo3(BaseModel):
    aspect_ratio: Optional[List[int]] = Field(None, title='Aspect Ratio')
    duration_millis: Optional[int] = Field(None, title='Duration Millis')
    variants: Optional[List[TwitterDLModelsPostVariant]] = Field(None, title='Variants')


class TwitterDLModelsPostViews(BaseModel):
    count: Optional[str] = Field(None, title='Count')
    state: Optional[str] = Field(None, title='State')


class TwitterDLModelsTimelineAdditionalMediaInfo2(BaseModel):
    title: Optional[str] = Field(None, title='Title')
    description: Optional[str] = Field(None, title='Description')
    embeddable: Optional[bool] = Field(None, title='Embeddable')
    monetizable: Optional[bool] = Field(None, title='Monetizable')


class TwitterDLModelsTimelineBadge(BaseModel):
    url: Optional[str] = Field(None, title='Url')


class TwitterDLModelsTimelineCategoryItem(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    name: Optional[str] = Field(None, title='Name')
    icon_name: Optional[str] = Field(None, title='Icon Name')


class TwitterDLModelsTimelineClientEventInfo(BaseModel):
    component: Optional[str] = Field(None, title='Component')
    element: Optional[str] = Field(None, title='Element')


class TwitterDLModelsTimelineDescription(BaseModel):
    urls: Optional[List] = Field(None, title='Urls')


class TwitterDLModelsTimelineEditControl(BaseModel):
    edit_tweet_ids: Optional[List[str]] = Field(None, title='Edit Tweet Ids')
    editable_until_msecs: Optional[str] = Field(None, title='Editable Until Msecs')
    is_edit_eligible: Optional[bool] = Field(None, title='Is Edit Eligible')
    edits_remaining: Optional[str] = Field(None, title='Edits Remaining')


class TwitterDLModelsTimelineEntities(BaseModel):
    description: Optional[TwitterDLModelsTimelineDescription] = None


class TwitterDLModelsTimelineEntities3(BaseModel):
    hashtags: Optional[List] = Field(None, title='Hashtags')
    symbols: Optional[List] = Field(None, title='Symbols')
    timestamps: Optional[List] = Field(None, title='Timestamps')
    urls: Optional[List] = Field(None, title='Urls')
    user_mentions: Optional[List] = Field(None, title='User Mentions')


class TwitterDLModelsTimelineExtMediaAvailability(BaseModel):
    status: Optional[str] = Field(None, title='Status')


class TwitterDLModelsTimelineHashtag(BaseModel):
    indices: Optional[List[int]] = Field(None, title='Indices')
    text: Optional[str] = Field(None, title='Text')


class TwitterDLModelsTimelineLarge(BaseModel):
    faces: Optional[List] = Field(None, title='Faces')


class TwitterDLModelsTimelineLegacy(BaseModel):
    following: Optional[bool] = Field(None, title='Following')
    can_dm: Optional[bool] = Field(None, title='Can Dm')
    can_media_tag: Optional[bool] = Field(None, title='Can Media Tag')
    created_at: Optional[str] = Field(None, title='Created At')
    default_profile: Optional[bool] = Field(None, title='Default Profile')
    default_profile_image: Optional[bool] = Field(None, title='Default Profile Image')
    description: Optional[str] = Field(None, title='Description')
    entities: Optional[TwitterDLModelsTimelineEntities] = None
    fast_followers_count: Optional[int] = Field(None, title='Fast Followers Count')
    favourites_count: Optional[int] = Field(None, title='Favourites Count')
    followers_count: Optional[int] = Field(None, title='Followers Count')
    friends_count: Optional[int] = Field(None, title='Friends Count')
    has_custom_timelines: Optional[bool] = Field(None, title='Has Custom Timelines')
    is_translator: Optional[bool] = Field(None, title='Is Translator')
    listed_count: Optional[int] = Field(None, title='Listed Count')
    location: Optional[str] = Field(None, title='Location')
    media_count: Optional[int] = Field(None, title='Media Count')
    name: Optional[str] = Field(None, title='Name')
    normal_followers_count: Optional[int] = Field(None, title='Normal Followers Count')
    pinned_tweet_ids_str: Optional[List[str]] = Field(
        None, title='Pinned Tweet Ids Str'
    )
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    profile_banner_url: Optional[str] = Field(None, title='Profile Banner Url')
    profile_image_url_https: Optional[str] = Field(
        None, title='Profile Image Url Https'
    )
    profile_interstitial_type: Optional[str] = Field(
        None, title='Profile Interstitial Type'
    )
    screen_name: Optional[str] = Field(None, title='Screen Name')
    statuses_count: Optional[int] = Field(None, title='Statuses Count')
    translator_type: Optional[str] = Field(None, title='Translator Type')
    verified: Optional[bool] = Field(None, title='Verified')
    want_retweets: Optional[bool] = Field(None, title='Want Retweets')
    withheld_in_countries: Optional[List] = Field(None, title='Withheld In Countries')


class TwitterDLModelsTimelineLegacy3(BaseModel):
    bookmark_count: Optional[int] = Field(None, title='Bookmark Count')
    bookmarked: Optional[bool] = Field(None, title='Bookmarked')
    created_at: Optional[str] = Field(None, title='Created At')
    conversation_id_str: Optional[str] = Field(None, title='Conversation Id Str')
    display_text_range: Optional[List[int]] = Field(None, title='Display Text Range')
    entities: Optional[TwitterDLModelsTimelineEntities3] = None
    favorite_count: Optional[int] = Field(None, title='Favorite Count')
    favorited: Optional[bool] = Field(None, title='Favorited')
    full_text: Optional[str] = Field(None, title='Full Text')
    is_quote_status: Optional[bool] = Field(None, title='Is Quote Status')
    lang: Optional[str] = Field(None, title='Lang')
    quote_count: Optional[int] = Field(None, title='Quote Count')
    quoted_status_id_str: Optional[str] = Field(None, title='Quoted Status Id Str')
    quoted_status_permalink: Optional[QuotedStatusPermalink] = None
    reply_count: Optional[int] = Field(None, title='Reply Count')
    retweet_count: Optional[int] = Field(None, title='Retweet Count')
    retweeted: Optional[bool] = Field(None, title='Retweeted')
    user_id_str: Optional[str] = Field(None, title='User Id Str')
    id_str: Optional[str] = Field(None, title='Id Str')


class TwitterDLModelsTimelineMediaResults2(BaseModel):
    result: Optional[Result10] = None


class TwitterDLModelsTimelineMediaResults3(BaseModel):
    result: Optional[Result12] = None


class TwitterDLModelsTimelineMedium(BaseModel):
    faces: Optional[List] = Field(None, title='Faces')


class TwitterDLModelsTimelineMetadata(BaseModel):
    scribeConfig: Optional[ScribeConfig] = None


class TwitterDLModelsTimelineOrig(BaseModel):
    faces: Optional[List] = Field(None, title='Faces')


class TwitterDLModelsTimelineOriginalInfo(BaseModel):
    height: Optional[int] = Field(None, title='Height')
    width: Optional[int] = Field(None, title='Width')
    focus_rects: Optional[List[FocusRect]] = Field(None, title='Focus Rects')


class TwitterDLModelsTimelineProfessional(BaseModel):
    rest_id: Optional[str] = Field(None, title='Rest Id')
    professional_type: Optional[str] = Field(None, title='Professional Type')
    category: Optional[List] = Field(None, title='Category')


class TwitterDLModelsTimelineProfessional1(BaseModel):
    rest_id: Optional[str] = Field(None, title='Rest Id')
    professional_type: Optional[str] = Field(None, title='Professional Type')
    category: Optional[List[TwitterDLModelsTimelineCategoryItem]] = Field(
        None, title='Category'
    )


class TwitterDLModelsTimelineProfessional2(BaseModel):
    rest_id: Optional[str] = Field(None, title='Rest Id')
    professional_type: Optional[str] = Field(None, title='Professional Type')
    category: Optional[List[TwitterDLModelsTimelineCategoryItem]] = Field(
        None, title='Category'
    )


class TwitterDLModelsTimelineProfessional3(BaseModel):
    rest_id: Optional[str] = Field(None, title='Rest Id')
    professional_type: Optional[str] = Field(None, title='Professional Type')
    category: Optional[List] = Field(None, title='Category')


class TwitterDLModelsTimelineQuickPromoteEligibility(BaseModel):
    eligibility: Optional[str] = Field(None, title='Eligibility')


class TwitterDLModelsTimelineResult5(BaseModel):
    media_key: Optional[str] = Field(None, title='Media Key')


class TwitterDLModelsTimelineSmall(BaseModel):
    faces: Optional[List] = Field(None, title='Faces')


class TwitterDLModelsTimelineThumb(BaseModel):
    h: Optional[int] = Field(None, title='H')
    w: Optional[int] = Field(None, title='W')
    resize: Optional[str] = Field(None, title='Resize')


class TwitterDLModelsTimelineTimelinesDetails(BaseModel):
    injectionType: Optional[str] = Field(None, title='Injectiontype')
    controllerData: Optional[str] = Field(None, title='Controllerdata')
    sourceData: Optional[str] = Field(None, title='Sourcedata')


class TwitterDLModelsTimelineUrl(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    urlType: Optional[str] = Field(None, title='Urltype')


class TwitterDLModelsTimelineUrl3(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    url: Optional[str] = Field(None, title='Url')
    indices: Optional[List[int]] = Field(None, title='Indices')


class TwitterDLModelsTimelineUserMention(BaseModel):
    id_str: Optional[str] = Field(None, title='Id Str')
    name: Optional[str] = Field(None, title='Name')
    screen_name: Optional[str] = Field(None, title='Screen Name')
    indices: Optional[List[int]] = Field(None, title='Indices')


class TwitterDLModelsTimelineVariant(BaseModel):
    bitrate: Optional[int] = Field(None, title='Bitrate')
    content_type: Optional[str] = Field(None, title='Content Type')
    url: Optional[str] = Field(None, title='Url')


class TwitterDLModelsTimelineVideoInfo(BaseModel):
    aspect_ratio: Optional[List[int]] = Field(None, title='Aspect Ratio')
    duration_millis: Optional[int] = Field(None, title='Duration Millis')
    variants: Optional[List[TwitterDLModelsTimelineVariant]] = Field(
        None, title='Variants'
    )


class TwitterDLModelsTimelineVideoInfo1(BaseModel):
    aspect_ratio: Optional[List[int]] = Field(None, title='Aspect Ratio')
    duration_millis: Optional[int] = Field(None, title='Duration Millis')
    variants: Optional[List[TwitterDLModelsTimelineVariant]] = Field(
        None, title='Variants'
    )


class TwitterDLModelsTimelineVideoInfo2(BaseModel):
    aspect_ratio: Optional[List[int]] = Field(None, title='Aspect Ratio')
    duration_millis: Optional[int] = Field(None, title='Duration Millis')
    variants: Optional[List[TwitterDLModelsTimelineVariant]] = Field(
        None, title='Variants'
    )


class TwitterDLModelsTimelineVideoInfo3(BaseModel):
    aspect_ratio: Optional[List[int]] = Field(None, title='Aspect Ratio')
    duration_millis: Optional[int] = Field(None, title='Duration Millis')
    variants: Optional[List[TwitterDLModelsTimelineVariant]] = Field(
        None, title='Variants'
    )


class TwitterDLModelsTimelineViews(BaseModel):
    count: Optional[str] = Field(None, title='Count')
    state: Optional[str] = Field(None, title='State')


class TwitterDLModelsUserBadge(BaseModel):
    url: Optional[str] = Field(None, title='Url')


class TwitterDLModelsUserDescription(BaseModel):
    urls: Optional[List] = Field(None, title='Urls')


class TwitterDLModelsUserEntities(BaseModel):
    description: Optional[TwitterDLModelsUserDescription] = None


class TwitterDLModelsUserLegacy(BaseModel):
    following: Optional[bool] = Field(None, title='Following')
    can_dm: Optional[bool] = Field(None, title='Can Dm')
    can_media_tag: Optional[bool] = Field(None, title='Can Media Tag')
    created_at: Optional[str] = Field(None, title='Created At')
    default_profile: Optional[bool] = Field(None, title='Default Profile')
    default_profile_image: Optional[bool] = Field(None, title='Default Profile Image')
    description: Optional[str] = Field(None, title='Description')
    entities: Optional[TwitterDLModelsUserEntities] = None
    fast_followers_count: Optional[int] = Field(None, title='Fast Followers Count')
    favourites_count: Optional[int] = Field(None, title='Favourites Count')
    followers_count: Optional[int] = Field(None, title='Followers Count')
    friends_count: Optional[int] = Field(None, title='Friends Count')
    has_custom_timelines: Optional[bool] = Field(None, title='Has Custom Timelines')
    is_translator: Optional[bool] = Field(None, title='Is Translator')
    listed_count: Optional[int] = Field(None, title='Listed Count')
    location: Optional[str] = Field(None, title='Location')
    media_count: Optional[int] = Field(None, title='Media Count')
    name: Optional[str] = Field(None, title='Name')
    normal_followers_count: Optional[int] = Field(None, title='Normal Followers Count')
    pinned_tweet_ids_str: Optional[List[str]] = Field(
        None, title='Pinned Tweet Ids Str'
    )
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    profile_banner_url: Optional[str] = Field(None, title='Profile Banner Url')
    profile_image_url_https: Optional[str] = Field(
        None, title='Profile Image Url Https'
    )
    profile_interstitial_type: Optional[str] = Field(
        None, title='Profile Interstitial Type'
    )
    screen_name: Optional[str] = Field(None, title='Screen Name')
    statuses_count: Optional[int] = Field(None, title='Statuses Count')
    translator_type: Optional[str] = Field(None, title='Translator Type')
    verified: Optional[bool] = Field(None, title='Verified')
    want_retweets: Optional[bool] = Field(None, title='Want Retweets')
    withheld_in_countries: Optional[List] = Field(None, title='Withheld In Countries')


class TwitterDLModelsUserProfessional(BaseModel):
    rest_id: Optional[str] = Field(None, title='Rest Id')
    professional_type: Optional[str] = Field(None, title='Professional Type')
    category: Optional[List] = Field(None, title='Category')


class TwitterDLModelsUserUrl(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    urlType: Optional[str] = Field(None, title='Urltype')


class Url1(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    url: Optional[str] = Field(None, title='Url')
    indices: Optional[List[int]] = Field(None, title='Indices')


class Url10(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    url: Optional[str] = Field(None, title='Url')
    indices: Optional[List[int]] = Field(None, title='Indices')


class Url11(BaseModel):
    urls: Optional[List[Url10]] = Field(None, title='Urls')


class Url13(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    urlType: Optional[str] = Field(None, title='Urltype')


class Url14(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    url: Optional[str] = Field(None, title='Url')
    indices: Optional[List[int]] = Field(None, title='Indices')


class Url15(BaseModel):
    urls: Optional[List[Url14]] = Field(None, title='Urls')


class Url17(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    url: Optional[str] = Field(None, title='Url')
    indices: Optional[List[int]] = Field(None, title='Indices')


class Url19(BaseModel):
    urls: Optional[List[Url17]] = Field(None, title='Urls')


class Url21(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    url: Optional[str] = Field(None, title='Url')
    indices: Optional[List[int]] = Field(None, title='Indices')


class Url22(BaseModel):
    urls: Optional[List[Url21]] = Field(None, title='Urls')


class Url24(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    urlType: Optional[str] = Field(None, title='Urltype')


class Url26(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    url: Optional[str] = Field(None, title='Url')
    indices: Optional[List[int]] = Field(None, title='Indices')


class Url27(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    url: Optional[str] = Field(None, title='Url')
    indices: Optional[List[int]] = Field(None, title='Indices')


class Url29(BaseModel):
    urls: Optional[List[Url27]] = Field(None, title='Urls')


class Url32(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    url: Optional[str] = Field(None, title='Url')
    indices: Optional[List[int]] = Field(None, title='Indices')


class Url4(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    urlType: Optional[str] = Field(None, title='Urltype')


class Url5(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    url: Optional[str] = Field(None, title='Url')
    indices: Optional[List[int]] = Field(None, title='Indices')


class Url6(BaseModel):
    urls: Optional[List[Url5]] = Field(None, title='Urls')


class Url9(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    url: Optional[str] = Field(None, title='Url')
    indices: Optional[List[int]] = Field(None, title='Indices')


class UrlParam(BaseModel):
    key: Optional[str] = Field(None, title='Key')
    value: Optional[str] = Field(None, title='Value')


class User3(BaseModel):
    id: Optional[str] = Field(None, title='Id')


class UserInfo(BaseModel):
    stats: Optional[Stats] = None
    user: Optional[TikTokDLModelsUserUser] = None


class UserValue(BaseModel):
    id_str: Optional[str] = Field(None, title='Id Str')
    path: Optional[List] = Field(None, title='Path')


class VHLS(BaseModel):
    url: Optional[AnyUrl] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')
    duration: Optional[int] = Field(None, title='Duration')
    thumbnail: Optional[AnyUrl] = Field(None, title='Thumbnail')


class ValidationError(BaseModel):
    loc: Optional[List[Union[str, int]]] = Field(None, title='Location')
    msg: Optional[str] = Field(None, title='Message')
    type: Optional[str] = Field(None, title='Error Type')


class VideoInfo4(BaseModel):
    aspect_ratio: Optional[List[int]] = Field(None, title='Aspect Ratio')
    duration_millis: Optional[int] = Field(None, title='Duration Millis')
    variants: Optional[List[TwitterDLModelsTimelineVariant]] = Field(
        None, title='Variants'
    )


class VideoInfo5(BaseModel):
    aspect_ratio: Optional[List[int]] = Field(None, title='Aspect Ratio')
    duration_millis: Optional[int] = Field(None, title='Duration Millis')
    variants: Optional[List[TwitterDLModelsTimelineVariant]] = Field(
        None, title='Variants'
    )


class VideoList(BaseModel):
    V_HLSV3_MOBILE: Optional[VHLS] = None
    V_HLS_HEVC: Optional[VHLS] = None


class XdtViewer(BaseModel):
    user: Optional[User3] = None


class YouTubeDLModelsChannelAuthor(BaseModel):
    name: Optional[str] = Field(None, title='Name')
    href: Optional[str] = Field(None, title='Href')


class YouTubeDLModelsChannelLink(BaseModel):
    rel: Optional[str] = Field(None, title='Rel')
    href: Optional[str] = Field(None, title='Href')
    type: Optional[str] = Field(None, title='Type')


class YouTubeDLModelsChannelSummaryDetail(BaseModel):
    type: Optional[str] = Field(None, title='Type')
    language: None = Field(None, title='Language')
    base: Optional[str] = Field(None, title='Base')
    value: Optional[str] = Field(None, title='Value')


class YouTubeDLModelsChannelTitleDetail(BaseModel):
    type: Optional[str] = Field(None, title='Type')
    language: None = Field(None, title='Language')
    base: Optional[str] = Field(None, title='Base')
    value: Optional[str] = Field(None, title='Value')


class APIAccount(BaseModel):
    key: Optional[str] = Field(None, title='Key')
    name: Optional[str] = Field(None, title='Name')
    credit: Optional[int] = Field(None, title='Credit')
    ip: Optional[str] = Field(None, title='Ip')
    last_hit: Optional[LastHit] = None


class Action(BaseModel):
    action_type: Optional[int] = Field(None, title='Action Type')
    icon: Optional[Icon] = None
    schema_: Optional[str] = Field(None, alias='schema', title='Schema')


class Anchor(BaseModel):
    actions: Optional[List[Action]] = Field(None, title='Actions')
    component_key: Optional[str] = Field(None, title='Component Key')
    description: Optional[str] = Field(None, title='Description')
    extra: Optional[str] = Field(None, title='Extra')
    icon: Optional[Icon] = None
    id: Optional[str] = Field(None, title='Id')
    keyword: Optional[str] = Field(None, title='Keyword')
    log_extra: Optional[str] = Field(None, title='Log Extra')
    schema_: Optional[str] = Field(None, alias='schema', title='Schema')
    thumbnail: Optional[Thumbnail] = None
    type: Optional[int] = Field(None, title='Type')


class AnnotationsWithLinks(BaseModel):
    Swag_Makeup: Optional[SwagMakeup] = Field(None, alias='Swag Makeup')
    Dope_Makeup: Optional[DopeMakeup] = Field(None, alias='Dope Makeup')
    Edgy_Makeup: Optional[EdgyMakeup] = Field(None, alias='Edgy Makeup')
    Eye_Makeup_Art: Optional[EyeMakeupArt] = Field(None, alias='Eye Makeup Art')
    Grunge_Makeup: Optional[GrungeMakeup] = Field(None, alias='Grunge Makeup')
    Makeup_Eyeliner: Optional[MakeupEyeliner] = Field(None, alias='Makeup Eyeliner')
    Pretty_Makeup: Optional[PrettyMakeup] = Field(None, alias='Pretty Makeup')
    Artistry_Makeup: Optional[ArtistryMakeup] = Field(None, alias='Artistry Makeup')
    Makeup_Inspo: Optional[MakeupInspo] = Field(None, alias='Makeup Inspo')
    Makeup_Looks: Optional[MakeupLooks] = Field(None, alias='Makeup Looks')
    Makeup_Ideas: Optional[MakeupIdeas] = Field(None, alias='Makeup Ideas')
    Eye_Makeup_Tutorials: Optional[EyeMakeupTutorials] = Field(
        None, alias='Eye Makeup Tutorials'
    )
    Makeup_Tutorials: Optional[MakeupTutorials] = Field(None, alias='Makeup Tutorials')
    Beauty_Makeup: Optional[BeautyMakeup] = Field(None, alias='Beauty Makeup')
    Hair_Makeup: Optional[HairMakeup] = Field(None, alias='Hair Makeup')
    Gothic_Makeup: Optional[GothicMakeup] = Field(None, alias='Gothic Makeup')


class Block(BaseModel):
    block_type: Optional[int] = Field(None, title='Block Type')
    text: Optional[str] = Field(None, title='Text')
    block_style: Optional[BlockStyle] = None
    type: Optional[str] = Field(None, title='Type')
    image_signature: Optional[str] = Field(None, title='Image Signature')
    image: Optional[PinterestDLModelsReverseImage] = None


class BloksSticker(BaseModel):
    sticker_data: Optional[StickerData] = None
    id: Optional[str] = Field(None, title='Id')


class CardPlatform(BaseModel):
    platform: Optional[Platform] = None


class CardPlatform1(BaseModel):
    platform: Optional[Platform1] = None


class ClickTrackingInfo(BaseModel):
    urlParams: Optional[List[UrlParam]] = Field(None, title='Urlparams')


class CoverImages(BaseModel):
    field_200x: Optional[Field200X] = Field(None, alias='200x')


class DatumImages(BaseModel):
    field_345x: Optional[Field345X] = Field(None, alias='345x')
    field_736x: Optional[Field345X] = Field(None, alias='736x')


class Description11(BaseModel):
    urls: Optional[List[Url27]] = Field(None, title='Urls')


class Description5(BaseModel):
    urls: Optional[List[Url14]] = Field(None, title='Urls')


class Description6(BaseModel):
    urls: Optional[List[Url17]] = Field(None, title='Urls')


class Description7(BaseModel):
    urls: Optional[List[Url21]] = Field(None, title='Urls')


class DidItData(BaseModel):
    responses_count: Optional[int] = Field(None, title='Responses Count')
    images_count: Optional[int] = Field(None, title='Images Count')
    videos_count: Optional[int] = Field(None, title='Videos Count')
    rating: Optional[int] = Field(None, title='Rating')
    user_count: Optional[int] = Field(None, title='User Count')
    recommended_count: Optional[int] = Field(None, title='Recommended Count')
    recommend_scores: Optional[List[RecommendScore]] = Field(
        None, title='Recommend Scores'
    )
    type: Optional[str] = Field(None, title='Type')
    details_count: Optional[int] = Field(None, title='Details Count')
    tags: Optional[List] = Field(None, title='Tags')


class Edge5(BaseModel):
    node: Optional[Node5] = None


class Edge7(BaseModel):
    node: Optional[Node7] = None


class Edge8(BaseModel):
    node: Optional[Node8] = None


class EdgeMediaCollections(BaseModel):
    count: Optional[int] = Field(None, title='Count')
    page_info: Optional[PageInfo2] = None
    edges: Optional[List] = Field(None, title='Edges')


class EdgeMediaToCaption1(BaseModel):
    edges: Optional[List[Edge5]] = Field(None, title='Edges')


class EdgeMediaToTaggedUser2(BaseModel):
    edges: Optional[List[Edge7]] = Field(None, title='Edges')


class EdgeSavedMedia(BaseModel):
    count: Optional[int] = Field(None, title='Count')
    page_info: Optional[PageInfo2] = None
    edges: Optional[List] = Field(None, title='Edges')


class EdgeThreadedComments(BaseModel):
    count: Optional[int] = Field(None, title='Count')
    page_info: Optional[InstagramDLModelsPostPageInfo] = None
    edges: Optional[List] = Field(None, title='Edges')


class Entities10(BaseModel):
    description: Optional[Description6] = None
    url: Optional[Url19] = None


class Entities11(BaseModel):
    description: Optional[Description7] = None
    url: Optional[Url22] = None


class Entities16(BaseModel):
    description: Optional[Description11] = None
    url: Optional[Url29] = None


class Entities7(BaseModel):
    description: Optional[Description3] = None
    url: Optional[Url11] = None


class Entities8(BaseModel):
    description: Optional[Description5] = None
    url: Optional[Url15] = None


class Entity(BaseModel):
    from_index: Optional[int] = Field(None, title='From Index')
    to_index: Optional[int] = Field(None, title='To Index')
    ref: Optional[Ref] = None


class Features(BaseModel):
    large: Optional[TwitterDLModelsTimelineLarge] = None
    medium: Optional[TwitterDLModelsTimelineMedium] = None
    small: Optional[TwitterDLModelsTimelineSmall] = None
    orig: Optional[TwitterDLModelsTimelineOrig] = None


class Features1(BaseModel):
    large: Optional[Large2] = None
    medium: Optional[Medium2] = None
    small: Optional[Small2] = None
    orig: Optional[TwitterDLModelsTimelineOrig] = None


class Features2(BaseModel):
    large: Optional[Large5] = None
    medium: Optional[Medium5] = None
    small: Optional[Small5] = None
    orig: Optional[Orig2] = None


class Features3(BaseModel):
    large: Optional[Large7] = None
    medium: Optional[Medium7] = None
    small: Optional[Small7] = None
    orig: Optional[Orig3] = None


class Features4(BaseModel):
    large: Optional[Large9] = None
    medium: Optional[Medium9] = None
    small: Optional[Small9] = None
    orig: Optional[Orig4] = None


class Features5(BaseModel):
    large: Optional[Large11] = None
    medium: Optional[Medium11] = None
    small: Optional[Small11] = None
    orig: Optional[Orig5] = None


class Features6(BaseModel):
    large: Optional[Large12] = None
    medium: Optional[Medium12] = None
    small: Optional[Small12] = None
    orig: Optional[Orig6] = None


class Features7(BaseModel):
    large: Optional[Large14] = None
    medium: Optional[Medium14] = None
    small: Optional[Small14] = None
    orig: Optional[Orig7] = None


class Footer(BaseModel):
    displayType: Optional[str] = Field(None, title='Displaytype')
    text: Optional[str] = Field(None, title='Text')
    landingUrl: Optional[LandingUrl] = None


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')


class ImageVersions21(BaseModel):
    candidates: Optional[List[InstagramDLModelsFeedCandidate]] = Field(
        None, title='Candidates'
    )


class Images(BaseModel):
    field_60x60: Optional[Field60x601] = Field(None, alias='60x60')
    field_136x136: Optional[Field136x1361] = Field(None, alias='136x136')
    field_170x: Optional[Field170x1] = Field(None, alias='170x')
    field_236x: Optional[Field236x1] = Field(None, alias='236x')
    field_474x: Optional[Field474x1] = Field(None, alias='474x')
    field_564x: Optional[Field564x1] = Field(None, alias='564x')
    field_736x: Optional[Field736x1] = Field(None, alias='736x')
    field_600x315: Optional[Field600x315] = Field(None, alias='600x315')
    orig: Optional[PinterestDLModelsPostOrig] = None


class InItem(BaseModel):
    user: Optional[InstagramDLModelsFeedUser1] = None
    position: Optional[List[float]] = Field(None, title='Position')


class InItem1(BaseModel):
    user: Optional[InstagramDLModelsFeedUser1] = None
    position: Optional[List[float]] = Field(None, title='Position')


class InstagramDLModelsFeedMusicInfo(BaseModel):
    music_consumption_info: Optional[MusicConsumptionInfo] = None
    music_asset_info: Optional[InstagramDLModelsFeedMusicAssetInfo] = None


class InstagramDLModelsPostEdge(BaseModel):
    node: Optional[InstagramDLModelsPostNode] = None


class InstagramDLModelsPostEdgeMediaToCaption(BaseModel):
    edges: Optional[List[InstagramDLModelsPostEdge]] = Field(None, title='Edges')


class InstagramDLModelsPostNode1(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    text: Optional[str] = Field(None, title='Text')
    created_at: Optional[int] = Field(None, title='Created At')
    did_report_as_spam: Optional[bool] = Field(None, title='Did Report As Spam')
    owner: Optional[Owner1] = None
    viewer_has_liked: Optional[bool] = Field(None, title='Viewer Has Liked')
    edge_liked_by: Optional[InstagramDLModelsPostEdgeLikedBy] = None
    is_restricted_pending: Optional[bool] = Field(None, title='Is Restricted Pending')
    edge_threaded_comments: Optional[EdgeThreadedComments] = None


class InstagramDLModelsPostNode2(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    text: Optional[str] = Field(None, title='Text')
    created_at: Optional[int] = Field(None, title='Created At')
    did_report_as_spam: Optional[bool] = Field(None, title='Did Report As Spam')
    owner: Optional[Owner1] = None
    viewer_has_liked: Optional[bool] = Field(None, title='Viewer Has Liked')
    edge_liked_by: Optional[InstagramDLModelsPostEdgeLikedBy] = None
    is_restricted_pending: Optional[bool] = Field(None, title='Is Restricted Pending')


class InstagramDLModelsPostNode4(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    id: Optional[str] = Field(None, title='Id')
    shortcode: Optional[str] = Field(None, title='Shortcode')
    edge_media_preview_like: Optional[EdgeMediaPreviewLike1] = None
    edge_media_preview_comment: Optional[EdgeMediaPreviewComment1] = None
    thumbnail_src: Optional[str] = Field(None, title='Thumbnail Src')
    owner: Optional[Owner3] = None
    gating_info: None = Field(None, title='Gating Info')
    sharing_friction_info: Optional[InstagramDLModelsPostSharingFrictionInfo] = None
    media_overlay_info: None = Field(None, title='Media Overlay Info')
    is_video: Optional[bool] = Field(None, title='Is Video')
    accessibility_caption: Optional[str] = Field(None, title='Accessibility Caption')


class InstagramDLModelsUserEdge2(BaseModel):
    node: Optional[InstagramDLModelsUserNode2] = None


class InstagramDLModelsUserEdgeMediaToCaption(BaseModel):
    edges: Optional[List[InstagramDLModelsUserEdge2]] = Field(None, title='Edges')


class InstagramDLModelsUserEdgeRelatedProfiles(BaseModel):
    edges: Optional[List[Edge8]] = Field(None, title='Edges')


class InstagramDLModelsUserNode1(BaseModel):
    user: Optional[InstagramDLModelsUserUser1] = None
    x: Optional[float] = Field(None, title='X')
    y: Optional[float] = Field(None, title='Y')


class InstagramDLModelsUserNode4(BaseModel):
    user: Optional[InstagramDLModelsUserUser1] = None
    x: Optional[float] = Field(None, title='X')
    y: Optional[float] = Field(None, title='Y')


class Label1(BaseModel):
    url: Optional[TwitterDLModelsTimelineUrl] = None
    badge: Optional[TwitterDLModelsTimelineBadge] = None
    description: Optional[str] = Field(None, title='Description')
    userLabelType: Optional[str] = Field(None, title='Userlabeltype')
    userLabelDisplayType: Optional[str] = Field(None, title='Userlabeldisplaytype')


class Label2(BaseModel):
    url: Optional[Url4] = None
    badge: Optional[TwitterDLModelsTimelineBadge] = None
    description: Optional[str] = Field(None, title='Description')
    userLabelType: Optional[str] = Field(None, title='Userlabeltype')
    userLabelDisplayType: Optional[str] = Field(None, title='Userlabeldisplaytype')


class Label3(BaseModel):
    url: Optional[Url13] = None
    badge: Optional[TwitterDLModelsTimelineBadge] = None
    description: Optional[str] = Field(None, title='Description')
    userLabelType: Optional[str] = Field(None, title='Userlabeltype')
    userLabelDisplayType: Optional[str] = Field(None, title='Userlabeldisplaytype')


class Label4(BaseModel):
    url: Optional[Url24] = None
    badge: Optional[TwitterDLModelsTimelineBadge] = None
    description: Optional[str] = Field(None, title='Description')
    userLabelType: Optional[str] = Field(None, title='Userlabeltype')
    userLabelDisplayType: Optional[str] = Field(None, title='Userlabeldisplaytype')


class Legacy11(BaseModel):
    can_dm: Optional[bool] = Field(None, title='Can Dm')
    can_media_tag: Optional[bool] = Field(None, title='Can Media Tag')
    created_at: Optional[str] = Field(None, title='Created At')
    default_profile: Optional[bool] = Field(None, title='Default Profile')
    default_profile_image: Optional[bool] = Field(None, title='Default Profile Image')
    description: Optional[str] = Field(None, title='Description')
    entities: Optional[Entities10] = None
    fast_followers_count: Optional[int] = Field(None, title='Fast Followers Count')
    favourites_count: Optional[int] = Field(None, title='Favourites Count')
    followers_count: Optional[int] = Field(None, title='Followers Count')
    friends_count: Optional[int] = Field(None, title='Friends Count')
    has_custom_timelines: Optional[bool] = Field(None, title='Has Custom Timelines')
    is_translator: Optional[bool] = Field(None, title='Is Translator')
    listed_count: Optional[int] = Field(None, title='Listed Count')
    location: Optional[str] = Field(None, title='Location')
    media_count: Optional[int] = Field(None, title='Media Count')
    name: Optional[str] = Field(None, title='Name')
    normal_followers_count: Optional[int] = Field(None, title='Normal Followers Count')
    pinned_tweet_ids_str: Optional[List] = Field(None, title='Pinned Tweet Ids Str')
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    profile_banner_url: Optional[str] = Field(None, title='Profile Banner Url')
    profile_image_url_https: Optional[str] = Field(
        None, title='Profile Image Url Https'
    )
    profile_interstitial_type: Optional[str] = Field(
        None, title='Profile Interstitial Type'
    )
    screen_name: Optional[str] = Field(None, title='Screen Name')
    statuses_count: Optional[int] = Field(None, title='Statuses Count')
    translator_type: Optional[str] = Field(None, title='Translator Type')
    url: Optional[str] = Field(None, title='Url')
    verified: Optional[bool] = Field(None, title='Verified')
    verified_type: Optional[str] = Field(None, title='Verified Type')
    want_retweets: Optional[bool] = Field(None, title='Want Retweets')
    withheld_in_countries: Optional[List] = Field(None, title='Withheld In Countries')


class Legacy13(BaseModel):
    can_dm: Optional[bool] = Field(None, title='Can Dm')
    can_media_tag: Optional[bool] = Field(None, title='Can Media Tag')
    created_at: Optional[str] = Field(None, title='Created At')
    default_profile: Optional[bool] = Field(None, title='Default Profile')
    default_profile_image: Optional[bool] = Field(None, title='Default Profile Image')
    description: Optional[str] = Field(None, title='Description')
    entities: Optional[Entities11] = None
    fast_followers_count: Optional[int] = Field(None, title='Fast Followers Count')
    favourites_count: Optional[int] = Field(None, title='Favourites Count')
    followers_count: Optional[int] = Field(None, title='Followers Count')
    friends_count: Optional[int] = Field(None, title='Friends Count')
    has_custom_timelines: Optional[bool] = Field(None, title='Has Custom Timelines')
    is_translator: Optional[bool] = Field(None, title='Is Translator')
    listed_count: Optional[int] = Field(None, title='Listed Count')
    location: Optional[str] = Field(None, title='Location')
    media_count: Optional[int] = Field(None, title='Media Count')
    name: Optional[str] = Field(None, title='Name')
    normal_followers_count: Optional[int] = Field(None, title='Normal Followers Count')
    pinned_tweet_ids_str: Optional[List] = Field(None, title='Pinned Tweet Ids Str')
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    profile_banner_url: Optional[str] = Field(None, title='Profile Banner Url')
    profile_image_url_https: Optional[str] = Field(
        None, title='Profile Image Url Https'
    )
    profile_interstitial_type: Optional[str] = Field(
        None, title='Profile Interstitial Type'
    )
    screen_name: Optional[str] = Field(None, title='Screen Name')
    statuses_count: Optional[int] = Field(None, title='Statuses Count')
    translator_type: Optional[str] = Field(None, title='Translator Type')
    url: Optional[str] = Field(None, title='Url')
    verified: Optional[bool] = Field(None, title='Verified')
    verified_type: Optional[str] = Field(None, title='Verified Type')
    want_retweets: Optional[bool] = Field(None, title='Want Retweets')
    withheld_in_countries: Optional[List] = Field(None, title='Withheld In Countries')


class Legacy18(BaseModel):
    can_dm: Optional[bool] = Field(None, title='Can Dm')
    can_media_tag: Optional[bool] = Field(None, title='Can Media Tag')
    created_at: Optional[str] = Field(None, title='Created At')
    default_profile: Optional[bool] = Field(None, title='Default Profile')
    default_profile_image: Optional[bool] = Field(None, title='Default Profile Image')
    description: Optional[str] = Field(None, title='Description')
    entities: Optional[Entities16] = None
    fast_followers_count: Optional[int] = Field(None, title='Fast Followers Count')
    favourites_count: Optional[int] = Field(None, title='Favourites Count')
    followers_count: Optional[int] = Field(None, title='Followers Count')
    friends_count: Optional[int] = Field(None, title='Friends Count')
    has_custom_timelines: Optional[bool] = Field(None, title='Has Custom Timelines')
    is_translator: Optional[bool] = Field(None, title='Is Translator')
    listed_count: Optional[int] = Field(None, title='Listed Count')
    location: Optional[str] = Field(None, title='Location')
    media_count: Optional[int] = Field(None, title='Media Count')
    name: Optional[str] = Field(None, title='Name')
    normal_followers_count: Optional[int] = Field(None, title='Normal Followers Count')
    pinned_tweet_ids_str: Optional[List[str]] = Field(
        None, title='Pinned Tweet Ids Str'
    )
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    profile_banner_url: Optional[str] = Field(None, title='Profile Banner Url')
    profile_image_url_https: Optional[str] = Field(
        None, title='Profile Image Url Https'
    )
    profile_interstitial_type: Optional[str] = Field(
        None, title='Profile Interstitial Type'
    )
    screen_name: Optional[str] = Field(None, title='Screen Name')
    statuses_count: Optional[int] = Field(None, title='Statuses Count')
    translator_type: Optional[str] = Field(None, title='Translator Type')
    verified: Optional[bool] = Field(None, title='Verified')
    verified_type: Optional[str] = Field(None, title='Verified Type')
    want_retweets: Optional[bool] = Field(None, title='Want Retweets')
    withheld_in_countries: Optional[List] = Field(None, title='Withheld In Countries')
    url: Optional[str] = Field(None, title='Url')


class Legacy7(BaseModel):
    can_dm: Optional[bool] = Field(None, title='Can Dm')
    can_media_tag: Optional[bool] = Field(None, title='Can Media Tag')
    created_at: Optional[str] = Field(None, title='Created At')
    default_profile: Optional[bool] = Field(None, title='Default Profile')
    default_profile_image: Optional[bool] = Field(None, title='Default Profile Image')
    description: Optional[str] = Field(None, title='Description')
    entities: Optional[Entities7] = None
    fast_followers_count: Optional[int] = Field(None, title='Fast Followers Count')
    favourites_count: Optional[int] = Field(None, title='Favourites Count')
    followers_count: Optional[int] = Field(None, title='Followers Count')
    friends_count: Optional[int] = Field(None, title='Friends Count')
    has_custom_timelines: Optional[bool] = Field(None, title='Has Custom Timelines')
    is_translator: Optional[bool] = Field(None, title='Is Translator')
    listed_count: Optional[int] = Field(None, title='Listed Count')
    location: Optional[str] = Field(None, title='Location')
    media_count: Optional[int] = Field(None, title='Media Count')
    name: Optional[str] = Field(None, title='Name')
    normal_followers_count: Optional[int] = Field(None, title='Normal Followers Count')
    pinned_tweet_ids_str: Optional[List] = Field(None, title='Pinned Tweet Ids Str')
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    profile_banner_url: Optional[str] = Field(None, title='Profile Banner Url')
    profile_image_url_https: Optional[str] = Field(
        None, title='Profile Image Url Https'
    )
    profile_interstitial_type: Optional[str] = Field(
        None, title='Profile Interstitial Type'
    )
    screen_name: Optional[str] = Field(None, title='Screen Name')
    statuses_count: Optional[int] = Field(None, title='Statuses Count')
    translator_type: Optional[str] = Field(None, title='Translator Type')
    url: Optional[str] = Field(None, title='Url')
    verified: Optional[bool] = Field(None, title='Verified')
    verified_type: Optional[str] = Field(None, title='Verified Type')
    want_retweets: Optional[bool] = Field(None, title='Want Retweets')
    withheld_in_countries: Optional[List] = Field(None, title='Withheld In Countries')


class Legacy8(BaseModel):
    can_dm: Optional[bool] = Field(None, title='Can Dm')
    can_media_tag: Optional[bool] = Field(None, title='Can Media Tag')
    created_at: Optional[str] = Field(None, title='Created At')
    default_profile: Optional[bool] = Field(None, title='Default Profile')
    default_profile_image: Optional[bool] = Field(None, title='Default Profile Image')
    description: Optional[str] = Field(None, title='Description')
    entities: Optional[Entities8] = None
    fast_followers_count: Optional[int] = Field(None, title='Fast Followers Count')
    favourites_count: Optional[int] = Field(None, title='Favourites Count')
    followers_count: Optional[int] = Field(None, title='Followers Count')
    friends_count: Optional[int] = Field(None, title='Friends Count')
    has_custom_timelines: Optional[bool] = Field(None, title='Has Custom Timelines')
    is_translator: Optional[bool] = Field(None, title='Is Translator')
    listed_count: Optional[int] = Field(None, title='Listed Count')
    location: Optional[str] = Field(None, title='Location')
    media_count: Optional[int] = Field(None, title='Media Count')
    name: Optional[str] = Field(None, title='Name')
    normal_followers_count: Optional[int] = Field(None, title='Normal Followers Count')
    pinned_tweet_ids_str: Optional[List[str]] = Field(
        None, title='Pinned Tweet Ids Str'
    )
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    profile_banner_url: Optional[str] = Field(None, title='Profile Banner Url')
    profile_image_url_https: Optional[str] = Field(
        None, title='Profile Image Url Https'
    )
    profile_interstitial_type: Optional[str] = Field(
        None, title='Profile Interstitial Type'
    )
    screen_name: Optional[str] = Field(None, title='Screen Name')
    statuses_count: Optional[int] = Field(None, title='Statuses Count')
    translator_type: Optional[str] = Field(None, title='Translator Type')
    url: Optional[str] = Field(None, title='Url')
    verified: Optional[bool] = Field(None, title='Verified')
    verified_type: Optional[str] = Field(None, title='Verified Type')
    want_retweets: Optional[bool] = Field(None, title='Want Retweets')
    withheld_in_countries: Optional[List] = Field(None, title='Withheld In Countries')


class LinkDomain(BaseModel):
    official_user: Optional[OfficialUser] = None


class MediaCroppingInfo(BaseModel):
    square_crop: Optional[SquareCrop] = None


class MediaResults4(BaseModel):
    result: Optional[Result15] = None


class MediaResults5(BaseModel):
    result: Optional[Result15] = None


class MediaResults6(BaseModel):
    result: Optional[Result22] = None


class MediaResults7(BaseModel):
    result: Optional[Result24] = None


class Node6(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    id: Optional[str] = Field(None, title='Id')
    shortcode: Optional[str] = Field(None, title='Shortcode')
    dimensions: Optional[InstagramDLModelsUserDimensions] = None
    display_url: Optional[str] = Field(None, title='Display Url')
    edge_media_to_tagged_user: Optional[EdgeMediaToTaggedUser2] = None
    fact_check_overall_rating: None = Field(None, title='Fact Check Overall Rating')
    fact_check_information: None = Field(None, title='Fact Check Information')
    gating_info: None = Field(None, title='Gating Info')
    sharing_friction_info: Optional[InstagramDLModelsUserSharingFrictionInfo] = None
    media_overlay_info: None = Field(None, title='Media Overlay Info')
    media_preview: Optional[str] = Field(None, title='Media Preview')
    owner: Optional[InstagramDLModelsUserOwner] = None
    is_video: Optional[bool] = Field(None, title='Is Video')
    has_upcoming_event: Optional[bool] = Field(None, title='Has Upcoming Event')
    accessibility_caption: Optional[str] = Field(None, title='Accessibility Caption')


class PagesPreview(BaseModel):
    music_attributions: Optional[List] = Field(None, title='Music Attributions')
    style: Optional[Style] = None
    type: Optional[str] = Field(None, title='Type')
    id: Optional[str] = Field(None, title='Id')
    image_adjusted: Optional[PinterestDLModelsReverseImage] = None
    layout: Optional[int] = Field(None, title='Layout')
    should_mute: Optional[bool] = Field(None, title='Should Mute')
    image_signature: Optional[str] = Field(None, title='Image Signature')
    blocks: Optional[List[Block]] = Field(None, title='Blocks')
    image: Optional[PinterestDLModelsReverseImage] = None
    image_signature_adjusted: Optional[str] = Field(
        None, title='Image Signature Adjusted'
    )


class PaletteItem(BaseModel):
    rgb: Optional[Rgb] = None
    percentage: Optional[float] = Field(None, title='Percentage')


class PaletteItem1(BaseModel):
    rgb: Optional[Rgb] = None
    percentage: Optional[float] = Field(None, title='Percentage')


class PinJoin(BaseModel):
    shopping_klp_urls: Optional[Any] = Field(None, title='Shopping Klp Urls')
    visual_annotation: Optional[List[str]] = Field(None, title='Visual Annotation')
    annotations_with_links: Optional[AnnotationsWithLinks] = None
    seo_related_interests: Optional[List[SeoRelatedInterest]] = Field(
        None, title='Seo Related Interests'
    )
    canonical_pin: Optional[CanonicalPin] = None
    seo_canonical_domain: Optional[str] = Field(None, title='Seo Canonical Domain')
    seo_breadcrumbs: Optional[List[SeoBreadcrumb]] = Field(
        None, title='Seo Breadcrumbs'
    )
    seo_canonical_url: Optional[str] = Field(None, title='Seo Canonical Url')


class PinterestDLModelsFeedEntry(BaseModel):
    title: Optional[str] = Field(None, title='Title')
    title_detail: Optional[PinterestDLModelsFeedTitleDetail] = None
    links: Optional[List[PinterestDLModelsFeedLink]] = Field(None, title='Links')
    link: Optional[str] = Field(None, title='Link')
    summary: Optional[str] = Field(None, title='Summary')
    summary_detail: Optional[PinterestDLModelsFeedSummaryDetail] = None
    published: Optional[str] = Field(None, title='Published')
    published_parsed: Optional[float] = Field(None, title='Published Parsed')
    id: Optional[str] = Field(None, title='Id')
    guidislink: Optional[bool] = Field(None, title='Guidislink')


class PinterestDLModelsFeedFeed(BaseModel):
    title: Optional[str] = Field(None, title='Title')
    title_detail: Optional[PinterestDLModelsFeedTitleDetail] = None
    links: Optional[List[PinterestDLModelsFeedLink]] = Field(None, title='Links')
    link: Optional[str] = Field(None, title='Link')
    subtitle: Optional[str] = Field(None, title='Subtitle')
    subtitle_detail: Optional[SubtitleDetail] = None
    language: Optional[str] = Field(None, title='Language')
    updated: Optional[str] = Field(None, title='Updated')
    updated_parsed: Optional[float] = Field(None, title='Updated Parsed')


class PinterestDLModelsPostAggregatedPinData(BaseModel):
    comment_count: Optional[int] = Field(None, title='Comment Count')
    did_it_data: Optional[DidItData] = None
    id: Optional[str] = Field(None, title='Id')
    is_shop_the_look: Optional[bool] = Field(None, title='Is Shop The Look')
    aggregated_stats: Optional[PinterestDLModelsPostAggregatedStats] = None


class PinterestDLModelsPostBoard(BaseModel):
    collaborated_by_me: Optional[bool] = Field(None, title='Collaborated By Me')
    followed_by_me: Optional[bool] = Field(None, title='Followed By Me')
    url: Optional[str] = Field(None, title='Url')
    image_cover_url: Optional[str] = Field(None, title='Image Cover Url')
    access: Optional[List] = Field(None, title='Access')
    owner: Optional[PinterestDLModelsPostOwner] = None
    id: Optional[str] = Field(None, title='Id')
    pin_thumbnail_urls: Optional[List[str]] = Field(None, title='Pin Thumbnail Urls')
    name: Optional[str] = Field(None, title='Name')
    layout: Optional[str] = Field(None, title='Layout')
    image_thumbnail_url: Optional[str] = Field(None, title='Image Thumbnail Url')
    category: Optional[str] = Field(None, title='Category')
    description: Optional[str] = Field(None, title='Description')
    type: Optional[str] = Field(None, title='Type')
    is_collaborative: Optional[bool] = Field(None, title='Is Collaborative')
    privacy: Optional[str] = Field(None, title='Privacy')
    map_id: Optional[str] = Field(None, title='Map Id')


class PinterestDLModelsPostClientContext(BaseModel):
    analysis_ua: Optional[PinterestDLModelsPostAnalysisUa] = None
    app_type_detailed: Optional[int] = Field(None, title='App Type Detailed')
    app_version: Optional[str] = Field(None, title='App Version')
    batch_exp: Optional[bool] = Field(None, title='Batch Exp')
    browser_locale: Optional[str] = Field(None, title='Browser Locale')
    browser_name: Optional[str] = Field(None, title='Browser Name')
    browser_type: Optional[int] = Field(None, title='Browser Type')
    browser_version: Optional[str] = Field(None, title='Browser Version')
    country: Optional[str] = Field(None, title='Country')
    country_from_hostname: Optional[str] = Field(None, title='Country From Hostname')
    country_from_ip: Optional[str] = Field(None, title='Country From Ip')
    csp_nonce: Optional[str] = Field(None, title='Csp Nonce')
    current_url: Optional[str] = Field(None, title='Current Url')
    debug: Optional[bool] = Field(None, title='Debug')
    deep_link: Optional[str] = Field(None, title='Deep Link')
    enabled_advertiser_countries: Optional[List[str]] = Field(
        None, title='Enabled Advertiser Countries'
    )
    facebook_token: Optional[Any] = Field(None, title='Facebook Token')
    full_path: Optional[str] = Field(None, title='Full Path')
    http_referrer: Optional[str] = Field(None, title='Http Referrer')
    impersonator_user_id: Optional[Any] = Field(None, title='Impersonator User Id')
    invite_code: Optional[str] = Field(None, title='Invite Code')
    invite_sender_id: Optional[str] = Field(None, title='Invite Sender Id')
    is_authenticated: Optional[bool] = Field(None, title='Is Authenticated')
    is_bot: Optional[str] = Field(None, title='Is Bot')
    is_internal_ip: Optional[bool] = Field(None, title='Is Internal Ip')
    is_full_page: Optional[bool] = Field(None, title='Is Full Page')
    is_mobile_agent: Optional[bool] = Field(None, title='Is Mobile Agent')
    is_sterling_on_steroids: Optional[bool] = Field(
        None, title='Is Sterling On Steroids'
    )
    is_tablet_agent: Optional[bool] = Field(None, title='Is Tablet Agent')
    language: Optional[str] = Field(None, title='Language')
    locale: Optional[str] = Field(None, title='Locale')
    origin: Optional[str] = Field(None, title='Origin')
    path: Optional[str] = Field(None, title='Path')
    placed_experiences: Optional[Any] = Field(None, title='Placed Experiences')
    referrer: Optional[Any] = Field(None, title='Referrer')
    region_from_ip: Optional[str] = Field(None, title='Region From Ip')
    request_host: Optional[str] = Field(None, title='Request Host')
    request_identifier: Optional[str] = Field(None, title='Request Identifier')
    social_bot: Optional[str] = Field(None, title='Social Bot')
    stage: Optional[str] = Field(None, title='Stage')
    sterling_on_steroids_ldap: Optional[Any] = Field(
        None, title='Sterling On Steroids Ldap'
    )
    sterling_on_steroids_user_type: Optional[Any] = Field(
        None, title='Sterling On Steroids User Type'
    )
    unauth_id: Optional[str] = Field(None, title='Unauth Id')
    seo_debug: Optional[bool] = Field(None, title='Seo Debug')
    user_agent_can_use_native_app: Optional[bool] = Field(
        None, title='User Agent Can Use Native App'
    )
    user_agent_platform: Optional[str] = Field(None, title='User Agent Platform')
    user_agent_platform_version: Optional[Any] = Field(
        None, title='User Agent Platform Version'
    )
    user_agent: Optional[str] = Field(None, title='User Agent')
    user: Optional[PinterestDLModelsPostUser] = None
    utm_campaign: Optional[Any] = Field(None, title='Utm Campaign')
    visible_url: Optional[str] = Field(None, title='Visible Url')


class PinterestDLModelsPostData(BaseModel):
    pin_join: Optional[PinJoin] = None
    access: Optional[List] = Field(None, title='Access')
    music_attributions: Optional[List] = Field(None, title='Music Attributions')
    link: Optional[str] = Field(None, title='Link')
    third_party_pin_owner: Optional[Any] = Field(None, title='Third Party Pin Owner')
    product_pin_data: Optional[Any] = Field(None, title='Product Pin Data')
    should_mute: Optional[bool] = Field(None, title='Should Mute')
    seo_url: Optional[str] = Field(None, title='Seo Url')
    promoter: Optional[Any] = Field(None, title='Promoter')
    tracked_link: Optional[str] = Field(None, title='Tracked Link')
    method: Optional[str] = Field(None, title='Method')
    shopping_flags: Optional[List[int]] = Field(None, title='Shopping Flags')
    dominant_color: Optional[str] = Field(None, title='Dominant Color')
    tracking_params: Optional[str] = Field(None, title='Tracking Params')
    type: Optional[str] = Field(None, title='Type')
    via_pinner: Optional[Any] = Field(None, title='Via Pinner')
    price_currency: Optional[str] = Field(None, title='Price Currency')
    reaction_counts: Optional[PinterestDLModelsPostReactionCounts] = None
    domain: Optional[str] = Field(None, title='Domain')
    mobile_link: Optional[Any] = Field(None, title='Mobile Link')
    aggregated_pin_data: Optional[PinterestDLModelsPostAggregatedPinData] = None
    is_repin: Optional[bool] = Field(None, title='Is Repin')
    alt_text: Optional[Any] = Field(None, title='Alt Text')
    formatted_description: Optional[FormattedDescription] = None
    is_quick_promotable_by_pinner: Optional[bool] = Field(
        None, title='Is Quick Promotable By Pinner'
    )
    videos: Optional[Any] = Field(None, title='Videos')
    is_native: Optional[bool] = Field(None, title='Is Native')
    media_attribution: Optional[Any] = Field(None, title='Media Attribution')
    category: Optional[str] = Field(None, title='Category')
    embed: Optional[Any] = Field(None, title='Embed')
    images: Optional[Images] = None
    pinner: Optional[Pinner] = None
    promoted_is_removable: Optional[bool] = Field(None, title='Promoted Is Removable')
    creator_class: Optional[Any] = Field(None, title='Creator Class')
    link_domain: Optional[LinkDomain] = None
    sponsorship: Optional[Any] = Field(None, title='Sponsorship')
    closeup_description: Optional[str] = Field(None, title='Closeup Description')
    should_open_in_stream: Optional[bool] = Field(None, title='Should Open In Stream')
    seo_description: Optional[str] = Field(None, title='Seo Description')
    pinned_to_board: Optional[Any] = Field(None, title='Pinned To Board')
    share_count: Optional[int] = Field(None, title='Share Count')
    is_promotable: Optional[bool] = Field(None, title='Is Promotable')
    shopping_rec_disabled: Optional[bool] = Field(None, title='Shopping Rec Disabled')
    is_quick_promotable: Optional[bool] = Field(None, title='Is Quick Promotable')
    origin_pinner: Optional[Any] = Field(None, title='Origin Pinner')
    is_playable: Optional[bool] = Field(None, title='Is Playable')
    repin_count: Optional[int] = Field(None, title='Repin Count')
    is_stale_product: Optional[bool] = Field(None, title='Is Stale Product')
    board: Optional[PinterestDLModelsPostBoard] = None
    comments_disabled: Optional[bool] = Field(None, title='Comments Disabled')
    is_promoted: Optional[bool] = Field(None, title='Is Promoted')
    shuffle: Optional[Any] = Field(None, title='Shuffle')
    closeup_attribution: Optional[CloseupAttribution] = None
    is_video: Optional[bool] = Field(None, title='Is Video')
    creator_class_instance: Optional[Any] = Field(None, title='Creator Class Instance')
    image_medium_url: Optional[str] = Field(None, title='Image Medium Url')
    closeup_user_note: Optional[str] = Field(None, title='Closeup User Note')
    should_redirect_id_only_url_to_text_url: Optional[bool] = Field(
        None, title='Should Redirect Id Only Url To Text Url'
    )
    id: Optional[str] = Field(None, title='Id')
    description: Optional[str] = Field(None, title='Description')
    story_pin_data_id: Optional[Any] = Field(None, title='Story Pin Data Id')
    seo_noindex_reason: Optional[Any] = Field(None, title='Seo Noindex Reason')
    privacy: Optional[str] = Field(None, title='Privacy')
    comment_count: Optional[int] = Field(None, title='Comment Count')
    created_at: Optional[str] = Field(None, title='Created At')
    seo_title: Optional[str] = Field(None, title='Seo Title')
    is_eligible_for_brand_catalog: Optional[bool] = Field(
        None, title='Is Eligible For Brand Catalog'
    )
    can_delete_did_it_and_comments: Optional[bool] = Field(
        None, title='Can Delete Did It And Comments'
    )
    native_creator: Optional[PinterestDLModelsPostNativeCreator] = None
    description_html: Optional[str] = Field(None, title='Description Html')
    title: Optional[str] = Field(None, title='Title')
    content_sensitivity: Optional[Dict[str, Any]] = Field(
        None, title='Content Sensitivity'
    )
    rich_metadata: Optional[RichMetadata] = None
    is_eligible_for_aggregated_comments: Optional[bool] = Field(
        None, title='Is Eligible For Aggregated Comments'
    )
    story_pin_data: Optional[Any] = Field(None, title='Story Pin Data')
    attribution: Optional[Any] = Field(None, title='Attribution')
    buyable_product_availability: Optional[Any] = Field(
        None, title='Buyable Product Availability'
    )
    grid_title: Optional[str] = Field(None, title='Grid Title')
    is_eligible_for_pdp: Optional[bool] = Field(None, title='Is Eligible For Pdp')
    hashtags: Optional[List] = Field(None, title='Hashtags')
    price_value: Optional[int] = Field(None, title='Price Value')
    carousel_data: Optional[Any] = Field(None, title='Carousel Data')
    section: Optional[Section] = None
    auto_alt_text: Optional[Any] = Field(None, title='Auto Alt Text')
    image_signature: Optional[str] = Field(None, title='Image Signature')
    is_hidden: Optional[bool] = Field(None, title='Is Hidden')
    did_it_disabled: Optional[bool] = Field(None, title='Did It Disabled')
    is_oos_product: Optional[bool] = Field(None, title='Is Oos Product')
    related_article: Optional[Dict[str, Any]] = Field(None, title='Related Article')
    is_whitelisted_for_tried_it: Optional[bool] = Field(
        None, title='Is Whitelisted For Tried It'
    )
    closeup_unified_description: Optional[str] = Field(
        None, title='Closeup Unified Description'
    )


class PinterestDLModelsPostResourceResponse(BaseModel):
    status: Optional[str] = Field(None, title='Status')
    code: Optional[int] = Field(None, title='Code')
    message: Optional[str] = Field(None, title='Message')
    endpoint_name: Optional[str] = Field(None, title='Endpoint Name')
    data: Optional[PinterestDLModelsPostData] = None
    x_pinterest_sli_endpoint_name: Optional[str] = Field(
        None, title='X Pinterest Sli Endpoint Name'
    )
    http_status: Optional[int] = Field(None, title='Http Status')


class PinterestDLModelsReverseAggregatedPinData(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    has_xy_tags: Optional[bool] = Field(None, title='Has Xy Tags')
    is_dynamic_collections: Optional[bool] = Field(None, title='Is Dynamic Collections')
    aggregated_stats: Optional[PinterestDLModelsReverseAggregatedStats] = None
    is_shop_the_look: Optional[bool] = Field(None, title='Is Shop The Look')
    catalog_collection_type: Optional[int] = Field(
        None, title='Catalog Collection Type'
    )


class PinterestDLModelsReverseBoard(BaseModel):
    followed_by_me: Optional[bool] = Field(None, title='Followed By Me')
    privacy: Optional[str] = Field(None, title='Privacy')
    cover_images: Optional[CoverImages] = None
    image_thumbnail_url: Optional[AnyUrl] = Field(None, title='Image Thumbnail Url')
    name: Optional[str] = Field(None, title='Name')
    id: Optional[str] = Field(None, title='Id')
    layout: Optional[str] = Field(None, title='Layout')
    owner: Optional[PinterestDLModelsReverseNativeCreator] = None
    is_ads_only: Optional[bool] = Field(None, title='Is Ads Only')
    image_cover_url: Optional[AnyUrl] = Field(None, title='Image Cover Url')


class PinterestDLModelsReverseVideos(BaseModel):
    video_list: Optional[VideoList] = None
    id: Optional[str] = Field(None, title='Id')


class PinterestDLModelsUserClientContext(BaseModel):
    analysis_ua: Optional[PinterestDLModelsUserAnalysisUa] = None
    app_type_detailed: Optional[int] = Field(None, title='App Type Detailed')
    app_version: Optional[str] = Field(None, title='App Version')
    batch_exp: Optional[bool] = Field(None, title='Batch Exp')
    browser_locale: Optional[str] = Field(None, title='Browser Locale')
    browser_name: Optional[str] = Field(None, title='Browser Name')
    browser_type: Optional[int] = Field(None, title='Browser Type')
    browser_version: Optional[str] = Field(None, title='Browser Version')
    country: Optional[str] = Field(None, title='Country')
    country_from_hostname: Optional[str] = Field(None, title='Country From Hostname')
    country_from_ip: Optional[str] = Field(None, title='Country From Ip')
    csp_nonce: Optional[str] = Field(None, title='Csp Nonce')
    current_url: Optional[str] = Field(None, title='Current Url')
    debug: Optional[bool] = Field(None, title='Debug')
    enabled_advertiser_countries: Optional[List[str]] = Field(
        None, title='Enabled Advertiser Countries'
    )
    facebook_token: None = Field(None, title='Facebook Token')
    full_path: Optional[str] = Field(None, title='Full Path')
    http_referrer: Optional[str] = Field(None, title='Http Referrer')
    impersonator_user_id: None = Field(None, title='Impersonator User Id')
    invite_code: Optional[str] = Field(None, title='Invite Code')
    invite_sender_id: Optional[str] = Field(None, title='Invite Sender Id')
    is_authenticated: Optional[bool] = Field(None, title='Is Authenticated')
    is_bot: Optional[str] = Field(None, title='Is Bot')
    is_internal_ip: Optional[bool] = Field(None, title='Is Internal Ip')
    is_full_page: Optional[bool] = Field(None, title='Is Full Page')
    is_managed_advertiser: Optional[bool] = Field(None, title='Is Managed Advertiser')
    is_mobile_agent: Optional[bool] = Field(None, title='Is Mobile Agent')
    is_shop_the_pin_campaign_whitelisted: Optional[bool] = Field(
        None, title='Is Shop The Pin Campaign Whitelisted'
    )
    is_sterling_on_steroids: Optional[bool] = Field(
        None, title='Is Sterling On Steroids'
    )
    is_tablet_agent: Optional[bool] = Field(None, title='Is Tablet Agent')
    language: Optional[str] = Field(None, title='Language')
    locale: Optional[str] = Field(None, title='Locale')
    origin: Optional[str] = Field(None, title='Origin')
    path: Optional[str] = Field(None, title='Path')
    placed_experiences: None = Field(None, title='Placed Experiences')
    referrer: None = Field(None, title='Referrer')
    region_from_ip: Optional[str] = Field(None, title='Region From Ip')
    request_host: Optional[str] = Field(None, title='Request Host')
    request_identifier: Optional[str] = Field(None, title='Request Identifier')
    social_bot: Optional[str] = Field(None, title='Social Bot')
    stage: Optional[str] = Field(None, title='Stage')
    sterling_on_steroids_ldap: None = Field(None, title='Sterling On Steroids Ldap')
    sterling_on_steroids_user_type: None = Field(
        None, title='Sterling On Steroids User Type'
    )
    unauth_id: Optional[str] = Field(None, title='Unauth Id')
    seo_debug: Optional[bool] = Field(None, title='Seo Debug')
    user_agent_can_use_native_app: Optional[bool] = Field(
        None, title='User Agent Can Use Native App'
    )
    user_agent_platform: Optional[str] = Field(None, title='User Agent Platform')
    user_agent_platform_version: Optional[List[int]] = Field(
        None, title='User Agent Platform Version'
    )
    user_agent: Optional[str] = Field(None, title='User Agent')
    user: Optional[PinterestDLModelsUserUser] = None
    utm_campaign: None = Field(None, title='Utm Campaign')
    visible_url: Optional[str] = Field(None, title='Visible Url')


class PinterestDLModelsUserData(BaseModel):
    node_id: Optional[str] = Field(None, title='Node Id')
    image_small_url: Optional[str] = Field(None, title='Image Small Url')
    instagram_data: Optional[Any] = Field(None, title='Instagram Data')
    should_show_messaging: Optional[bool] = Field(None, title='Should Show Messaging')
    profile_views: Optional[int] = Field(None, title='Profile Views')
    explicitly_followed_by_me: Optional[bool] = Field(
        None, title='Explicitly Followed By Me'
    )
    image_large_url: Optional[str] = Field(None, title='Image Large Url')
    is_tastemaker: Optional[bool] = Field(None, title='Is Tastemaker')
    native_pin_count: Optional[int] = Field(None, title='Native Pin Count')
    show_creator_profile: Optional[bool] = Field(None, title='Show Creator Profile')
    profile_reach: Optional[int] = Field(None, title='Profile Reach')
    is_private_profile: Optional[bool] = Field(None, title='Is Private Profile')
    pins_done_count: Optional[int] = Field(None, title='Pins Done Count')
    joined_communities_count: Optional[int] = Field(
        None, title='Joined Communities Count'
    )
    last_pin_save_time: Optional[str] = Field(None, title='Last Pin Save Time')
    last_name: Optional[str] = Field(None, title='Last Name')
    impressum_url: None = Field(None, title='Impressum Url')
    profile_cover: Optional[ProfileCover] = None
    verified_identity: Optional[Dict[str, Any]] = Field(None, title='Verified Identity')
    storefront_search_enabled: Optional[bool] = Field(
        None, title='Storefront Search Enabled'
    )
    first_name: Optional[str] = Field(None, title='First Name')
    has_catalog: Optional[bool] = Field(None, title='Has Catalog')
    indexed: Optional[bool] = Field(None, title='Indexed')
    is_inspirational_merchant: None = Field(None, title='Is Inspirational Merchant')
    domain_verified: Optional[bool] = Field(None, title='Domain Verified')
    has_shopping_showcase: Optional[bool] = Field(None, title='Has Shopping Showcase')
    domain_url: Optional[str] = Field(None, title='Domain Url')
    website_url: Optional[str] = Field(None, title='Website Url')
    pronouns: Optional[List] = Field(None, title='Pronouns')
    is_ads_only_profile: Optional[bool] = Field(None, title='Is Ads Only Profile')
    group_board_count: Optional[int] = Field(None, title='Group Board Count')
    show_discovered_feed: Optional[bool] = Field(None, title='Show Discovered Feed')
    is_verified_merchant: Optional[bool] = Field(None, title='Is Verified Merchant')
    listed_website_url: None = Field(None, title='Listed Website Url')
    username: Optional[str] = Field(None, title='Username')
    follower_count: Optional[int] = Field(None, title='Follower Count')
    type: Optional[str] = Field(None, title='Type')
    full_name: Optional[str] = Field(None, title='Full Name')
    image_medium_url: Optional[str] = Field(None, title='Image Medium Url')
    about: Optional[str] = Field(None, title='About')
    show_engagement_tab: Optional[bool] = Field(None, title='Show Engagement Tab')
    interest_following_count: Optional[int] = Field(
        None, title='Interest Following Count'
    )
    eligible_profile_tabs: Optional[List[EligibleProfileTab]] = Field(
        None, title='Eligible Profile Tabs'
    )
    show_impressum: Optional[bool] = Field(None, title='Show Impressum')
    has_showcase: Optional[bool] = Field(None, title='Has Showcase')
    has_custom_board_sorting_order: Optional[bool] = Field(
        None, title='Has Custom Board Sorting Order'
    )
    video_pin_count: Optional[int] = Field(None, title='Video Pin Count')
    blocked_by_me: Optional[bool] = Field(None, title='Blocked By Me')
    explicit_user_following_count: Optional[int] = Field(
        None, title='Explicit User Following Count'
    )
    ads_only_profile_site: None = Field(None, title='Ads Only Profile Site')
    id: Optional[str] = Field(None, title='Id')
    board_count: Optional[int] = Field(None, title='Board Count')
    following_count: Optional[int] = Field(None, title='Following Count')
    story_pin_count: Optional[int] = Field(None, title='Story Pin Count')
    has_published_pins: Optional[bool] = Field(None, title='Has Published Pins')
    is_primary_website_verified: Optional[bool] = Field(
        None, title='Is Primary Website Verified'
    )
    profile_discovered_public: Optional[bool] = Field(
        None, title='Profile Discovered Public'
    )
    storefront_management_enabled: Optional[bool] = Field(
        None, title='Storefront Management Enabled'
    )
    partner: Optional[Partner] = None
    image_xlarge_url: Optional[str] = Field(None, title='Image Xlarge Url')
    is_partner: Optional[bool] = Field(None, title='Is Partner')
    should_default_comments_off: Optional[bool] = Field(
        None, title='Should Default Comments Off'
    )
    pin_count: Optional[int] = Field(None, title='Pin Count')


class PinterestDLModelsUserResourceResponse(BaseModel):
    status: Optional[str] = Field(None, title='Status')
    code: Optional[int] = Field(None, title='Code')
    message: Optional[str] = Field(None, title='Message')
    endpoint_name: Optional[str] = Field(None, title='Endpoint Name')
    data: Optional[PinterestDLModelsUserData] = None
    x_pinterest_sli_endpoint_name: Optional[str] = Field(
        None, title='X Pinterest Sli Endpoint Name'
    )
    http_status: Optional[int] = Field(None, title='Http Status')


class PinterestFeed(BaseModel):
    bozo: Optional[bool] = Field(None, title='Bozo')
    entries: Optional[List[PinterestDLModelsFeedEntry]] = Field(None, title='Entries')
    feed: Optional[PinterestDLModelsFeedFeed] = None
    headers: Optional[Dict[str, Any]] = Field(None, title='Headers')
    encoding: Optional[str] = Field(None, title='Encoding')
    version: Optional[str] = Field(None, title='Version')
    namespaces: Optional[Namespaces] = None


class PinterestPost(BaseModel):
    resource_response: Optional[PinterestDLModelsPostResourceResponse] = None
    client_context: Optional[PinterestDLModelsPostClientContext] = None
    resource: Optional[PinterestDLModelsPostResource] = None
    request_identifier: Optional[str] = Field(None, title='Request Identifier')


class PinterestUser(BaseModel):
    resource_response: Optional[PinterestDLModelsUserResourceResponse] = None
    client_context: Optional[PinterestDLModelsUserClientContext] = None
    resource: Optional[PinterestDLModelsUserResource] = None
    request_identifier: Optional[str] = Field(None, title='Request Identifier')


class Post(BaseModel):
    pk: Optional[str] = Field(None, title='Pk')
    user: Optional[ThreadsDLModelsGraphQLPostUser] = None
    text_post_app_info: Optional[TextPostAppInfo] = None
    id: Optional[str] = Field(None, title='Id')
    is_paid_partnership: None = Field(None, title='Is Paid Partnership')
    is_fb_only: None = Field(None, title='Is Fb Only')
    is_internal_only: None = Field(None, title='Is Internal Only')
    code: Optional[str] = Field(None, title='Code')
    carousel_media: None = Field(None, title='Carousel Media')
    image_versions2: Optional[ThreadsDLModelsGraphQLPostImageVersions2] = None
    original_height: Optional[int] = Field(None, title='Original Height')
    original_width: Optional[int] = Field(None, title='Original Width')
    video_versions: Optional[List[ThreadsDLModelsGraphQLPostVideoVersion]] = Field(
        None, title='Video Versions'
    )
    like_count: Optional[int] = Field(None, title='Like Count')
    audio: None = Field(None, title='Audio')
    caption: Optional[ThreadsDLModelsGraphQLPostCaption] = None
    caption_is_edited: Optional[bool] = Field(None, title='Caption Is Edited')
    transcription_data: None = Field(None, title='Transcription Data')
    accessibility_caption: None = Field(None, title='Accessibility Caption')
    has_audio: None = Field(None, title='Has Audio')
    media_type: Optional[int] = Field(None, title='Media Type')
    has_liked: Optional[bool] = Field(None, title='Has Liked')
    caption_add_on: None = Field(None, title='Caption Add On')
    giphy_media_info: None = Field(None, title='Giphy Media Info')
    text_with_entities: None = Field(None, title='Text With Entities')
    taken_at: Optional[int] = Field(None, title='Taken At')
    organic_tracking_token: Optional[str] = Field(None, title='Organic Tracking Token')
    media_overlay_info: None = Field(None, title='Media Overlay Info')
    like_and_view_counts_disabled: Optional[bool] = Field(
        None, title='Like And View Counts Disabled'
    )


class Professional10(BaseModel):
    rest_id: Optional[str] = Field(None, title='Rest Id')
    professional_type: Optional[str] = Field(None, title='Professional Type')
    category: Optional[List[TwitterDLModelsTimelineCategoryItem]] = Field(
        None, title='Category'
    )


class Professional6(BaseModel):
    rest_id: Optional[str] = Field(None, title='Rest Id')
    professional_type: Optional[str] = Field(None, title='Professional Type')
    category: Optional[List[TwitterDLModelsTimelineCategoryItem]] = Field(
        None, title='Category'
    )


class Professional7(BaseModel):
    rest_id: Optional[str] = Field(None, title='Rest Id')
    professional_type: Optional[str] = Field(None, title='Professional Type')
    category: Optional[List[TwitterDLModelsTimelineCategoryItem]] = Field(
        None, title='Category'
    )


class Professional8(BaseModel):
    rest_id: Optional[str] = Field(None, title='Rest Id')
    professional_type: Optional[str] = Field(None, title='Professional Type')
    category: Optional[List[TwitterDLModelsTimelineCategoryItem]] = Field(
        None, title='Category'
    )


class Professional9(BaseModel):
    rest_id: Optional[str] = Field(None, title='Rest Id')
    professional_type: Optional[str] = Field(None, title='Professional Type')
    category: Optional[List[TwitterDLModelsTimelineCategoryItem]] = Field(
        None, title='Category'
    )


class QuotedRefResult(BaseModel):
    result: Optional[Result27] = None


class Result11(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    id: Optional[str] = Field(None, title='Id')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    affiliates_highlighted_label: Optional[Dict[str, Any]] = Field(
        None, title='Affiliates Highlighted Label'
    )
    has_graduated_access: Optional[bool] = Field(None, title='Has Graduated Access')
    is_blue_verified: Optional[bool] = Field(None, title='Is Blue Verified')
    profile_image_shape: Optional[str] = Field(None, title='Profile Image Shape')
    legacy: Optional[Legacy7] = None
    professional: Optional[TwitterDLModelsTimelineProfessional3] = None
    super_follow_eligible: Optional[bool] = Field(None, title='Super Follow Eligible')


class Result17(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    id: Optional[str] = Field(None, title='Id')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    affiliates_highlighted_label: Optional[Dict[str, Any]] = Field(
        None, title='Affiliates Highlighted Label'
    )
    has_graduated_access: Optional[bool] = Field(None, title='Has Graduated Access')
    is_blue_verified: Optional[bool] = Field(None, title='Is Blue Verified')
    profile_image_shape: Optional[str] = Field(None, title='Profile Image Shape')
    legacy: Optional[Legacy11] = None


class Result18(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    text: Optional[str] = Field(None, title='Text')
    entity_set: Optional[EntitySet] = None
    richtext: Optional[Richtext] = None
    media: Optional[Media] = None


class Result19(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    id: Optional[str] = Field(None, title='Id')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    affiliates_highlighted_label: Optional[Dict[str, Any]] = Field(
        None, title='Affiliates Highlighted Label'
    )
    has_graduated_access: Optional[bool] = Field(None, title='Has Graduated Access')
    is_blue_verified: Optional[bool] = Field(None, title='Is Blue Verified')
    profile_image_shape: Optional[str] = Field(None, title='Profile Image Shape')
    legacy: Optional[Legacy13] = None


class Result23(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    id: Optional[str] = Field(None, title='Id')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    affiliates_highlighted_label: Optional[Dict[str, Any]] = Field(
        None, title='Affiliates Highlighted Label'
    )
    has_graduated_access: Optional[bool] = Field(None, title='Has Graduated Access')
    is_blue_verified: Optional[bool] = Field(None, title='Is Blue Verified')
    profile_image_shape: Optional[str] = Field(None, title='Profile Image Shape')
    legacy: Optional[Legacy16] = None
    professional: Optional[Professional7] = None


class Result25(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    id: Optional[str] = Field(None, title='Id')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    affiliates_highlighted_label: Optional[Dict[str, Any]] = Field(
        None, title='Affiliates Highlighted Label'
    )
    has_graduated_access: Optional[bool] = Field(None, title='Has Graduated Access')
    is_blue_verified: Optional[bool] = Field(None, title='Is Blue Verified')
    profile_image_shape: Optional[str] = Field(None, title='Profile Image Shape')
    legacy: Optional[Legacy17] = None
    professional: Optional[Professional8] = None


class Result28(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    id: Optional[str] = Field(None, title='Id')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    affiliates_highlighted_label: Optional[Dict[str, Any]] = Field(
        None, title='Affiliates Highlighted Label'
    )
    has_graduated_access: Optional[bool] = Field(None, title='Has Graduated Access')
    is_blue_verified: Optional[bool] = Field(None, title='Is Blue Verified')
    profile_image_shape: Optional[str] = Field(None, title='Profile Image Shape')
    legacy: Optional[Legacy18] = None
    professional: Optional[Professional9] = None


class Result6(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    id: Optional[str] = Field(None, title='Id')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    affiliates_highlighted_label: Optional[Dict[str, Any]] = Field(
        None, title='Affiliates Highlighted Label'
    )
    has_graduated_access: Optional[bool] = Field(None, title='Has Graduated Access')
    is_blue_verified: Optional[bool] = Field(None, title='Is Blue Verified')
    profile_image_shape: Optional[str] = Field(None, title='Profile Image Shape')
    legacy: Optional[TwitterDLModelsPostLegacy4] = None
    professional: Optional[TwitterDLModelsPostProfessional2] = None


class Richtext1(BaseModel):
    richtext_tags: Optional[List[RichtextTag]] = Field(None, title='Richtext Tags')


class Sizes4(BaseModel):
    large: Optional[Large8] = None
    medium: Optional[Medium8] = None
    small: Optional[Small8] = None
    thumb: Optional[TwitterDLModelsTimelineThumb] = None


class Sizes5(BaseModel):
    large: Optional[Large10] = None
    medium: Optional[Medium10] = None
    small: Optional[Small10] = None
    thumb: Optional[TwitterDLModelsTimelineThumb] = None


class Sizes6(BaseModel):
    large: Optional[Large13] = None
    medium: Optional[Medium13] = None
    small: Optional[Small13] = None
    thumb: Optional[TwitterDLModelsTimelineThumb] = None


class Sizes7(BaseModel):
    large: Optional[Large15] = None
    medium: Optional[Medium15] = None
    small: Optional[Small15] = None
    thumb: Optional[TwitterDLModelsTimelineThumb] = None


class StoryBloksSticker(BaseModel):
    x: Optional[float] = Field(None, title='X')
    y: Optional[float] = Field(None, title='Y')
    width: Optional[float] = Field(None, title='Width')
    height: Optional[float] = Field(None, title='Height')
    rotation: Optional[int] = Field(None, title='Rotation')
    bloks_sticker: Optional[BloksSticker] = None
    id: None = Field(None, title='Id')


class StoryPinData(BaseModel):
    pages_preview: Optional[List[PagesPreview]] = Field(None, title='Pages Preview')
    metadata: Optional[PinterestDLModelsReverseMetadata] = None
    type: Optional[str] = Field(None, title='Type')
    id: Optional[str] = Field(None, title='Id')
    total_video_duration: Optional[int] = Field(None, title='Total Video Duration')
    static_page_count: Optional[int] = Field(None, title='Static Page Count')
    has_affiliate_products: Optional[bool] = Field(None, title='Has Affiliate Products')
    has_product_pins: Optional[bool] = Field(None, title='Has Product Pins')
    has_virtual_try_on_makeup_pins: Optional[bool] = Field(
        None, title='Has Virtual Try On Makeup Pins'
    )
    page_count: Optional[int] = Field(None, title='Page Count')


class Thread(BaseModel):
    text: Optional[str] = Field(None, title='Text')
    published_on: Optional[int] = Field(None, title='Published On')
    id: Optional[str] = Field(None, title='Id')
    pk: Optional[str] = Field(None, title='Pk')
    code: Optional[str] = Field(None, title='Code')
    username: Optional[str] = Field(None, title='Username')
    user_pic: Optional[str] = Field(None, title='User Pic')
    user_verified: Optional[bool] = Field(None, title='User Verified')
    user_pk: Optional[str] = Field(None, title='User Pk')
    user_id: None = Field(None, title='User Id')
    has_audio: None = Field(None, title='Has Audio')
    reply_count: None = Field(None, title='Reply Count')
    image_versions2: Optional[ThreadsDLModelsProfileImageVersions2] = None
    video_versions: Optional[List[ThreadsDLModelsProfileVideoVersion]] = Field(
        None, title='Video Versions'
    )
    like_count: Optional[int] = Field(None, title='Like Count')
    images: Optional[List] = Field(None, title='Images')
    image_count: None = Field(None, title='Image Count')
    videos: Optional[List] = Field(None, title='Videos')
    url: Optional[str] = Field(None, title='Url')


class ThreadItem(BaseModel):
    post: Optional[Post] = None
    reply_facepile_users: Optional[List] = Field(None, title='Reply Facepile Users')
    line_type: Optional[str] = Field(None, title='Line Type')
    should_show_replies_cta: Optional[bool] = Field(
        None, title='Should Show Replies Cta'
    )


class ThreadsDLModelsGraphQLPostNode(BaseModel):
    thread_header_context: None = Field(None, title='Thread Header Context')
    thread_items: Optional[List[ThreadItem]] = Field(None, title='Thread Items')
    thread_type: Optional[str] = Field(None, title='Thread Type')
    header: None = Field(None, title='Header')
    id: Optional[str] = Field(None, title='Id')
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')


class ThreadsProfileResponse(BaseModel):
    user: Optional[ThreadsDLModelsProfileUser] = None
    threads: Optional[List[Thread]] = Field(None, title='Threads')


class TikTokDLModelsPostData(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    region: Optional[str] = Field(None, title='Region')
    title: Optional[str] = Field(None, title='Title')
    cover: Optional[str] = Field(None, title='Cover')
    duration: Optional[int] = Field(None, title='Duration')
    play: Optional[str] = Field(None, title='Play')
    wmplay: Optional[str] = Field(None, title='Wmplay')
    hdplay: Optional[str] = Field(None, title='Hdplay')
    size: None = Field(None, title='Size')
    wm_size: None = Field(None, title='Wm Size')
    hd_size: None = Field(None, title='Hd Size')
    music: Optional[str] = Field(None, title='Music')
    music_info: Optional[TikTokDLModelsPostMusicInfo] = None
    play_count: Optional[int] = Field(None, title='Play Count')
    digg_count: Optional[int] = Field(None, title='Digg Count')
    comment_count: Optional[int] = Field(None, title='Comment Count')
    share_count: Optional[int] = Field(None, title='Share Count')
    download_count: Optional[int] = Field(None, title='Download Count')
    collect_count: Optional[int] = Field(None, title='Collect Count')
    create_time: Optional[int] = Field(None, title='Create Time')
    anchors: None = Field(None, title='Anchors')
    anchors_extras: Optional[str] = Field(None, title='Anchors Extras')
    is_ad: Optional[bool] = Field(None, title='Is Ad')
    commerce_info: Optional[TikTokDLModelsPostCommerceInfo] = None
    commercial_video_info: Optional[str] = Field(None, title='Commercial Video Info')
    item_comment_settings: Optional[int] = Field(None, title='Item Comment Settings')
    author: Optional[TikTokDLModelsPostAuthor] = None
    images: Optional[List[str]] = Field(None, title='Images')


class TikTokUser(BaseModel):
    extra: Optional[Extra] = None
    log_pb: Optional[LogPb] = None
    shareMeta: Optional[ShareMeta] = None
    statusCode: Optional[int] = Field(None, title='Statuscode')
    status_code: Optional[int] = Field(None, title='Status Code')
    status_msg: Optional[str] = Field(None, title='Status Msg')
    userInfo: Optional[UserInfo] = None


class TwitterDLModelsPostClientEventInfo1(BaseModel):
    details: Optional[TwitterDLModelsPostDetails1] = None


class TwitterDLModelsPostDescription1(BaseModel):
    urls: Optional[List[TwitterDLModelsPostUrl2]] = Field(None, title='Urls')


class TwitterDLModelsPostDetails(BaseModel):
    conversationDetails: Optional[ConversationDetails] = None
    timelinesDetails: Optional[TwitterDLModelsPostTimelinesDetails] = None


class TwitterDLModelsPostEntities2(BaseModel):
    description: Optional[TwitterDLModelsPostDescription1] = None
    url: Optional[TwitterDLModelsPostUrl3] = None


class TwitterDLModelsPostLegacy2(BaseModel):
    can_dm: Optional[bool] = Field(None, title='Can Dm')
    can_media_tag: Optional[bool] = Field(None, title='Can Media Tag')
    created_at: Optional[str] = Field(None, title='Created At')
    default_profile: Optional[bool] = Field(None, title='Default Profile')
    default_profile_image: Optional[bool] = Field(None, title='Default Profile Image')
    description: Optional[str] = Field(None, title='Description')
    entities: Optional[TwitterDLModelsPostEntities2] = None
    fast_followers_count: Optional[int] = Field(None, title='Fast Followers Count')
    favourites_count: Optional[int] = Field(None, title='Favourites Count')
    followers_count: Optional[int] = Field(None, title='Followers Count')
    friends_count: Optional[int] = Field(None, title='Friends Count')
    has_custom_timelines: Optional[bool] = Field(None, title='Has Custom Timelines')
    is_translator: Optional[bool] = Field(None, title='Is Translator')
    listed_count: Optional[int] = Field(None, title='Listed Count')
    location: Optional[str] = Field(None, title='Location')
    media_count: Optional[int] = Field(None, title='Media Count')
    name: Optional[str] = Field(None, title='Name')
    normal_followers_count: Optional[int] = Field(None, title='Normal Followers Count')
    pinned_tweet_ids_str: Optional[List[str]] = Field(
        None, title='Pinned Tweet Ids Str'
    )
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    profile_banner_url: Optional[str] = Field(None, title='Profile Banner Url')
    profile_image_url_https: Optional[str] = Field(
        None, title='Profile Image Url Https'
    )
    profile_interstitial_type: Optional[str] = Field(
        None, title='Profile Interstitial Type'
    )
    screen_name: Optional[str] = Field(None, title='Screen Name')
    statuses_count: Optional[int] = Field(None, title='Statuses Count')
    translator_type: Optional[str] = Field(None, title='Translator Type')
    url: Optional[str] = Field(None, title='Url')
    verified: Optional[bool] = Field(None, title='Verified')
    want_retweets: Optional[bool] = Field(None, title='Want Retweets')
    withheld_in_countries: Optional[List] = Field(None, title='Withheld In Countries')


class TwitterDLModelsPostMediaResults(BaseModel):
    result: Optional[TwitterDLModelsPostResult2] = None


class TwitterDLModelsPostMediaResults1(BaseModel):
    result: Optional[TwitterDLModelsPostResult2] = None


class TwitterDLModelsPostMediaResults2(BaseModel):
    result: Optional[TwitterDLModelsPostResult7] = None


class TwitterDLModelsPostMediaResults3(BaseModel):
    result: Optional[TwitterDLModelsPostResult9] = None


class TwitterDLModelsPostResult5(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    id: Optional[str] = Field(None, title='Id')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    affiliates_highlighted_label: Optional[Dict[str, Any]] = Field(
        None, title='Affiliates Highlighted Label'
    )
    has_graduated_access: Optional[bool] = Field(None, title='Has Graduated Access')
    is_blue_verified: Optional[bool] = Field(None, title='Is Blue Verified')
    profile_image_shape: Optional[str] = Field(None, title='Profile Image Shape')
    legacy: Optional[TwitterDLModelsPostLegacy2] = None
    super_follow_eligible: Optional[bool] = Field(None, title='Super Follow Eligible')
    professional: Optional[TwitterDLModelsPostProfessional1] = None


class TwitterDLModelsPostSizes(BaseModel):
    large: Optional[TwitterDLModelsPostLarge] = None
    medium: Optional[TwitterDLModelsPostMedium] = None
    small: Optional[TwitterDLModelsPostSmall] = None
    thumb: Optional[TwitterDLModelsPostThumb] = None


class TwitterDLModelsPostSizes1(BaseModel):
    large: Optional[TwitterDLModelsPostLarge] = None
    medium: Optional[TwitterDLModelsPostMedium] = None
    small: Optional[TwitterDLModelsPostSmall] = None
    thumb: Optional[TwitterDLModelsPostThumb] = None


class TwitterDLModelsPostSizes2(BaseModel):
    large: Optional[TwitterDLModelsPostLarge] = None
    medium: Optional[TwitterDLModelsPostMedium] = None
    small: Optional[TwitterDLModelsPostSmall] = None
    thumb: Optional[TwitterDLModelsPostThumb] = None


class TwitterDLModelsPostSizes3(BaseModel):
    large: Optional[TwitterDLModelsPostLarge] = None
    medium: Optional[TwitterDLModelsPostMedium] = None
    small: Optional[TwitterDLModelsPostSmall] = None
    thumb: Optional[TwitterDLModelsPostThumb] = None


class TwitterDLModelsPostSourceUser1(BaseModel):
    user_results: Optional[TwitterDLModelsPostUserResults3] = None


class TwitterDLModelsPostUrl(BaseModel):
    urls: Optional[List[Url1]] = Field(None, title='Urls')


class TwitterDLModelsPostUserResults1(BaseModel):
    result: Optional[TwitterDLModelsPostResult5] = None


class TwitterDLModelsPostUserResults2(BaseModel):
    result: Optional[Result6] = None


class TwitterDLModelsTimelineDescription2(BaseModel):
    urls: Optional[List[Url5]] = Field(None, title='Urls')


class TwitterDLModelsTimelineDetails(BaseModel):
    timelinesDetails: Optional[TwitterDLModelsTimelineTimelinesDetails] = None


class TwitterDLModelsTimelineDetails1(BaseModel):
    timelinesDetails: Optional[TwitterDLModelsTimelineTimelinesDetails] = None


class TwitterDLModelsTimelineEntities4(BaseModel):
    description: Optional[TwitterDLModelsTimelineDescription2] = None
    url: Optional[Url6] = None


class TwitterDLModelsTimelineLabel(BaseModel):
    url: Optional[TwitterDLModelsTimelineUrl] = None
    badge: Optional[TwitterDLModelsTimelineBadge] = None
    description: Optional[str] = Field(None, title='Description')
    userLabelType: Optional[str] = Field(None, title='Userlabeltype')
    userLabelDisplayType: Optional[str] = Field(None, title='Userlabeldisplaytype')


class TwitterDLModelsTimelineLegacy4(BaseModel):
    following: Optional[bool] = Field(None, title='Following')
    can_dm: Optional[bool] = Field(None, title='Can Dm')
    can_media_tag: Optional[bool] = Field(None, title='Can Media Tag')
    created_at: Optional[str] = Field(None, title='Created At')
    default_profile: Optional[bool] = Field(None, title='Default Profile')
    default_profile_image: Optional[bool] = Field(None, title='Default Profile Image')
    description: Optional[str] = Field(None, title='Description')
    entities: Optional[TwitterDLModelsTimelineEntities4] = None
    fast_followers_count: Optional[int] = Field(None, title='Fast Followers Count')
    favourites_count: Optional[int] = Field(None, title='Favourites Count')
    followers_count: Optional[int] = Field(None, title='Followers Count')
    friends_count: Optional[int] = Field(None, title='Friends Count')
    has_custom_timelines: Optional[bool] = Field(None, title='Has Custom Timelines')
    is_translator: Optional[bool] = Field(None, title='Is Translator')
    listed_count: Optional[int] = Field(None, title='Listed Count')
    location: Optional[str] = Field(None, title='Location')
    media_count: Optional[int] = Field(None, title='Media Count')
    name: Optional[str] = Field(None, title='Name')
    normal_followers_count: Optional[int] = Field(None, title='Normal Followers Count')
    pinned_tweet_ids_str: Optional[List[str]] = Field(
        None, title='Pinned Tweet Ids Str'
    )
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    profile_banner_url: Optional[str] = Field(None, title='Profile Banner Url')
    profile_image_url_https: Optional[str] = Field(
        None, title='Profile Image Url Https'
    )
    profile_interstitial_type: Optional[str] = Field(
        None, title='Profile Interstitial Type'
    )
    screen_name: Optional[str] = Field(None, title='Screen Name')
    statuses_count: Optional[int] = Field(None, title='Statuses Count')
    translator_type: Optional[str] = Field(None, title='Translator Type')
    verified: Optional[bool] = Field(None, title='Verified')
    want_retweets: Optional[bool] = Field(None, title='Want Retweets')
    withheld_in_countries: Optional[List] = Field(None, title='Withheld In Countries')
    verified_type: Optional[str] = Field(None, title='Verified Type')
    url: Optional[str] = Field(None, title='Url')


class TwitterDLModelsTimelineMediaResults(BaseModel):
    result: Optional[TwitterDLModelsTimelineResult5] = None


class TwitterDLModelsTimelineMediaResults1(BaseModel):
    result: Optional[TwitterDLModelsTimelineResult5] = None


class TwitterDLModelsTimelineSizes(BaseModel):
    large: Optional[Large1] = None
    medium: Optional[Medium1] = None
    small: Optional[Small1] = None
    thumb: Optional[TwitterDLModelsTimelineThumb] = None


class TwitterDLModelsTimelineSizes1(BaseModel):
    large: Optional[Large3] = None
    medium: Optional[Medium3] = None
    small: Optional[Small3] = None
    thumb: Optional[TwitterDLModelsTimelineThumb] = None


class TwitterDLModelsTimelineSizes2(BaseModel):
    large: Optional[Large3] = None
    medium: Optional[Medium3] = None
    small: Optional[Small3] = None
    thumb: Optional[TwitterDLModelsTimelineThumb] = None


class TwitterDLModelsTimelineSizes3(BaseModel):
    large: Optional[Large6] = None
    medium: Optional[Medium6] = None
    small: Optional[Small6] = None
    thumb: Optional[TwitterDLModelsTimelineThumb] = None


class TwitterDLModelsTimelineUrl2(BaseModel):
    urls: Optional[List[TwitterDLModelsTimelineUrl3]] = Field(None, title='Urls')


class TwitterDLModelsUserDescription1(BaseModel):
    text: Optional[str] = Field(None, title='Text')
    entities: Optional[List[Entity]] = Field(None, title='Entities')


class TwitterDLModelsUserLabel(BaseModel):
    url: Optional[TwitterDLModelsUserUrl] = None
    badge: Optional[TwitterDLModelsUserBadge] = None
    description: Optional[str] = Field(None, title='Description')
    userLabelType: Optional[str] = Field(None, title='Userlabeltype')
    userLabelDisplayType: Optional[str] = Field(None, title='Userlabeldisplaytype')


class Url25(BaseModel):
    urls: Optional[List[Url26]] = Field(None, title='Urls')


class Url31(BaseModel):
    urls: Optional[List[Url32]] = Field(None, title='Urls')


class Url8(BaseModel):
    urls: Optional[List[Url9]] = Field(None, title='Urls')


class UserRefsResult(BaseModel):
    result: Optional[Result17] = None


class UserRefsResult1(BaseModel):
    result: Optional[Result19] = None


class UserResults4(BaseModel):
    result: Optional[Result11] = None


class UserResults7(BaseModel):
    result: Optional[Result23] = None


class UserResults8(BaseModel):
    result: Optional[Result25] = None


class Usertags(BaseModel):
    in_: Optional[List[InItem]] = Field(None, alias='in', title='In')


class Usertags1(BaseModel):
    in_: Optional[List[InItem1]] = Field(None, alias='in', title='In')


class Video(BaseModel):
    video_id: Optional[str] = Field(None, title='Video Id')
    region: Optional[str] = Field(None, title='Region')
    title: Optional[str] = Field(None, title='Title')
    cover: Optional[str] = Field(None, title='Cover')
    duration: Optional[int] = Field(None, title='Duration')
    play: Optional[str] = Field(None, title='Play')
    wmplay: Optional[str] = Field(None, title='Wmplay')
    size: Optional[int] = Field(None, title='Size')
    wm_size: Optional[int] = Field(None, title='Wm Size')
    music: Optional[str] = Field(None, title='Music')
    music_info: Optional[TikTokDLModelsFeedMusicInfo] = None
    play_count: Optional[int] = Field(None, title='Play Count')
    digg_count: Optional[int] = Field(None, title='Digg Count')
    comment_count: Optional[int] = Field(None, title='Comment Count')
    share_count: Optional[int] = Field(None, title='Share Count')
    download_count: Optional[int] = Field(None, title='Download Count')
    collect_count: Optional[int] = Field(None, title='Collect Count')
    create_time: Optional[int] = Field(None, title='Create Time')
    anchors: Optional[List[Anchor]] = Field(None, title='Anchors')
    anchors_extras: Optional[str] = Field(None, title='Anchors Extras')
    is_ad: Optional[bool] = Field(None, title='Is Ad')
    commerce_info: Optional[TikTokDLModelsFeedCommerceInfo] = None
    commercial_video_info: Optional[str] = Field(None, title='Commercial Video Info')
    item_comment_settings: Optional[int] = Field(None, title='Item Comment Settings')
    author: Optional[TikTokDLModelsFeedAuthor] = None
    is_top: Optional[int] = Field(None, title='Is Top')
    id: Optional[str] = Field(None, title='Id')
    images: Optional[List[str]] = Field(None, title='Images')


class YouTubeDLModelsChannelEntry(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    guidislink: Optional[bool] = Field(None, title='Guidislink')
    link: Optional[str] = Field(None, title='Link')
    yt_videoid: Optional[str] = Field(None, title='Yt Videoid')
    yt_channelid: Optional[str] = Field(None, title='Yt Channelid')
    title: Optional[str] = Field(None, title='Title')
    title_detail: Optional[YouTubeDLModelsChannelTitleDetail] = None
    links: Optional[List[YouTubeDLModelsChannelLink]] = Field(None, title='Links')
    authors: Optional[List[YouTubeDLModelsChannelAuthor]] = Field(None, title='Authors')
    author_detail: Optional[AuthorDetail] = None
    href: Optional[str] = Field(None, title='Href')
    author: Optional[str] = Field(None, title='Author')
    published: Optional[str] = Field(None, title='Published')
    published_parsed: Optional[List[int]] = Field(None, title='Published Parsed')
    updated: Optional[str] = Field(None, title='Updated')
    updated_parsed: Optional[float] = Field(None, title='Updated Parsed')
    media_content: Optional[List[MediaContentItem]] = Field(None, title='Media Content')
    media_thumbnail: Optional[List[MediaThumbnailItem]] = Field(
        None, title='Media Thumbnail'
    )
    summary: Optional[str] = Field(None, title='Summary')
    summary_detail: Optional[YouTubeDLModelsChannelSummaryDetail] = None
    media_starrating: Optional[MediaStarrating] = None
    media_statistics: Optional[MediaStatistics] = None
    media_community: Optional[str] = Field(None, title='Media Community')
    published_parshed: Optional[float] = Field(None, title='Published Parshed')


class YouTubeDLModelsChannelFeed(BaseModel):
    links: Optional[List[YouTubeDLModelsChannelLink]] = Field(None, title='Links')
    id: Optional[str] = Field(None, title='Id')
    guidislink: Optional[bool] = Field(None, title='Guidislink')
    link: Optional[str] = Field(None, title='Link')
    yt_channelid: Optional[str] = Field(None, title='Yt Channelid')
    title: Optional[str] = Field(None, title='Title')
    title_detail: Optional[YouTubeDLModelsChannelTitleDetail] = None
    authors: Optional[List[YouTubeDLModelsChannelAuthor]] = Field(None, title='Authors')
    author_detail: Optional[AuthorDetail] = None
    href: Optional[str] = Field(None, title='Href')
    author: Optional[str] = Field(None, title='Author')
    published: Optional[str] = Field(None, title='Published')
    published_parsed: Optional[List[int]] = Field(None, title='Published Parsed')


class YouTubeDLModelsChannelVideos(BaseModel):
    bozo: Optional[bool] = Field(None, title='Bozo')
    entries: Optional[List[YouTubeDLModelsChannelEntry]] = Field(None, title='Entries')
    feed: Optional[YouTubeDLModelsChannelFeed] = None
    version: Optional[str] = Field(None, title='Version')


class AdditionalMediaInfo3(BaseModel):
    monetizable: Optional[bool] = Field(None, title='Monetizable')
    source_user: Optional[TwitterDLModelsPostSourceUser1] = None


class AdvertiserResults(BaseModel):
    result: Optional[Result28] = None


class AffiliatesHighlightedLabel1(BaseModel):
    label: Optional[Label1] = None


class AffiliatesHighlightedLabel2(BaseModel):
    label: Optional[Label2] = None


class AffiliatesHighlightedLabel3(BaseModel):
    label: Optional[Label3] = None


class AffiliatesHighlightedLabel4(BaseModel):
    label: Optional[Label4] = None


class CarouselMediaItem(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    pk: Optional[str] = Field(None, title='Pk')
    accessibility_caption: Optional[str] = Field(None, title='Accessibility Caption')
    is_dash_eligible: Optional[str] = Field(None, title='Is Dash Eligible')
    video_dash_manifest: Optional[str] = Field(None, title='Video Dash Manifest')
    media_type: Optional[int] = Field(None, title='Media Type')
    original_height: Optional[int] = Field(None, title='Original Height')
    original_width: Optional[int] = Field(None, title='Original Width')
    inventory_source: Optional[str] = Field(None, title='Inventory Source')
    user: Optional[str] = Field(None, title='User')
    usertags: Optional[Union[str, Usertags1]] = Field(None, title='Usertags')
    image_versions2: Optional[ImageVersions21] = None
    carousel_parent_id: Optional[str] = Field(None, title='Carousel Parent Id')
    sharing_friction_info: Optional[InstagramDLModelsFeedSharingFrictionInfo] = None
    preview: Optional[str] = Field(None, title='Preview')
    organic_tracking_token: Optional[str] = Field(None, title='Organic Tracking Token')
    saved_collection_ids: Optional[str] = Field(None, title='Saved Collection Ids')
    has_viewer_saved: Optional[str] = Field(None, title='Has Viewer Saved')
    video_versions: Optional[str] = Field(None, title='Video Versions')
    media_overlay_info: Optional[str] = Field(None, title='Media Overlay Info')
    number_of_qualities: Optional[str] = Field(None, title='Number Of Qualities')
    link: Optional[str] = Field(None, title='Link')
    story_cta: Optional[str] = Field(None, title='Story Cta')
    carousel_media: Optional[str] = Field(None, title='Carousel Media')


class ChannelResponse(BaseModel):
    username: Optional[str] = Field(None, title='Username')
    description: Optional[str] = Field(None, title='Description')
    videos: Optional[YouTubeDLModelsChannelVideos] = None


class ClientEventInfo2(BaseModel):
    component: Optional[str] = Field(None, title='Component')
    element: Optional[str] = Field(None, title='Element')
    details: Optional[TwitterDLModelsTimelineDetails1] = None


class ClipsMetadata(BaseModel):
    audio_type: Optional[str] = Field(None, title='Audio Type')
    achievements_info: Optional[AchievementsInfo] = None
    music_info: Optional[Union[str, InstagramDLModelsFeedMusicInfo]] = Field(
        None, title='Music Info'
    )
    original_sound_info: Optional[Union[str, OriginalSoundInfo]] = Field(
        None, title='Original Sound Info'
    )


class Edge6(BaseModel):
    node: Optional[Node6] = None


class EdgeSidecarToChildren(BaseModel):
    edges: Optional[List[Edge6]] = Field(None, title='Edges')


class Entities12(BaseModel):
    description: Optional[Description8] = None
    url: Optional[Url25] = None


class Entities17(BaseModel):
    description: Optional[Description12] = None
    url: Optional[Url31] = None


class Entities6(BaseModel):
    description: Optional[Description3] = None
    url: Optional[Url8] = None


class ImageColorValue(BaseModel):
    palette: Optional[List[PaletteItem]] = Field(None, title='Palette')


class ImageColorValue1(BaseModel):
    palette: Optional[List[PaletteItem1]] = Field(None, title='Palette')


class InstagramDLModelsFeedNode(BaseModel):
    code: Optional[str] = Field(None, title='Code')
    pk: Optional[str] = Field(None, title='Pk')
    id: Optional[str] = Field(None, title='Id')
    ad_id: Optional[str] = Field(None, title='Ad Id')
    boosted_status: Optional[str] = Field(None, title='Boosted Status')
    boost_unavailable_identifier: Optional[str] = Field(
        None, title='Boost Unavailable Identifier'
    )
    boost_unavailable_reason: Optional[str] = Field(
        None, title='Boost Unavailable Reason'
    )
    caption: Optional[InstagramDLModelsFeedCaption] = None
    caption_is_edited: Optional[bool] = Field(None, title='Caption Is Edited')
    feed_demotion_control: Optional[str] = Field(None, title='Feed Demotion Control')
    feed_recs_demotion_control: Optional[str] = Field(
        None, title='Feed Recs Demotion Control'
    )
    taken_at: Optional[int] = Field(None, title='Taken At')
    inventory_source: Optional[str] = Field(None, title='Inventory Source')
    video_versions: Optional[
        Union[str, List[InstagramDLModelsFeedVideoVersion]]
    ] = Field(None, title='Video Versions')
    is_dash_eligible: Optional[Union[int, str]] = Field(None, title='Is Dash Eligible')
    number_of_qualities: Optional[Union[int, str]] = Field(
        None, title='Number Of Qualities'
    )
    video_dash_manifest: Optional[str] = Field(None, title='Video Dash Manifest')
    image_versions2: Optional[InstagramDLModelsFeedImageVersions2] = None
    is_paid_partnership: Optional[bool] = Field(None, title='Is Paid Partnership')
    sponsor_tags: Optional[str] = Field(None, title='Sponsor Tags')
    affiliate_info: Optional[str] = Field(None, title='Affiliate Info')
    original_height: Optional[int] = Field(None, title='Original Height')
    original_width: Optional[int] = Field(None, title='Original Width')
    organic_tracking_token: Optional[str] = Field(None, title='Organic Tracking Token')
    link: Optional[str] = Field(None, title='Link')
    story_cta: Optional[str] = Field(None, title='Story Cta')
    user: Optional[InstagramDLModelsFeedUser] = None
    group: Optional[str] = Field(None, title='Group')
    owner: Optional[InstagramDLModelsFeedOwner] = None
    coauthor_producers: Optional[
        Union[str, List[InstagramDLModelsFeedCoauthorProducer]]
    ] = Field(None, title='Coauthor Producers')
    follow_hashtag_info: Optional[str] = Field(None, title='Follow Hashtag Info')
    title: Optional[str] = Field(None, title='Title')
    comment_count: Optional[int] = Field(None, title='Comment Count')
    comments_disabled: Optional[str] = Field(None, title='Comments Disabled')
    commenting_disabled_for_viewer: Optional[str] = Field(
        None, title='Commenting Disabled For Viewer'
    )
    like_and_view_counts_disabled: Optional[bool] = Field(
        None, title='Like And View Counts Disabled'
    )
    has_liked: Optional[bool] = Field(None, title='Has Liked')
    top_likers: Optional[List] = Field(None, title='Top Likers')
    facepile_top_likers: Optional[Any] = Field(None, title='Facepile Top Likers')
    like_count: Optional[int] = Field(None, title='Like Count')
    preview: Optional[str] = Field(None, title='Preview')
    can_see_insights_as_brand: Optional[bool] = Field(
        None, title='Can See Insights As Brand'
    )
    social_context: Optional[str] = Field(None, title='Social Context')
    view_count: Optional[str] = Field(None, title='View Count')
    can_reshare: Optional[str] = Field(None, title='Can Reshare')
    can_viewer_reshare: Optional[bool] = Field(None, title='Can Viewer Reshare')
    ig_media_sharing_disabled: Optional[bool] = Field(
        None, title='Ig Media Sharing Disabled'
    )
    photo_of_you: Optional[Union[bool, str]] = Field(None, title='Photo Of You')
    product_type: Optional[str] = Field(None, title='Product Type')
    media_type: Optional[int] = Field(None, title='Media Type')
    usertags: Optional[Union[str, Usertags]] = Field(None, title='Usertags')
    media_overlay_info: Optional[str] = Field(None, title='Media Overlay Info')
    carousel_parent_id: Optional[str] = Field(None, title='Carousel Parent Id')
    carousel_media_count: Optional[Union[int, str]] = Field(
        None, title='Carousel Media Count'
    )
    carousel_media: Optional[Union[str, List[CarouselMediaItem]]] = Field(
        None, title='Carousel Media'
    )
    location: Optional[str] = Field(None, title='Location')
    has_audio: Optional[Union[bool, str]] = Field(None, title='Has Audio')
    clips_metadata: Optional[Union[str, ClipsMetadata]] = Field(
        None, title='Clips Metadata'
    )
    clips_attribution_info: Optional[str] = Field(None, title='Clips Attribution Info')
    accessibility_caption: Optional[str] = Field(None, title='Accessibility Caption')
    audience: Optional[str] = Field(None, title='Audience')
    saved_collection_ids: Optional[str] = Field(None, title='Saved Collection Ids')
    has_viewer_saved: Optional[str] = Field(None, title='Has Viewer Saved')
    share_urls: Optional[Any] = Field(None, title='Share Urls')
    visibility: Optional[str] = Field(None, title='Visibility')
    expiring_at: Optional[str] = Field(None, title='Expiring At')
    logging_info_token: Optional[str] = Field(None, title='Logging Info Token')
    sharing_friction_info: Optional[SharingFrictionInfo1] = None
    invited_coauthor_producers: Optional[List] = Field(
        None, title='Invited Coauthor Producers'
    )
    comments: Optional[List] = Field(None, title='Comments')
    headline: Optional[str] = Field(None, title='Headline')
    media_cropping_info: Optional[Union[str, MediaCroppingInfo]] = Field(
        None, title='Media Cropping Info'
    )
    thumbnails: Optional[Union[List, Any]] = Field(None, title='Thumbnails')
    timeline_pinned_user_ids: Optional[str] = Field(
        None, title='Timeline Pinned User Ids'
    )
    upcoming_event: Optional[str] = Field(None, title='Upcoming Event')
    explore: Optional[str] = Field(None, title='Explore')
    main_feed_carousel_starting_media_id: Optional[str] = Field(
        None, title='Main Feed Carousel Starting Media Id'
    )
    is_seen: Optional[str] = Field(None, title='Is Seen')
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')


class InstagramDLModelsPostEdge1(BaseModel):
    node: Optional[InstagramDLModelsPostNode1] = None


class InstagramDLModelsPostEdge2(BaseModel):
    node: Optional[InstagramDLModelsPostNode2] = None


class InstagramDLModelsPostEdge4(BaseModel):
    node: Optional[InstagramDLModelsPostNode4] = None


class InstagramDLModelsStoryItem(BaseModel):
    pk: Optional[str] = Field(None, title='Pk')
    id: Optional[str] = Field(None, title='Id')
    viewer_count: None = Field(None, title='Viewer Count')
    video_duration: Optional[float] = Field(None, title='Video Duration')
    media_type: Optional[int] = Field(None, title='Media Type')
    is_video: Optional[bool] = Field(False, title='Is Video')
    taken_at: Optional[int] = Field(None, title='Taken At')
    has_audio: Optional[bool] = Field(None, title='Has Audio')
    story_music_stickers: Optional[List[StoryMusicSticker]] = Field(
        None, title='Story Music Stickers'
    )
    is_paid_partnership: Optional[bool] = Field(None, title='Is Paid Partnership')
    sponsor_tags: None = Field(None, title='Sponsor Tags')
    reshared_story_media_author: None = Field(None, title='Reshared Story Media Author')
    story_app_attribution: None = Field(None, title='Story App Attribution')
    story_feed_media: None = Field(None, title='Story Feed Media')
    has_translation: Optional[bool] = Field(None, title='Has Translation')
    is_dash_eligible: Optional[int] = Field(None, title='Is Dash Eligible')
    number_of_qualities: Optional[int] = Field(None, title='Number Of Qualities')
    video_dash_manifest: Optional[str] = Field(None, title='Video Dash Manifest')
    boosted_status: None = Field(None, title='Boosted Status')
    sharing_friction_info: Optional[InstagramDLModelsStorySharingFrictionInfo] = None
    media_overlay_info: None = Field(None, title='Media Overlay Info')
    image_versions2: Optional[InstagramDLModelsStoryImageVersions2] = None
    organic_tracking_token: Optional[str] = Field(None, title='Organic Tracking Token')
    boost_unavailable_identifier: None = Field(
        None, title='Boost Unavailable Identifier'
    )
    boost_unavailable_reason: None = Field(None, title='Boost Unavailable Reason')
    product_type: Optional[str] = Field(None, title='Product Type')
    has_liked: Optional[bool] = Field(None, title='Has Liked')
    audience: None = Field(None, title='Audience')
    can_viewer_reshare: None = Field(None, title='Can Viewer Reshare')
    expiring_at: Optional[int] = Field(None, title='Expiring At')
    ig_media_sharing_disabled: Optional[bool] = Field(
        None, title='Ig Media Sharing Disabled'
    )
    user: Optional[InstagramDLModelsStoryUser] = None
    accessibility_caption: None = Field(None, title='Accessibility Caption')
    video_versions: Optional[List[InstagramDLModelsStoryVideoVersion]] = Field(
        None, title='Video Versions'
    )
    can_see_insights_as_brand: Optional[bool] = Field(
        None, title='Can See Insights As Brand'
    )
    story_cta: None = Field(None, title='Story Cta')
    viewers: None = Field(None, title='Viewers')
    can_reply: Optional[bool] = Field(None, title='Can Reply')
    can_reshare: Optional[bool] = Field(None, title='Can Reshare')
    original_width: Optional[int] = Field(None, title='Original Width')
    original_height: Optional[int] = Field(None, title='Original Height')
    carousel_media_count: None = Field(None, title='Carousel Media Count')
    carousel_media: None = Field(None, title='Carousel Media')
    story_countdowns: None = Field(None, title='Story Countdowns')
    story_questions: None = Field(None, title='Story Questions')
    story_sliders: None = Field(None, title='Story Sliders')
    inventory_source: None = Field(None, title='Inventory Source')
    visual_comment_reply_sticker_info: None = Field(
        None, title='Visual Comment Reply Sticker Info'
    )
    story_bloks_stickers: Optional[List[StoryBloksSticker]] = Field(
        None, title='Story Bloks Stickers'
    )
    story_link_stickers: Optional[List[StoryLinkSticker]] = Field(
        None, title='Story Link Stickers'
    )
    story_hashtags: None = Field(None, title='Story Hashtags')
    story_locations: Optional[List[StoryLocation]] = Field(
        None, title='Story Locations'
    )
    text_post_share_to_ig_story_stickers: None = Field(
        None, title='Text Post Share To Ig Story Stickers'
    )
    preview: None = Field(None, title='Preview')
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')


class InstagramDLModelsUserEdge1(BaseModel):
    node: Optional[InstagramDLModelsUserNode1] = None


class InstagramDLModelsUserEdge4(BaseModel):
    node: Optional[InstagramDLModelsUserNode4] = None


class InstagramDLModelsUserEdgeMediaToTaggedUser(BaseModel):
    edges: Optional[List[InstagramDLModelsUserEdge1]] = Field(None, title='Edges')


class InstagramDLModelsUserNode(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    id: Optional[str] = Field(None, title='Id')
    shortcode: Optional[str] = Field(None, title='Shortcode')
    dimensions: Optional[InstagramDLModelsUserDimensions] = None
    display_url: Optional[str] = Field(None, title='Display Url')
    edge_media_to_tagged_user: Optional[
        InstagramDLModelsUserEdgeMediaToTaggedUser
    ] = None
    fact_check_overall_rating: None = Field(None, title='Fact Check Overall Rating')
    fact_check_information: None = Field(None, title='Fact Check Information')
    gating_info: None = Field(None, title='Gating Info')
    sharing_friction_info: Optional[InstagramDLModelsUserSharingFrictionInfo] = None
    media_overlay_info: None = Field(None, title='Media Overlay Info')
    media_preview: Optional[str] = Field(None, title='Media Preview')
    owner: Optional[InstagramDLModelsUserOwner] = None
    is_video: Optional[bool] = Field(None, title='Is Video')
    has_upcoming_event: Optional[bool] = Field(None, title='Has Upcoming Event')
    accessibility_caption: None = Field(None, title='Accessibility Caption')
    dash_info: Optional[InstagramDLModelsUserDashInfo] = None
    has_audio: Optional[bool] = Field(None, title='Has Audio')
    tracking_token: Optional[str] = Field(None, title='Tracking Token')
    video_url: Optional[str] = Field(None, title='Video Url')
    video_view_count: Optional[int] = Field(None, title='Video View Count')
    edge_media_to_caption: Optional[InstagramDLModelsUserEdgeMediaToCaption] = None
    edge_media_to_comment: Optional[EdgeMediaToComment] = None
    comments_disabled: Optional[bool] = Field(None, title='Comments Disabled')
    taken_at_timestamp: Optional[int] = Field(None, title='Taken At Timestamp')
    edge_liked_by: Optional[InstagramDLModelsUserEdgeLikedBy] = None
    edge_media_preview_like: Optional[InstagramDLModelsUserEdgeMediaPreviewLike] = None
    location: None = Field(None, title='Location')
    nft_asset_info: None = Field(None, title='Nft Asset Info')
    thumbnail_src: Optional[str] = Field(None, title='Thumbnail Src')
    thumbnail_resources: Optional[List[ThumbnailResource]] = Field(
        None, title='Thumbnail Resources'
    )
    felix_profile_grid_crop: Optional[FelixProfileGridCrop] = None
    coauthor_producers: Optional[List] = Field(None, title='Coauthor Producers')
    pinned_for_users: Optional[List] = Field(None, title='Pinned For Users')
    viewer_can_reshare: Optional[bool] = Field(None, title='Viewer Can Reshare')
    encoding_status: None = Field(None, title='Encoding Status')
    is_published: Optional[bool] = Field(None, title='Is Published')
    product_type: Optional[str] = Field(None, title='Product Type')
    title: Optional[str] = Field(None, title='Title')
    video_duration: Optional[float] = Field(None, title='Video Duration')


class Legacy14(BaseModel):
    can_dm: Optional[bool] = Field(None, title='Can Dm')
    can_media_tag: Optional[bool] = Field(None, title='Can Media Tag')
    created_at: Optional[str] = Field(None, title='Created At')
    default_profile: Optional[bool] = Field(None, title='Default Profile')
    default_profile_image: Optional[bool] = Field(None, title='Default Profile Image')
    description: Optional[str] = Field(None, title='Description')
    entities: Optional[Entities12] = None
    fast_followers_count: Optional[int] = Field(None, title='Fast Followers Count')
    favourites_count: Optional[int] = Field(None, title='Favourites Count')
    followers_count: Optional[int] = Field(None, title='Followers Count')
    friends_count: Optional[int] = Field(None, title='Friends Count')
    has_custom_timelines: Optional[bool] = Field(None, title='Has Custom Timelines')
    is_translator: Optional[bool] = Field(None, title='Is Translator')
    listed_count: Optional[int] = Field(None, title='Listed Count')
    location: Optional[str] = Field(None, title='Location')
    media_count: Optional[int] = Field(None, title='Media Count')
    name: Optional[str] = Field(None, title='Name')
    normal_followers_count: Optional[int] = Field(None, title='Normal Followers Count')
    pinned_tweet_ids_str: Optional[List[str]] = Field(
        None, title='Pinned Tweet Ids Str'
    )
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    profile_banner_url: Optional[str] = Field(None, title='Profile Banner Url')
    profile_image_url_https: Optional[str] = Field(
        None, title='Profile Image Url Https'
    )
    profile_interstitial_type: Optional[str] = Field(
        None, title='Profile Interstitial Type'
    )
    screen_name: Optional[str] = Field(None, title='Screen Name')
    statuses_count: Optional[int] = Field(None, title='Statuses Count')
    translator_type: Optional[str] = Field(None, title='Translator Type')
    url: Optional[str] = Field(None, title='Url')
    verified: Optional[bool] = Field(None, title='Verified')
    verified_type: Optional[str] = Field(None, title='Verified Type')
    want_retweets: Optional[bool] = Field(None, title='Want Retweets')
    withheld_in_countries: Optional[List] = Field(None, title='Withheld In Countries')


class Legacy19(BaseModel):
    can_dm: Optional[bool] = Field(None, title='Can Dm')
    can_media_tag: Optional[bool] = Field(None, title='Can Media Tag')
    created_at: Optional[str] = Field(None, title='Created At')
    default_profile: Optional[bool] = Field(None, title='Default Profile')
    default_profile_image: Optional[bool] = Field(None, title='Default Profile Image')
    description: Optional[str] = Field(None, title='Description')
    entities: Optional[Entities17] = None
    fast_followers_count: Optional[int] = Field(None, title='Fast Followers Count')
    favourites_count: Optional[int] = Field(None, title='Favourites Count')
    followers_count: Optional[int] = Field(None, title='Followers Count')
    friends_count: Optional[int] = Field(None, title='Friends Count')
    has_custom_timelines: Optional[bool] = Field(None, title='Has Custom Timelines')
    is_translator: Optional[bool] = Field(None, title='Is Translator')
    listed_count: Optional[int] = Field(None, title='Listed Count')
    location: Optional[str] = Field(None, title='Location')
    media_count: Optional[int] = Field(None, title='Media Count')
    name: Optional[str] = Field(None, title='Name')
    normal_followers_count: Optional[int] = Field(None, title='Normal Followers Count')
    pinned_tweet_ids_str: Optional[List[str]] = Field(
        None, title='Pinned Tweet Ids Str'
    )
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    profile_banner_url: Optional[str] = Field(None, title='Profile Banner Url')
    profile_image_url_https: Optional[str] = Field(
        None, title='Profile Image Url Https'
    )
    profile_interstitial_type: Optional[str] = Field(
        None, title='Profile Interstitial Type'
    )
    screen_name: Optional[str] = Field(None, title='Screen Name')
    statuses_count: Optional[int] = Field(None, title='Statuses Count')
    translator_type: Optional[str] = Field(None, title='Translator Type')
    url: Optional[str] = Field(None, title='Url')
    verified: Optional[bool] = Field(None, title='Verified')
    want_retweets: Optional[bool] = Field(None, title='Want Retweets')
    withheld_in_countries: Optional[List] = Field(None, title='Withheld In Countries')
    verified_type: Optional[str] = Field(None, title='Verified Type')


class Legacy6(BaseModel):
    can_dm: Optional[bool] = Field(None, title='Can Dm')
    can_media_tag: Optional[bool] = Field(None, title='Can Media Tag')
    created_at: Optional[str] = Field(None, title='Created At')
    default_profile: Optional[bool] = Field(None, title='Default Profile')
    default_profile_image: Optional[bool] = Field(None, title='Default Profile Image')
    description: Optional[str] = Field(None, title='Description')
    entities: Optional[Entities6] = None
    fast_followers_count: Optional[int] = Field(None, title='Fast Followers Count')
    favourites_count: Optional[int] = Field(None, title='Favourites Count')
    followers_count: Optional[int] = Field(None, title='Followers Count')
    friends_count: Optional[int] = Field(None, title='Friends Count')
    has_custom_timelines: Optional[bool] = Field(None, title='Has Custom Timelines')
    is_translator: Optional[bool] = Field(None, title='Is Translator')
    listed_count: Optional[int] = Field(None, title='Listed Count')
    location: Optional[str] = Field(None, title='Location')
    media_count: Optional[int] = Field(None, title='Media Count')
    name: Optional[str] = Field(None, title='Name')
    normal_followers_count: Optional[int] = Field(None, title='Normal Followers Count')
    pinned_tweet_ids_str: Optional[List] = Field(None, title='Pinned Tweet Ids Str')
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    profile_banner_url: Optional[str] = Field(None, title='Profile Banner Url')
    profile_image_url_https: Optional[str] = Field(
        None, title='Profile Image Url Https'
    )
    profile_interstitial_type: Optional[str] = Field(
        None, title='Profile Interstitial Type'
    )
    screen_name: Optional[str] = Field(None, title='Screen Name')
    statuses_count: Optional[int] = Field(None, title='Statuses Count')
    translator_type: Optional[str] = Field(None, title='Translator Type')
    url: Optional[str] = Field(None, title='Url')
    verified: Optional[bool] = Field(None, title='Verified')
    verified_type: Optional[str] = Field(None, title='Verified Type')
    want_retweets: Optional[bool] = Field(None, title='Want Retweets')
    withheld_in_countries: Optional[List] = Field(None, title='Withheld In Countries')


class MediaItem4(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    id_str: Optional[str] = Field(None, title='Id Str')
    indices: Optional[List[int]] = Field(None, title='Indices')
    media_key: Optional[str] = Field(None, title='Media Key')
    media_url_https: Optional[str] = Field(None, title='Media Url Https')
    type: Optional[str] = Field(None, title='Type')
    url: Optional[str] = Field(None, title='Url')
    additional_media_info: Optional[TwitterDLModelsTimelineAdditionalMediaInfo2] = None
    ext_media_availability: Optional[TwitterDLModelsTimelineExtMediaAvailability] = None
    sizes: Optional[Sizes4] = None
    original_info: Optional[OriginalInfo4] = None
    video_info: Optional[TwitterDLModelsTimelineVideoInfo2] = None
    media_results: Optional[MediaResults4] = None
    features: Optional[Features4] = None
    allow_download_status: Optional[AllowDownloadStatus] = None


class MediaItem5(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    id_str: Optional[str] = Field(None, title='Id Str')
    indices: Optional[List[int]] = Field(None, title='Indices')
    media_key: Optional[str] = Field(None, title='Media Key')
    media_url_https: Optional[str] = Field(None, title='Media Url Https')
    type: Optional[str] = Field(None, title='Type')
    url: Optional[str] = Field(None, title='Url')
    additional_media_info: Optional[TwitterDLModelsTimelineAdditionalMediaInfo2] = None
    ext_media_availability: Optional[TwitterDLModelsTimelineExtMediaAvailability] = None
    sizes: Optional[Sizes5] = None
    original_info: Optional[OriginalInfo5] = None
    video_info: Optional[TwitterDLModelsTimelineVideoInfo3] = None
    media_results: Optional[MediaResults5] = None
    features: Optional[Features5] = None
    allow_download_status: Optional[AllowDownloadStatus] = None


class NoteTweetResults(BaseModel):
    result: Optional[Result18] = None


class PinterestReverseData(BaseModel):
    dominant_color: Optional[str] = Field(None, title='Dominant Color')
    is_unsafe: Optional[bool] = Field(None, title='Is Unsafe')
    is_full_width: Optional[bool] = Field(None, title='Is Full Width')
    image_square_url: Optional[AnyUrl] = Field(None, title='Image Square Url')
    share_count: Optional[int] = Field(None, title='Share Count')
    done_by_me: Optional[bool] = Field(None, title='Done By Me')
    images: Optional[DatumImages] = None
    is_cpc_ad: Optional[bool] = Field(None, title='Is Cpc Ad')
    is_whitelisted_for_tried_it: Optional[bool] = Field(
        None, title='Is Whitelisted For Tried It'
    )
    comment_reply_comment_id: Optional[str] = Field(
        None, title='Comment Reply Comment Id'
    )
    image_medium_url: Optional[AnyUrl] = Field(None, title='Image Medium Url')
    promoted_is_removable: Optional[bool] = Field(None, title='Promoted Is Removable')
    is_eligible_for_pdp_plus: Optional[bool] = Field(
        None, title='Is Eligible For Pdp Plus'
    )
    aggregated_pin_data: Optional[PinterestDLModelsReverseAggregatedPinData] = None
    image_signature: Optional[str] = Field(None, title='Image Signature')
    title: Optional[str] = Field(None, title='Title')
    view_tags: Optional[List] = Field(None, title='View Tags')
    created_at: Optional[str] = Field(None, title='Created At')
    reaction_counts: Optional[PinterestDLModelsReverseReactionCounts] = None
    is_repin: Optional[bool] = Field(None, title='Is Repin')
    additional_hide_reasons: Optional[List] = Field(
        None, title='Additional Hide Reasons'
    )
    is_year_in_preview: Optional[bool] = Field(None, title='Is Year In Preview')
    destination_url_type: Optional[int] = Field(None, title='Destination Url Type')
    is_shopping_ad: Optional[bool] = Field(None, title='Is Shopping Ad')
    is_native: Optional[bool] = Field(None, title='Is Native')
    image_crop: Optional[ImageCrop] = None
    domain: Optional[str] = Field(None, title='Domain')
    is_eligible_for_brand_catalog: Optional[bool] = Field(
        None, title='Is Eligible For Brand Catalog'
    )
    top_interest: Optional[int] = Field(None, title='Top Interest')
    board: Optional[PinterestDLModelsReverseBoard] = None
    tracking_params: Optional[str] = Field(None, title='Tracking Params')
    is_eligible_for_pdp: Optional[bool] = Field(None, title='Is Eligible For Pdp')
    pinner: Optional[PinterestDLModelsReverseNativeCreator] = None
    is_unsafe_for_comments: Optional[bool] = Field(None, title='Is Unsafe For Comments')
    native_creator: Optional[PinterestDLModelsReverseNativeCreator] = None
    shopping_flags: Optional[List] = Field(None, title='Shopping Flags')
    category: Optional[str] = Field(None, title='Category')
    is_eligible_for_aggregated_comments: Optional[bool] = Field(
        None, title='Is Eligible For Aggregated Comments'
    )
    is_scene: Optional[bool] = Field(None, title='Is Scene')
    comment_count: Optional[int] = Field(None, title='Comment Count')
    is_promoted: Optional[bool] = Field(None, title='Is Promoted')
    question_comment_id: Optional[str] = Field(None, title='Question Comment Id')
    is_ghost: Optional[bool] = Field(None, title='Is Ghost')
    cacheable_id: Optional[str] = Field(None, title='Cacheable Id')
    is_downstream_promotion: Optional[bool] = Field(
        None, title='Is Downstream Promotion'
    )
    ip_eligible_for_stela: Optional[bool] = Field(None, title='Ip Eligible For Stela')
    should_open_in_stream: Optional[bool] = Field(None, title='Should Open In Stream')
    ad_match_reason: Optional[int] = Field(None, title='Ad Match Reason')
    description: Optional[str] = Field(None, title='Description')
    promoted_is_quiz: Optional[bool] = Field(None, title='Promoted Is Quiz')
    id: Optional[str] = Field(None, title='Id')
    promoted_is_showcase: Optional[bool] = Field(None, title='Promoted Is Showcase')
    repin_count: Optional[int] = Field(None, title='Repin Count')
    promoted_is_max_video: Optional[bool] = Field(None, title='Promoted Is Max Video')
    ad_data: Optional[AdData] = None
    type: Optional[str] = Field(None, title='Type')
    is_eligible_for_web_closeup: Optional[bool] = Field(
        None, title='Is Eligible For Web Closeup'
    )
    should_preload: Optional[bool] = Field(None, title='Should Preload')
    virtual_try_on_type: Optional[int] = Field(None, title='Virtual Try On Type')
    is_premiere: Optional[bool] = Field(None, title='Is Premiere')
    is_video: Optional[bool] = Field(None, title='Is Video')
    comments_disabled: Optional[bool] = Field(None, title='Comments Disabled')
    music_attributions: Optional[List] = Field(None, title='Music Attributions')
    is_stale_product: Optional[bool] = Field(None, title='Is Stale Product')
    is_eligible_for_related_products: Optional[bool] = Field(
        None, title='Is Eligible For Related Products'
    )
    promoted_is_lead_ad: Optional[bool] = Field(None, title='Promoted Is Lead Ad')
    is_oos_product: Optional[bool] = Field(None, title='Is Oos Product')
    creative_types: Optional[List[str]] = Field(None, title='Creative Types')
    grid_title: Optional[str] = Field(None, title='Grid Title')
    rich_summary: Optional[RichSummary] = None
    link: Optional[AnyUrl] = Field(None, title='Link')
    tracked_link: Optional[AnyUrl] = Field(None, title='Tracked Link')
    embed: Optional[Embed] = None
    origin_pinner: Optional[PinterestDLModelsReverseNativeCreator] = None
    story_pin_data: Optional[StoryPinData] = None
    should_mute: Optional[bool] = Field(None, title='Should Mute')
    videos: Optional[PinterestDLModelsReverseVideos] = None


class PinterestReverseResult(BaseModel):
    code: Optional[int] = Field(None, title='Code')
    additional_metadata: Optional[str] = Field(None, title='Additional Metadata')
    search_identifier: Optional[str] = Field(None, title='Search Identifier')
    endpoint_name: Optional[str] = Field(None, title='Endpoint Name')
    data: Optional[List[PinterestReverseData]] = Field(None, title='Data')
    bookmark: Optional[str] = Field(None, title='Bookmark')
    status: Optional[str] = Field(None, title='Status')
    is_single_prominent_object: Optional[bool] = Field(
        None, title='Is Single Prominent Object'
    )
    url: Optional[str] = Field(None, title='Url')
    message: Optional[str] = Field(None, title='Message')


class PostResponse(BaseModel):
    code: Optional[int] = Field(None, title='Code')
    msg: Optional[str] = Field(None, title='Msg')
    processed_time: Optional[float] = Field(None, title='Processed Time')
    data: Optional[TikTokDLModelsPostData] = None


class PromotedMetadata(BaseModel):
    advertiser_results: Optional[AdvertiserResults] = None
    adMetadataContainer: Optional[AdMetadataContainer] = None
    disclosureType: Optional[str] = Field(None, title='Disclosuretype')
    experimentValues: Optional[List[ExperimentValue]] = Field(
        None, title='Experimentvalues'
    )
    impressionId: Optional[str] = Field(None, title='Impressionid')
    impressionString: Optional[str] = Field(None, title='Impressionstring')
    clickTrackingInfo: Optional[ClickTrackingInfo] = None


class Reason(BaseModel):
    description: Optional[TwitterDLModelsUserDescription1] = None
    verified_since_msec: Optional[str] = Field(None, title='Verified Since Msec')
    override_verified_year: Optional[int] = Field(None, title='Override Verified Year')


class ReelsMediaItem(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    items: Optional[List[InstagramDLModelsStoryItem]] = Field(None, title='Items')
    user: Optional[InstagramDLModelsStoryUser1] = None
    seen: Optional[int] = Field(None, title='Seen')
    title: None = Field(None, title='Title')
    cover_media: None = Field(None, title='Cover Media')
    reel_type: Optional[str] = Field(None, title='Reel Type')


class Result14(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    id: Optional[str] = Field(None, title='Id')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    affiliates_highlighted_label: Optional[AffiliatesHighlightedLabel3] = None
    has_graduated_access: Optional[bool] = Field(None, title='Has Graduated Access')
    is_blue_verified: Optional[bool] = Field(None, title='Is Blue Verified')
    profile_image_shape: Optional[str] = Field(None, title='Profile Image Shape')
    legacy: Optional[Legacy8] = None
    professional: Optional[TwitterDLModelsTimelineProfessional3] = None
    super_follow_eligible: Optional[bool] = Field(None, title='Super Follow Eligible')


class Result21(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    id: Optional[str] = Field(None, title='Id')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    affiliates_highlighted_label: Optional[AffiliatesHighlightedLabel4] = None
    has_graduated_access: Optional[bool] = Field(None, title='Has Graduated Access')
    is_blue_verified: Optional[bool] = Field(None, title='Is Blue Verified')
    profile_image_shape: Optional[str] = Field(None, title='Profile Image Shape')
    legacy: Optional[Legacy14] = None
    professional: Optional[Professional6] = None
    super_follow_eligible: Optional[bool] = Field(None, title='Super Follow Eligible')


class Result26(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    text: Optional[str] = Field(None, title='Text')
    entity_set: Optional[EntitySet1] = None
    richtext: Optional[Richtext1] = None
    media: Optional[Media] = None


class Result29(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    id: Optional[str] = Field(None, title='Id')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    affiliates_highlighted_label: Optional[Dict[str, Any]] = Field(
        None, title='Affiliates Highlighted Label'
    )
    has_graduated_access: Optional[bool] = Field(None, title='Has Graduated Access')
    is_blue_verified: Optional[bool] = Field(None, title='Is Blue Verified')
    profile_image_shape: Optional[str] = Field(None, title='Profile Image Shape')
    legacy: Optional[Legacy19] = None
    professional: Optional[Professional10] = None
    super_follow_eligible: Optional[bool] = Field(None, title='Super Follow Eligible')


class SourceUser2(BaseModel):
    user_results: Optional[UserResults7] = None


class SourceUser3(BaseModel):
    user_results: Optional[UserResults8] = None


class ThreadsDLModelsGraphQLPostEdge(BaseModel):
    node: Optional[ThreadsDLModelsGraphQLPostNode] = None
    cursor: Optional[str] = Field(None, title='Cursor')


class TikTokDLModelsFeedData(BaseModel):
    videos: Optional[List[Video]] = Field(None, title='Videos')
    cursor: Optional[str] = Field(None, title='Cursor')
    hasMore: Optional[bool] = Field(None, title='Hasmore')


class TwitterDLModelsPostClientEventInfo(BaseModel):
    details: Optional[TwitterDLModelsPostDetails] = None


class TwitterDLModelsPostCore1(BaseModel):
    user_results: Optional[TwitterDLModelsPostUserResults1] = None


class TwitterDLModelsPostEntities(BaseModel):
    description: Optional[TwitterDLModelsPostDescription] = None
    url: Optional[TwitterDLModelsPostUrl] = None


class TwitterDLModelsPostLegacy(BaseModel):
    can_dm: Optional[bool] = Field(None, title='Can Dm')
    can_media_tag: Optional[bool] = Field(None, title='Can Media Tag')
    created_at: Optional[str] = Field(None, title='Created At')
    default_profile: Optional[bool] = Field(None, title='Default Profile')
    default_profile_image: Optional[bool] = Field(None, title='Default Profile Image')
    description: Optional[str] = Field(None, title='Description')
    entities: Optional[TwitterDLModelsPostEntities] = None
    fast_followers_count: Optional[int] = Field(None, title='Fast Followers Count')
    favourites_count: Optional[int] = Field(None, title='Favourites Count')
    followers_count: Optional[int] = Field(None, title='Followers Count')
    friends_count: Optional[int] = Field(None, title='Friends Count')
    has_custom_timelines: Optional[bool] = Field(None, title='Has Custom Timelines')
    is_translator: Optional[bool] = Field(None, title='Is Translator')
    listed_count: Optional[int] = Field(None, title='Listed Count')
    location: Optional[str] = Field(None, title='Location')
    media_count: Optional[int] = Field(None, title='Media Count')
    name: Optional[str] = Field(None, title='Name')
    normal_followers_count: Optional[int] = Field(None, title='Normal Followers Count')
    pinned_tweet_ids_str: Optional[List] = Field(None, title='Pinned Tweet Ids Str')
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    profile_banner_url: Optional[str] = Field(None, title='Profile Banner Url')
    profile_image_url_https: Optional[str] = Field(
        None, title='Profile Image Url Https'
    )
    profile_interstitial_type: Optional[str] = Field(
        None, title='Profile Interstitial Type'
    )
    screen_name: Optional[str] = Field(None, title='Screen Name')
    statuses_count: Optional[int] = Field(None, title='Statuses Count')
    translator_type: Optional[str] = Field(None, title='Translator Type')
    url: Optional[str] = Field(None, title='Url')
    verified: Optional[bool] = Field(None, title='Verified')
    verified_type: Optional[str] = Field(None, title='Verified Type')
    want_retweets: Optional[bool] = Field(None, title='Want Retweets')
    withheld_in_countries: Optional[List] = Field(None, title='Withheld In Countries')


class TwitterDLModelsPostMediaItem(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    id_str: Optional[str] = Field(None, title='Id Str')
    indices: Optional[List[int]] = Field(None, title='Indices')
    media_key: Optional[str] = Field(None, title='Media Key')
    media_url_https: Optional[str] = Field(None, title='Media Url Https')
    type: Optional[str] = Field(None, title='Type')
    url: Optional[str] = Field(None, title='Url')
    additional_media_info: Optional[TwitterDLModelsPostAdditionalMediaInfo] = None
    ext_media_availability: Optional[TwitterDLModelsPostExtMediaAvailability] = None
    sizes: Optional[TwitterDLModelsPostSizes] = None
    original_info: Optional[TwitterDLModelsPostOriginalInfo] = None
    video_info: Optional[TwitterDLModelsPostVideoInfo] = None
    media_results: Optional[TwitterDLModelsPostMediaResults] = None


class TwitterDLModelsPostMediaItem1(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    id_str: Optional[str] = Field(None, title='Id Str')
    indices: Optional[List[int]] = Field(None, title='Indices')
    media_key: Optional[str] = Field(None, title='Media Key')
    media_url_https: Optional[str] = Field(None, title='Media Url Https')
    type: Optional[str] = Field(None, title='Type')
    url: Optional[str] = Field(None, title='Url')
    additional_media_info: Optional[TwitterDLModelsPostAdditionalMediaInfo] = None
    ext_media_availability: Optional[TwitterDLModelsPostExtMediaAvailability] = None
    sizes: Optional[TwitterDLModelsPostSizes1] = None
    original_info: Optional[TwitterDLModelsPostOriginalInfo] = None
    video_info: Optional[TwitterDLModelsPostVideoInfo1] = None
    media_results: Optional[TwitterDLModelsPostMediaResults1] = None


class TwitterDLModelsPostMediaItem3(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    id_str: Optional[str] = Field(None, title='Id Str')
    indices: Optional[List[int]] = Field(None, title='Indices')
    media_key: Optional[str] = Field(None, title='Media Key')
    media_url_https: Optional[str] = Field(None, title='Media Url Https')
    source_status_id_str: Optional[str] = Field(None, title='Source Status Id Str')
    source_user_id_str: Optional[str] = Field(None, title='Source User Id Str')
    type: Optional[str] = Field(None, title='Type')
    url: Optional[str] = Field(None, title='Url')
    additional_media_info: Optional[AdditionalMediaInfo3] = None
    ext_media_availability: Optional[TwitterDLModelsPostExtMediaAvailability] = None
    sizes: Optional[TwitterDLModelsPostSizes3] = None
    original_info: Optional[TwitterDLModelsPostOriginalInfo] = None
    video_info: Optional[TwitterDLModelsPostVideoInfo3] = None
    media_results: Optional[TwitterDLModelsPostMediaResults3] = None
    ext_alt_text: Optional[str] = Field(None, title='Ext Alt Text')


class TwitterDLModelsPostResult1(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    id: Optional[str] = Field(None, title='Id')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    affiliates_highlighted_label: Optional[Dict[str, Any]] = Field(
        None, title='Affiliates Highlighted Label'
    )
    has_graduated_access: Optional[bool] = Field(None, title='Has Graduated Access')
    is_blue_verified: Optional[bool] = Field(None, title='Is Blue Verified')
    profile_image_shape: Optional[str] = Field(None, title='Profile Image Shape')
    legacy: Optional[TwitterDLModelsPostLegacy] = None
    professional: Optional[TwitterDLModelsPostProfessional] = None


class TwitterDLModelsPostSourceUser(BaseModel):
    user_results: Optional[TwitterDLModelsPostUserResults2] = None


class TwitterDLModelsPostUserResults(BaseModel):
    result: Optional[TwitterDLModelsPostResult1] = None


class TwitterDLModelsTimelineAffiliatesHighlightedLabel(BaseModel):
    label: Optional[TwitterDLModelsTimelineLabel] = None


class TwitterDLModelsTimelineClientEventInfo1(BaseModel):
    component: Optional[str] = Field(None, title='Component')
    element: Optional[str] = Field(None, title='Element')
    details: Optional[TwitterDLModelsTimelineDetails] = None


class TwitterDLModelsTimelineEntities1(BaseModel):
    description: Optional[TwitterDLModelsTimelineDescription] = None
    url: Optional[TwitterDLModelsTimelineUrl2] = None


class TwitterDLModelsTimelineLegacy1(BaseModel):
    can_dm: Optional[bool] = Field(None, title='Can Dm')
    can_media_tag: Optional[bool] = Field(None, title='Can Media Tag')
    created_at: Optional[str] = Field(None, title='Created At')
    default_profile: Optional[bool] = Field(None, title='Default Profile')
    default_profile_image: Optional[bool] = Field(None, title='Default Profile Image')
    description: Optional[str] = Field(None, title='Description')
    entities: Optional[TwitterDLModelsTimelineEntities1] = None
    fast_followers_count: Optional[int] = Field(None, title='Fast Followers Count')
    favourites_count: Optional[int] = Field(None, title='Favourites Count')
    followers_count: Optional[int] = Field(None, title='Followers Count')
    friends_count: Optional[int] = Field(None, title='Friends Count')
    has_custom_timelines: Optional[bool] = Field(None, title='Has Custom Timelines')
    is_translator: Optional[bool] = Field(None, title='Is Translator')
    listed_count: Optional[int] = Field(None, title='Listed Count')
    location: Optional[str] = Field(None, title='Location')
    media_count: Optional[int] = Field(None, title='Media Count')
    name: Optional[str] = Field(None, title='Name')
    normal_followers_count: Optional[int] = Field(None, title='Normal Followers Count')
    pinned_tweet_ids_str: Optional[List] = Field(None, title='Pinned Tweet Ids Str')
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    profile_banner_url: Optional[str] = Field(None, title='Profile Banner Url')
    profile_image_url_https: Optional[str] = Field(
        None, title='Profile Image Url Https'
    )
    profile_interstitial_type: Optional[str] = Field(
        None, title='Profile Interstitial Type'
    )
    screen_name: Optional[str] = Field(None, title='Screen Name')
    statuses_count: Optional[int] = Field(None, title='Statuses Count')
    translator_type: Optional[str] = Field(None, title='Translator Type')
    url: Optional[str] = Field(None, title='Url')
    verified: Optional[bool] = Field(None, title='Verified')
    want_retweets: Optional[bool] = Field(None, title='Want Retweets')
    withheld_in_countries: Optional[List] = Field(None, title='Withheld In Countries')


class TwitterDLModelsTimelineMediaItem(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    id_str: Optional[str] = Field(None, title='Id Str')
    indices: Optional[List[int]] = Field(None, title='Indices')
    media_key: Optional[str] = Field(None, title='Media Key')
    media_url_https: Optional[str] = Field(None, title='Media Url Https')
    type: Optional[str] = Field(None, title='Type')
    url: Optional[str] = Field(None, title='Url')
    ext_media_availability: Optional[TwitterDLModelsTimelineExtMediaAvailability] = None
    features: Optional[Features] = None
    sizes: Optional[TwitterDLModelsTimelineSizes] = None
    original_info: Optional[TwitterDLModelsTimelineOriginalInfo] = None
    media_results: Optional[TwitterDLModelsTimelineMediaResults] = None


class TwitterDLModelsTimelineMediaItem1(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    id_str: Optional[str] = Field(None, title='Id Str')
    indices: Optional[List[int]] = Field(None, title='Indices')
    media_key: Optional[str] = Field(None, title='Media Key')
    media_url_https: Optional[str] = Field(None, title='Media Url Https')
    type: Optional[str] = Field(None, title='Type')
    url: Optional[str] = Field(None, title='Url')
    ext_media_availability: Optional[TwitterDLModelsTimelineExtMediaAvailability] = None
    features: Optional[Features1] = None
    sizes: Optional[TwitterDLModelsTimelineSizes1] = None
    original_info: Optional[OriginalInfo1] = None
    media_results: Optional[TwitterDLModelsTimelineMediaResults1] = None


class TwitterDLModelsTimelineResult2(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    id: Optional[str] = Field(None, title='Id')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    affiliates_highlighted_label: Optional[
        TwitterDLModelsTimelineAffiliatesHighlightedLabel
    ] = None
    has_graduated_access: Optional[bool] = Field(None, title='Has Graduated Access')
    is_blue_verified: Optional[bool] = Field(None, title='Is Blue Verified')
    profile_image_shape: Optional[str] = Field(None, title='Profile Image Shape')
    legacy: Optional[TwitterDLModelsTimelineLegacy] = None
    professional: Optional[TwitterDLModelsTimelineProfessional] = None
    super_follow_eligible: Optional[bool] = Field(None, title='Super Follow Eligible')


class TwitterDLModelsTimelineResult4(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    id: Optional[str] = Field(None, title='Id')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    affiliates_highlighted_label: Optional[AffiliatesHighlightedLabel1] = None
    has_graduated_access: Optional[bool] = Field(None, title='Has Graduated Access')
    is_blue_verified: Optional[bool] = Field(None, title='Is Blue Verified')
    profile_image_shape: Optional[str] = Field(None, title='Profile Image Shape')
    legacy: Optional[TwitterDLModelsTimelineLegacy1] = None
    professional: Optional[TwitterDLModelsTimelineProfessional1] = None


class TwitterDLModelsTimelineResult8(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    id: Optional[str] = Field(None, title='Id')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    affiliates_highlighted_label: Optional[AffiliatesHighlightedLabel2] = None
    has_graduated_access: Optional[bool] = Field(None, title='Has Graduated Access')
    is_blue_verified: Optional[bool] = Field(None, title='Is Blue Verified')
    profile_image_shape: Optional[str] = Field(None, title='Profile Image Shape')
    legacy: Optional[TwitterDLModelsTimelineLegacy4] = None
    professional: Optional[TwitterDLModelsTimelineProfessional2] = None
    super_follow_eligible: Optional[bool] = Field(None, title='Super Follow Eligible')


class TwitterDLModelsTimelineResult9(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    id: Optional[str] = Field(None, title='Id')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    affiliates_highlighted_label: Optional[Dict[str, Any]] = Field(
        None, title='Affiliates Highlighted Label'
    )
    has_graduated_access: Optional[bool] = Field(None, title='Has Graduated Access')
    is_blue_verified: Optional[bool] = Field(None, title='Is Blue Verified')
    profile_image_shape: Optional[str] = Field(None, title='Profile Image Shape')
    legacy: Optional[Legacy6] = None
    professional: Optional[TwitterDLModelsTimelineProfessional3] = None
    super_follow_eligible: Optional[bool] = Field(None, title='Super Follow Eligible')


class TwitterDLModelsTimelineSourceUser1(BaseModel):
    user_results: Optional[UserResults4] = None


class TwitterDLModelsTimelineUserResults(BaseModel):
    result: Optional[TwitterDLModelsTimelineResult2] = None


class TwitterDLModelsTimelineUserResults1(BaseModel):
    result: Optional[TwitterDLModelsTimelineResult4] = None


class TwitterDLModelsTimelineUserResults2(BaseModel):
    result: Optional[TwitterDLModelsTimelineResult8] = None


class TwitterDLModelsTimelineUserResults3(BaseModel):
    result: Optional[TwitterDLModelsTimelineResult9] = None


class TwitterDLModelsUserAffiliatesHighlightedLabel(BaseModel):
    label: Optional[TwitterDLModelsUserLabel] = None


class UserResults5(BaseModel):
    result: Optional[Result14] = None


class UserResults6(BaseModel):
    result: Optional[Result21] = None


class UserResults9(BaseModel):
    result: Optional[Result29] = None


class Value(BaseModel):
    string_value: Optional[str] = Field(None, title='String Value')
    type: Optional[str] = Field(None, title='Type')
    scribe_key: Optional[str] = Field(None, title='Scribe Key')
    user_value: Optional[UserValue] = None
    image_value: Optional[ImageValue] = None
    boolean_value: Optional[bool] = Field(None, title='Boolean Value')
    image_color_value: Optional[ImageColorValue] = None


class Value1(BaseModel):
    string_value: Optional[str] = Field(None, title='String Value')
    type: Optional[str] = Field(None, title='Type')
    scribe_key: Optional[str] = Field(None, title='Scribe Key')
    user_value: Optional[UserValue] = None
    image_value: Optional[ImageValue] = None
    boolean_value: Optional[bool] = Field(None, title='Boolean Value')
    image_color_value: Optional[ImageColorValue1] = None


class VerificationInfo(BaseModel):
    is_identity_verified: Optional[bool] = Field(None, title='Is Identity Verified')
    reason: Optional[Reason] = None


class AdditionalMediaInfo1(BaseModel):
    title: Optional[str] = Field(None, title='Title')
    description: Optional[str] = Field(None, title='Description')
    embeddable: Optional[bool] = Field(None, title='Embeddable')
    monetizable: Optional[bool] = Field(None, title='Monetizable')
    source_user: Optional[TwitterDLModelsTimelineSourceUser1] = None


class AdditionalMediaInfo4(BaseModel):
    monetizable: Optional[bool] = Field(None, title='Monetizable')
    source_user: Optional[SourceUser2] = None


class AdditionalMediaInfo5(BaseModel):
    monetizable: Optional[bool] = Field(None, title='Monetizable')
    source_user: Optional[SourceUser3] = None


class BindingValue(BaseModel):
    key: Optional[str] = Field(None, title='Key')
    value: Optional[Value] = None


class BindingValue1(BaseModel):
    key: Optional[str] = Field(None, title='Key')
    value: Optional[Value1] = None


class Core2(BaseModel):
    user_results: Optional[TwitterDLModelsTimelineUserResults2] = None


class Core3(BaseModel):
    user_results: Optional[UserResults5] = None


class Core4(BaseModel):
    user_results: Optional[UserResults6] = None


class EdgeMediaPreviewComment(BaseModel):
    count: Optional[int] = Field(None, title='Count')
    edges: Optional[List[InstagramDLModelsPostEdge2]] = Field(None, title='Edges')


class EdgeMediaToParentComment(BaseModel):
    count: Optional[int] = Field(None, title='Count')
    page_info: Optional[InstagramDLModelsPostPageInfo] = None
    edges: Optional[List[InstagramDLModelsPostEdge1]] = Field(None, title='Edges')


class EdgeMediaToTaggedUser1(BaseModel):
    edges: Optional[List[InstagramDLModelsUserEdge4]] = Field(None, title='Edges')


class EdgeOwnerToTimelineMedia1(BaseModel):
    count: Optional[int] = Field(None, title='Count')
    edges: Optional[List[InstagramDLModelsPostEdge4]] = Field(None, title='Edges')


class Entities9(BaseModel):
    hashtags: Optional[List[TwitterDLModelsTimelineHashtag]] = Field(
        None, title='Hashtags'
    )
    media: Optional[List[MediaItem4]] = Field(None, title='Media')
    symbols: Optional[List] = Field(None, title='Symbols')
    timestamps: Optional[List] = Field(None, title='Timestamps')
    urls: Optional[List[Url17]] = Field(None, title='Urls')
    user_mentions: Optional[List[TwitterDLModelsTimelineUserMention]] = Field(
        None, title='User Mentions'
    )


class ExtendedEntities2(BaseModel):
    media: Optional[List[MediaItem5]] = Field(None, title='Media')


class FeedResponse(BaseModel):
    code: Optional[int] = Field(None, title='Code')
    msg: Optional[str] = Field(None, title='Msg')
    processed_time: Optional[float] = Field(None, title='Processed Time')
    data: Optional[TikTokDLModelsFeedData] = None


class InstagramDLModelsFeedEdge(BaseModel):
    node: Optional[InstagramDLModelsFeedNode] = None
    cursor: Optional[str] = Field(None, title='Cursor')


class InstagramDLModelsPostNode3(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    full_name: Optional[str] = Field(None, title='Full Name')
    is_private: Optional[bool] = Field(None, title='Is Private')
    is_verified: Optional[bool] = Field(None, title='Is Verified')
    profile_pic_url: Optional[str] = Field(None, title='Profile Pic Url')
    username: Optional[str] = Field(None, title='Username')
    edge_followed_by: Optional[InstagramDLModelsPostEdgeFollowedBy] = None
    edge_owner_to_timeline_media: Optional[EdgeOwnerToTimelineMedia1] = None


class InstagramDLModelsUserEdge(BaseModel):
    node: Optional[InstagramDLModelsUserNode] = None


class InstagramDLModelsUserNode3(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    id: Optional[str] = Field(None, title='Id')
    shortcode: Optional[str] = Field(None, title='Shortcode')
    dimensions: Optional[InstagramDLModelsUserDimensions] = None
    display_url: Optional[str] = Field(None, title='Display Url')
    edge_media_to_tagged_user: Optional[EdgeMediaToTaggedUser1] = None
    fact_check_overall_rating: None = Field(None, title='Fact Check Overall Rating')
    fact_check_information: None = Field(None, title='Fact Check Information')
    gating_info: None = Field(None, title='Gating Info')
    sharing_friction_info: Optional[InstagramDLModelsUserSharingFrictionInfo] = None
    media_overlay_info: None = Field(None, title='Media Overlay Info')
    media_preview: Optional[str] = Field(None, title='Media Preview')
    owner: Optional[InstagramDLModelsUserOwner] = None
    is_video: Optional[bool] = Field(None, title='Is Video')
    has_upcoming_event: Optional[bool] = Field(None, title='Has Upcoming Event')
    accessibility_caption: Optional[str] = Field(None, title='Accessibility Caption')
    dash_info: Optional[InstagramDLModelsUserDashInfo] = None
    has_audio: Optional[bool] = Field(None, title='Has Audio')
    tracking_token: Optional[str] = Field(None, title='Tracking Token')
    video_url: Optional[str] = Field(None, title='Video Url')
    video_view_count: Optional[int] = Field(None, title='Video View Count')
    edge_media_to_caption: Optional[EdgeMediaToCaption1] = None
    edge_media_to_comment: Optional[EdgeMediaToComment] = None
    comments_disabled: Optional[bool] = Field(None, title='Comments Disabled')
    taken_at_timestamp: Optional[int] = Field(None, title='Taken At Timestamp')
    edge_liked_by: Optional[InstagramDLModelsUserEdgeLikedBy] = None
    edge_media_preview_like: Optional[InstagramDLModelsUserEdgeMediaPreviewLike] = None
    location: None = Field(None, title='Location')
    nft_asset_info: None = Field(None, title='Nft Asset Info')
    thumbnail_src: Optional[str] = Field(None, title='Thumbnail Src')
    thumbnail_resources: Optional[List[ThumbnailResource]] = Field(
        None, title='Thumbnail Resources'
    )
    felix_profile_grid_crop: None = Field(None, title='Felix Profile Grid Crop')
    coauthor_producers: Optional[List[InstagramDLModelsUserCoauthorProducer]] = Field(
        None, title='Coauthor Producers'
    )
    pinned_for_users: Optional[List] = Field(None, title='Pinned For Users')
    viewer_can_reshare: Optional[bool] = Field(None, title='Viewer Can Reshare')
    product_type: Optional[str] = Field(None, title='Product Type')
    clips_music_attribution_info: Optional[
        InstagramDLModelsUserClipsMusicAttributionInfo
    ] = None
    edge_sidecar_to_children: Optional[EdgeSidecarToChildren] = None


class InstagramStoryResponse(BaseModel):
    reels_media: Optional[List[ReelsMediaItem]] = Field(None, title='Reels Media')
    created_at: Optional[float] = Field(None, title='Created At')
    item_count: Optional[int] = Field(0, title='Item Count')


class ItemContent2(BaseModel):
    itemType: Optional[str] = Field(None, title='Itemtype')
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    user_results: Optional[UserResults9] = None
    userDisplayType: Optional[str] = Field(None, title='Userdisplaytype')
    socialContext: Optional[SocialContext] = None


class Legacy10(BaseModel):
    binding_values: Optional[List[BindingValue]] = Field(None, title='Binding Values')
    card_platform: Optional[CardPlatform] = None
    name: Optional[str] = Field(None, title='Name')
    url: Optional[str] = Field(None, title='Url')
    user_refs_results: Optional[List[UserRefsResult]] = Field(
        None, title='User Refs Results'
    )


class Legacy12(BaseModel):
    binding_values: Optional[List[BindingValue1]] = Field(None, title='Binding Values')
    card_platform: Optional[CardPlatform1] = None
    name: Optional[str] = Field(None, title='Name')
    url: Optional[str] = Field(None, title='Url')
    user_refs_results: Optional[List[UserRefsResult1]] = Field(
        None, title='User Refs Results'
    )


class Legacy9(BaseModel):
    bookmark_count: Optional[int] = Field(None, title='Bookmark Count')
    bookmarked: Optional[bool] = Field(None, title='Bookmarked')
    created_at: Optional[str] = Field(None, title='Created At')
    conversation_id_str: Optional[str] = Field(None, title='Conversation Id Str')
    display_text_range: Optional[List[int]] = Field(None, title='Display Text Range')
    entities: Optional[Entities9] = None
    extended_entities: Optional[ExtendedEntities2] = None
    favorite_count: Optional[int] = Field(None, title='Favorite Count')
    favorited: Optional[bool] = Field(None, title='Favorited')
    full_text: Optional[str] = Field(None, title='Full Text')
    is_quote_status: Optional[bool] = Field(None, title='Is Quote Status')
    lang: Optional[str] = Field(None, title='Lang')
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    possibly_sensitive_editable: Optional[bool] = Field(
        None, title='Possibly Sensitive Editable'
    )
    quote_count: Optional[int] = Field(None, title='Quote Count')
    reply_count: Optional[int] = Field(None, title='Reply Count')
    retweet_count: Optional[int] = Field(None, title='Retweet Count')
    retweeted: Optional[bool] = Field(None, title='Retweeted')
    user_id_str: Optional[str] = Field(None, title='User Id Str')
    id_str: Optional[str] = Field(None, title='Id Str')


class MediaItem6(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    id_str: Optional[str] = Field(None, title='Id Str')
    indices: Optional[List[int]] = Field(None, title='Indices')
    media_key: Optional[str] = Field(None, title='Media Key')
    media_url_https: Optional[str] = Field(None, title='Media Url Https')
    type: Optional[str] = Field(None, title='Type')
    url: Optional[str] = Field(None, title='Url')
    ext_media_availability: Optional[TwitterDLModelsTimelineExtMediaAvailability] = None
    features: Optional[Features6] = None
    sizes: Optional[Sizes6] = None
    original_info: Optional[OriginalInfo6] = None
    media_results: Optional[MediaResults6] = None
    allow_download_status: Optional[AllowDownloadStatus] = None
    source_status_id_str: Optional[str] = Field(None, title='Source Status Id Str')
    source_user_id_str: Optional[str] = Field(None, title='Source User Id Str')
    additional_media_info: Optional[AdditionalMediaInfo4] = None
    video_info: Optional[VideoInfo4] = None


class MediaItem7(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    id_str: Optional[str] = Field(None, title='Id Str')
    indices: Optional[List[int]] = Field(None, title='Indices')
    media_key: Optional[str] = Field(None, title='Media Key')
    media_url_https: Optional[str] = Field(None, title='Media Url Https')
    type: Optional[str] = Field(None, title='Type')
    url: Optional[str] = Field(None, title='Url')
    ext_media_availability: Optional[TwitterDLModelsTimelineExtMediaAvailability] = None
    features: Optional[Features7] = None
    sizes: Optional[Sizes7] = None
    original_info: Optional[OriginalInfo7] = None
    media_results: Optional[MediaResults7] = None
    allow_download_status: Optional[AllowDownloadStatus] = None
    source_status_id_str: Optional[str] = Field(None, title='Source Status Id Str')
    source_user_id_str: Optional[str] = Field(None, title='Source User Id Str')
    additional_media_info: Optional[AdditionalMediaInfo5] = None
    video_info: Optional[VideoInfo5] = None


class NoteTweet(BaseModel):
    is_expandable: Optional[bool] = Field(None, title='Is Expandable')
    note_tweet_results: Optional[NoteTweetResults] = None


class NoteTweetResults1(BaseModel):
    result: Optional[Result26] = None


class TwitterDLModelsPostAdditionalMediaInfo2(BaseModel):
    monetizable: Optional[bool] = Field(None, title='Monetizable')
    source_user: Optional[TwitterDLModelsPostSourceUser] = None


class TwitterDLModelsPostCore(BaseModel):
    user_results: Optional[TwitterDLModelsPostUserResults] = None


class TwitterDLModelsPostEntities1(BaseModel):
    hashtags: Optional[List] = Field(None, title='Hashtags')
    media: Optional[List[TwitterDLModelsPostMediaItem]] = Field(None, title='Media')
    symbols: Optional[List] = Field(None, title='Symbols')
    timestamps: Optional[List] = Field(None, title='Timestamps')
    urls: Optional[List] = Field(None, title='Urls')
    user_mentions: Optional[List] = Field(None, title='User Mentions')


class TwitterDLModelsPostExtendedEntities(BaseModel):
    media: Optional[List[TwitterDLModelsPostMediaItem1]] = Field(None, title='Media')


class TwitterDLModelsPostExtendedEntities1(BaseModel):
    media: Optional[List[TwitterDLModelsPostMediaItem3]] = Field(None, title='Media')


class TwitterDLModelsPostLegacy1(BaseModel):
    bookmark_count: Optional[int] = Field(None, title='Bookmark Count')
    bookmarked: Optional[bool] = Field(None, title='Bookmarked')
    created_at: Optional[str] = Field(None, title='Created At')
    conversation_id_str: Optional[str] = Field(None, title='Conversation Id Str')
    display_text_range: Optional[List[int]] = Field(None, title='Display Text Range')
    entities: Optional[TwitterDLModelsPostEntities1] = None
    extended_entities: Optional[TwitterDLModelsPostExtendedEntities] = None
    favorite_count: Optional[int] = Field(None, title='Favorite Count')
    favorited: Optional[bool] = Field(None, title='Favorited')
    full_text: Optional[str] = Field(None, title='Full Text')
    is_quote_status: Optional[bool] = Field(None, title='Is Quote Status')
    lang: Optional[str] = Field(None, title='Lang')
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    possibly_sensitive_editable: Optional[bool] = Field(
        None, title='Possibly Sensitive Editable'
    )
    quote_count: Optional[int] = Field(None, title='Quote Count')
    reply_count: Optional[int] = Field(None, title='Reply Count')
    retweet_count: Optional[int] = Field(None, title='Retweet Count')
    retweeted: Optional[bool] = Field(None, title='Retweeted')
    user_id_str: Optional[str] = Field(None, title='User Id Str')
    id_str: Optional[str] = Field(None, title='Id Str')


class TwitterDLModelsPostMediaItem2(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    id_str: Optional[str] = Field(None, title='Id Str')
    indices: Optional[List[int]] = Field(None, title='Indices')
    media_key: Optional[str] = Field(None, title='Media Key')
    media_url_https: Optional[str] = Field(None, title='Media Url Https')
    source_status_id_str: Optional[str] = Field(None, title='Source Status Id Str')
    source_user_id_str: Optional[str] = Field(None, title='Source User Id Str')
    type: Optional[str] = Field(None, title='Type')
    url: Optional[str] = Field(None, title='Url')
    additional_media_info: Optional[TwitterDLModelsPostAdditionalMediaInfo2] = None
    ext_media_availability: Optional[TwitterDLModelsPostExtMediaAvailability] = None
    sizes: Optional[TwitterDLModelsPostSizes2] = None
    original_info: Optional[TwitterDLModelsPostOriginalInfo] = None
    video_info: Optional[TwitterDLModelsPostVideoInfo2] = None
    media_results: Optional[TwitterDLModelsPostMediaResults2] = None
    ext_alt_text: Optional[str] = Field(None, title='Ext Alt Text')


class TwitterDLModelsPostResult(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    has_birdwatch_notes: Optional[bool] = Field(None, title='Has Birdwatch Notes')
    core: Optional[TwitterDLModelsPostCore] = None
    unmention_data: Optional[Dict[str, Any]] = Field(None, title='Unmention Data')
    edit_control: Optional[TwitterDLModelsPostEditControl] = None
    is_translatable: Optional[bool] = Field(None, title='Is Translatable')
    views: Optional[TwitterDLModelsPostViews] = None
    source: Optional[str] = Field(None, title='Source')
    legacy: Optional[TwitterDLModelsPostLegacy1] = None
    quick_promote_eligibility: Optional[
        TwitterDLModelsPostQuickPromoteEligibility
    ] = None


class TwitterDLModelsPostTweetResults(BaseModel):
    result: Optional[TwitterDLModelsPostResult] = None


class TwitterDLModelsTimelineCore(BaseModel):
    user_results: Optional[TwitterDLModelsTimelineUserResults] = None


class TwitterDLModelsTimelineCore1(BaseModel):
    user_results: Optional[TwitterDLModelsTimelineUserResults1] = None


class TwitterDLModelsTimelineEntities2(BaseModel):
    hashtags: Optional[List] = Field(None, title='Hashtags')
    media: Optional[List[TwitterDLModelsTimelineMediaItem]] = Field(None, title='Media')
    symbols: Optional[List] = Field(None, title='Symbols')
    timestamps: Optional[List] = Field(None, title='Timestamps')
    urls: Optional[List] = Field(None, title='Urls')
    user_mentions: Optional[List] = Field(None, title='User Mentions')


class TwitterDLModelsTimelineExtendedEntities(BaseModel):
    media: Optional[List[TwitterDLModelsTimelineMediaItem1]] = Field(
        None, title='Media'
    )


class TwitterDLModelsTimelineItem1(BaseModel):
    itemContent: Optional[ItemContent2] = None
    clientEventInfo: Optional[ClientEventInfo2] = None


class TwitterDLModelsTimelineLegacy2(BaseModel):
    bookmark_count: Optional[int] = Field(None, title='Bookmark Count')
    bookmarked: Optional[bool] = Field(None, title='Bookmarked')
    created_at: Optional[str] = Field(None, title='Created At')
    conversation_id_str: Optional[str] = Field(None, title='Conversation Id Str')
    display_text_range: Optional[List[int]] = Field(None, title='Display Text Range')
    entities: Optional[TwitterDLModelsTimelineEntities2] = None
    extended_entities: Optional[TwitterDLModelsTimelineExtendedEntities] = None
    favorite_count: Optional[int] = Field(None, title='Favorite Count')
    favorited: Optional[bool] = Field(None, title='Favorited')
    full_text: Optional[str] = Field(None, title='Full Text')
    is_quote_status: Optional[bool] = Field(None, title='Is Quote Status')
    lang: Optional[str] = Field(None, title='Lang')
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    possibly_sensitive_editable: Optional[bool] = Field(
        None, title='Possibly Sensitive Editable'
    )
    quote_count: Optional[int] = Field(None, title='Quote Count')
    reply_count: Optional[int] = Field(None, title='Reply Count')
    retweet_count: Optional[int] = Field(None, title='Retweet Count')
    retweeted: Optional[bool] = Field(None, title='Retweeted')
    user_id_str: Optional[str] = Field(None, title='User Id Str')
    id_str: Optional[str] = Field(None, title='Id Str')


class TwitterDLModelsTimelineMediaItem3(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    id_str: Optional[str] = Field(None, title='Id Str')
    indices: Optional[List[int]] = Field(None, title='Indices')
    media_key: Optional[str] = Field(None, title='Media Key')
    media_url_https: Optional[str] = Field(None, title='Media Url Https')
    source_status_id_str: Optional[str] = Field(None, title='Source Status Id Str')
    source_user_id_str: Optional[str] = Field(None, title='Source User Id Str')
    type: Optional[str] = Field(None, title='Type')
    url: Optional[str] = Field(None, title='Url')
    additional_media_info: Optional[AdditionalMediaInfo1] = None
    ext_media_availability: Optional[TwitterDLModelsTimelineExtMediaAvailability] = None
    sizes: Optional[TwitterDLModelsTimelineSizes3] = None
    original_info: Optional[OriginalInfo3] = None
    video_info: Optional[TwitterDLModelsTimelineVideoInfo1] = None
    media_results: Optional[TwitterDLModelsTimelineMediaResults3] = None
    features: Optional[Features3] = None
    allow_download_status: Optional[AllowDownloadStatus] = None


class TwitterDLModelsTimelineSourceUser(BaseModel):
    user_results: Optional[TwitterDLModelsTimelineUserResults3] = None


class TwitterDLModelsUserResult(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    id: Optional[str] = Field(None, title='Id')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    affiliates_highlighted_label: Optional[
        TwitterDLModelsUserAffiliatesHighlightedLabel
    ] = None
    has_graduated_access: Optional[bool] = Field(None, title='Has Graduated Access')
    is_blue_verified: Optional[bool] = Field(None, title='Is Blue Verified')
    profile_image_shape: Optional[str] = Field(None, title='Profile Image Shape')
    legacy: Optional[TwitterDLModelsUserLegacy] = None
    professional: Optional[TwitterDLModelsUserProfessional] = None
    super_follow_eligible: Optional[bool] = Field(None, title='Super Follow Eligible')
    smart_blocked_by: Optional[bool] = Field(None, title='Smart Blocked By')
    smart_blocking: Optional[bool] = Field(None, title='Smart Blocking')
    legacy_extended_profile: Optional[Dict[str, Any]] = Field(
        None, title='Legacy Extended Profile'
    )
    is_profile_translatable: Optional[bool] = Field(
        None, title='Is Profile Translatable'
    )
    has_hidden_likes_on_profile: Optional[bool] = Field(
        None, title='Has Hidden Likes On Profile'
    )
    has_hidden_subscriptions_on_profile: Optional[bool] = Field(
        None, title='Has Hidden Subscriptions On Profile'
    )
    verification_info: Optional[VerificationInfo] = None
    highlights_info: Optional[HighlightsInfo] = None
    user_seed_tweet_count: Optional[int] = Field(None, title='User Seed Tweet Count')
    business_account: Optional[Dict[str, Any]] = Field(None, title='Business Account')
    creator_subscriptions_count: Optional[int] = Field(
        None, title='Creator Subscriptions Count'
    )


class TwitterDLModelsUserUser(BaseModel):
    result: Optional[TwitterDLModelsUserResult] = None


class XdtApiV1FeedUserTimelineGraphqlConnection(BaseModel):
    edges: Optional[List[InstagramDLModelsFeedEdge]] = Field(None, title='Edges')
    page_info: Optional[InstagramDLModelsFeedPageInfo] = None


class Card(BaseModel):
    rest_id: Optional[str] = Field(None, title='Rest Id')
    legacy: Optional[Legacy10] = None


class Card1(BaseModel):
    rest_id: Optional[str] = Field(None, title='Rest Id')
    legacy: Optional[Legacy12] = None


class EdgeFelixVideoTimeline(BaseModel):
    count: Optional[int] = Field(None, title='Count')
    page_info: Optional[InstagramDLModelsUserPageInfo] = None
    edges: Optional[List[InstagramDLModelsUserEdge]] = Field(None, title='Edges')


class Entities13(BaseModel):
    hashtags: Optional[List] = Field(None, title='Hashtags')
    symbols: Optional[List] = Field(None, title='Symbols')
    timestamps: Optional[List] = Field(None, title='Timestamps')
    urls: Optional[List[Url27]] = Field(None, title='Urls')
    user_mentions: Optional[List] = Field(None, title='User Mentions')
    media: Optional[List[MediaItem6]] = Field(None, title='Media')


class ExtendedEntities3(BaseModel):
    media: Optional[List[MediaItem7]] = Field(None, title='Media')


class InstagramDLModelsFeedData(BaseModel):
    xdt_api__v1__feed__user_timeline_graphql_connection: Optional[
        XdtApiV1FeedUserTimelineGraphqlConnection
    ] = None
    xdt_viewer: Optional[XdtViewer] = None


class InstagramDLModelsPostEdge3(BaseModel):
    node: Optional[InstagramDLModelsPostNode3] = None


class InstagramDLModelsPostEdgeRelatedProfiles(BaseModel):
    edges: Optional[List[InstagramDLModelsPostEdge3]] = Field(None, title='Edges')


class InstagramDLModelsUserEdge3(BaseModel):
    node: Optional[InstagramDLModelsUserNode3] = None


class InstagramDLModelsUserEdgeOwnerToTimelineMedia(BaseModel):
    count: Optional[int] = Field(None, title='Count')
    page_info: Optional[InstagramDLModelsUserPageInfo] = None
    edges: Optional[List[InstagramDLModelsUserEdge3]] = Field(None, title='Edges')


class InstagramDLModelsUserUser(BaseModel):
    ai_agent_type: None = Field(None, title='Ai Agent Type')
    biography: Optional[str] = Field(None, title='Biography')
    bio_links: Optional[List[BioLink]] = Field(None, title='Bio Links')
    fb_profile_biolink: None = Field(None, title='Fb Profile Biolink')
    biography_with_entities: Optional[BiographyWithEntities] = None
    blocked_by_viewer: Optional[bool] = Field(None, title='Blocked By Viewer')
    restricted_by_viewer: Optional[bool] = Field(None, title='Restricted By Viewer')
    country_block: Optional[bool] = Field(None, title='Country Block')
    eimu_id: Optional[str] = Field(None, title='Eimu Id')
    external_url: Optional[str] = Field(None, title='External Url')
    external_url_linkshimmed: Optional[str] = Field(
        None, title='External Url Linkshimmed'
    )
    edge_followed_by: Optional[InstagramDLModelsUserEdgeFollowedBy] = None
    fbid: Optional[str] = Field(None, title='Fbid')
    followed_by_viewer: Optional[bool] = Field(None, title='Followed By Viewer')
    edge_follow: Optional[EdgeFollow] = None
    follows_viewer: Optional[bool] = Field(None, title='Follows Viewer')
    full_name: Optional[str] = Field(None, title='Full Name')
    group_metadata: None = Field(None, title='Group Metadata')
    has_ar_effects: Optional[bool] = Field(None, title='Has Ar Effects')
    has_clips: Optional[bool] = Field(None, title='Has Clips')
    has_guides: Optional[bool] = Field(None, title='Has Guides')
    has_channel: Optional[bool] = Field(None, title='Has Channel')
    has_blocked_viewer: Optional[bool] = Field(None, title='Has Blocked Viewer')
    highlight_reel_count: Optional[int] = Field(None, title='Highlight Reel Count')
    has_requested_viewer: Optional[bool] = Field(None, title='Has Requested Viewer')
    hide_like_and_view_counts: Optional[bool] = Field(
        None, title='Hide Like And View Counts'
    )
    id: Optional[str] = Field(None, title='Id')
    is_business_account: Optional[bool] = Field(None, title='Is Business Account')
    is_professional_account: Optional[bool] = Field(
        None, title='Is Professional Account'
    )
    is_supervision_enabled: Optional[bool] = Field(None, title='Is Supervision Enabled')
    is_guardian_of_viewer: Optional[bool] = Field(None, title='Is Guardian Of Viewer')
    is_supervised_by_viewer: Optional[bool] = Field(
        None, title='Is Supervised By Viewer'
    )
    is_supervised_user: Optional[bool] = Field(None, title='Is Supervised User')
    is_embeds_disabled: Optional[bool] = Field(None, title='Is Embeds Disabled')
    is_joined_recently: Optional[bool] = Field(None, title='Is Joined Recently')
    guardian_id: None = Field(None, title='Guardian Id')
    business_address_json: None = Field(None, title='Business Address Json')
    business_contact_method: Optional[str] = Field(
        None, title='Business Contact Method'
    )
    business_email: None = Field(None, title='Business Email')
    business_phone_number: None = Field(None, title='Business Phone Number')
    business_category_name: None = Field(None, title='Business Category Name')
    overall_category_name: None = Field(None, title='Overall Category Name')
    category_enum: None = Field(None, title='Category Enum')
    category_name: Optional[str] = Field(None, title='Category Name')
    is_private: Optional[bool] = Field(None, title='Is Private')
    is_verified: Optional[bool] = Field(None, title='Is Verified')
    is_verified_by_mv4b: Optional[bool] = Field(None, title='Is Verified By Mv4B')
    is_regulated_c18: Optional[bool] = Field(None, title='Is Regulated C18')
    edge_mutual_followed_by: Optional[EdgeMutualFollowedBy] = None
    pinned_channels_list_count: Optional[int] = Field(
        None, title='Pinned Channels List Count'
    )
    profile_pic_url: Optional[str] = Field(None, title='Profile Pic Url')
    profile_pic_url_hd: Optional[str] = Field(None, title='Profile Pic Url Hd')
    requested_by_viewer: Optional[bool] = Field(None, title='Requested By Viewer')
    should_show_category: Optional[bool] = Field(None, title='Should Show Category')
    should_show_public_contacts: Optional[bool] = Field(
        None, title='Should Show Public Contacts'
    )
    show_account_transparency_details: Optional[bool] = Field(
        None, title='Show Account Transparency Details'
    )
    remove_message_entrypoint: Optional[bool] = Field(
        None, title='Remove Message Entrypoint'
    )
    transparency_label: None = Field(None, title='Transparency Label')
    transparency_product: None = Field(None, title='Transparency Product')
    username: Optional[str] = Field(None, title='Username')
    connected_fb_page: None = Field(None, title='Connected Fb Page')
    pronouns: Optional[List] = Field(None, title='Pronouns')
    edge_felix_video_timeline: Optional[EdgeFelixVideoTimeline] = None
    edge_owner_to_timeline_media: Optional[
        InstagramDLModelsUserEdgeOwnerToTimelineMedia
    ] = None
    edge_saved_media: Optional[EdgeSavedMedia] = None
    edge_media_collections: Optional[EdgeMediaCollections] = None
    edge_related_profiles: Optional[InstagramDLModelsUserEdgeRelatedProfiles] = None


class InstagramTimeline(BaseModel):
    data: Optional[InstagramDLModelsFeedData] = None
    extensions: Optional[InstagramDLModelsFeedExtensions] = None


class Legacy15(BaseModel):
    bookmark_count: Optional[int] = Field(None, title='Bookmark Count')
    bookmarked: Optional[bool] = Field(None, title='Bookmarked')
    created_at: Optional[str] = Field(None, title='Created At')
    conversation_id_str: Optional[str] = Field(None, title='Conversation Id Str')
    display_text_range: Optional[List[int]] = Field(None, title='Display Text Range')
    entities: Optional[Entities13] = None
    favorite_count: Optional[int] = Field(None, title='Favorite Count')
    favorited: Optional[bool] = Field(None, title='Favorited')
    full_text: Optional[str] = Field(None, title='Full Text')
    is_quote_status: Optional[bool] = Field(None, title='Is Quote Status')
    lang: Optional[str] = Field(None, title='Lang')
    quote_count: Optional[int] = Field(None, title='Quote Count')
    reply_count: Optional[int] = Field(None, title='Reply Count')
    retweet_count: Optional[int] = Field(None, title='Retweet Count')
    retweeted: Optional[bool] = Field(None, title='Retweeted')
    user_id_str: Optional[str] = Field(None, title='User Id Str')
    id_str: Optional[str] = Field(None, title='Id Str')
    extended_entities: Optional[ExtendedEntities3] = None
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    possibly_sensitive_editable: Optional[bool] = Field(
        None, title='Possibly Sensitive Editable'
    )
    quoted_status_id_str: Optional[str] = Field(None, title='Quoted Status Id Str')
    quoted_status_permalink: Optional[QuotedStatusPermalink] = None


class NoteTweet1(BaseModel):
    is_expandable: Optional[bool] = Field(None, title='Is Expandable')
    note_tweet_results: Optional[NoteTweetResults1] = None


class Result13(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    core: Optional[Core3] = None
    unmention_data: Optional[Dict[str, Any]] = Field(None, title='Unmention Data')
    edit_control: Optional[TwitterDLModelsTimelineEditControl] = None
    is_translatable: Optional[bool] = Field(None, title='Is Translatable')
    views: Optional[TwitterDLModelsTimelineViews] = None
    source: Optional[str] = Field(None, title='Source')
    legacy: Optional[Legacy9] = None
    card: Optional[Card] = None
    note_tweet: Optional[NoteTweet] = None


class Result20(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    core: Optional[Core4] = None
    unmention_data: Optional[Dict[str, Any]] = Field(None, title='Unmention Data')
    edit_control: Optional[TwitterDLModelsTimelineEditControl] = None
    is_translatable: Optional[bool] = Field(None, title='Is Translatable')
    views: Optional[TwitterDLModelsTimelineViews] = None
    source: Optional[str] = Field(None, title='Source')
    legacy: Optional[Legacy15] = None
    note_tweet: Optional[NoteTweet1] = None
    quotedRefResult: Optional[QuotedRefResult] = None


class Result3(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    core: Optional[TwitterDLModelsTimelineCore1] = None
    unmention_data: Optional[Dict[str, Any]] = Field(None, title='Unmention Data')
    edit_control: Optional[TwitterDLModelsTimelineEditControl] = None
    is_translatable: Optional[bool] = Field(None, title='Is Translatable')
    views: Optional[TwitterDLModelsTimelineViews] = None
    source: Optional[str] = Field(None, title='Source')
    legacy: Optional[TwitterDLModelsTimelineLegacy2] = None


class RetweetedStatusResult(BaseModel):
    result: Optional[Result13] = None


class TwitterDLModelsPostEntities3(BaseModel):
    hashtags: Optional[List[TwitterDLModelsPostHashtag]] = Field(None, title='Hashtags')
    symbols: Optional[List] = Field(None, title='Symbols')
    timestamps: Optional[List] = Field(None, title='Timestamps')
    urls: Optional[List] = Field(None, title='Urls')
    user_mentions: Optional[List[TwitterDLModelsPostUserMention]] = Field(
        None, title='User Mentions'
    )
    media: Optional[List[TwitterDLModelsPostMediaItem2]] = Field(None, title='Media')


class TwitterDLModelsPostItemContent(BaseModel):
    itemType: Optional[str] = Field(None, title='Itemtype')
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    tweet_results: Optional[TwitterDLModelsPostTweetResults] = None
    tweetDisplayType: Optional[str] = Field(None, title='Tweetdisplaytype')
    hasModeratedReplies: Optional[bool] = Field(None, title='Hasmoderatedreplies')
    value: Optional[str] = Field(None, title='Value')
    cursorType: Optional[str] = Field(None, title='Cursortype')


class TwitterDLModelsPostLegacy3(BaseModel):
    bookmark_count: Optional[int] = Field(None, title='Bookmark Count')
    bookmarked: Optional[bool] = Field(None, title='Bookmarked')
    created_at: Optional[str] = Field(None, title='Created At')
    conversation_id_str: Optional[str] = Field(None, title='Conversation Id Str')
    display_text_range: Optional[List[int]] = Field(None, title='Display Text Range')
    entities: Optional[TwitterDLModelsPostEntities3] = None
    favorite_count: Optional[int] = Field(None, title='Favorite Count')
    favorited: Optional[bool] = Field(None, title='Favorited')
    full_text: Optional[str] = Field(None, title='Full Text')
    in_reply_to_screen_name: Optional[str] = Field(
        None, title='In Reply To Screen Name'
    )
    in_reply_to_status_id_str: Optional[str] = Field(
        None, title='In Reply To Status Id Str'
    )
    in_reply_to_user_id_str: Optional[str] = Field(
        None, title='In Reply To User Id Str'
    )
    is_quote_status: Optional[bool] = Field(None, title='Is Quote Status')
    lang: Optional[str] = Field(None, title='Lang')
    quote_count: Optional[int] = Field(None, title='Quote Count')
    reply_count: Optional[int] = Field(None, title='Reply Count')
    retweet_count: Optional[int] = Field(None, title='Retweet Count')
    retweeted: Optional[bool] = Field(None, title='Retweeted')
    user_id_str: Optional[str] = Field(None, title='User Id Str')
    id_str: Optional[str] = Field(None, title='Id Str')
    extended_entities: Optional[TwitterDLModelsPostExtendedEntities1] = None
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    possibly_sensitive_editable: Optional[bool] = Field(
        None, title='Possibly Sensitive Editable'
    )


class TwitterDLModelsPostResult4(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    has_birdwatch_notes: Optional[bool] = Field(None, title='Has Birdwatch Notes')
    core: Optional[TwitterDLModelsPostCore1] = None
    unmention_data: Optional[Dict[str, Any]] = Field(None, title='Unmention Data')
    edit_control: Optional[TwitterDLModelsPostEditControl] = None
    is_translatable: Optional[bool] = Field(None, title='Is Translatable')
    views: Optional[TwitterDLModelsPostViews] = None
    source: Optional[str] = Field(None, title='Source')
    legacy: Optional[TwitterDLModelsPostLegacy3] = None
    quick_promote_eligibility: Optional[
        TwitterDLModelsPostQuickPromoteEligibility
    ] = None


class TwitterDLModelsPostTweetResults1(BaseModel):
    result: Optional[TwitterDLModelsPostResult4] = None


class TwitterDLModelsTimelineAdditionalMediaInfo(BaseModel):
    title: Optional[str] = Field(None, title='Title')
    description: Optional[str] = Field(None, title='Description')
    embeddable: Optional[bool] = Field(None, title='Embeddable')
    monetizable: Optional[bool] = Field(None, title='Monetizable')
    source_user: Optional[TwitterDLModelsTimelineSourceUser] = None


class TwitterDLModelsTimelineExtendedEntities1(BaseModel):
    media: Optional[List[TwitterDLModelsTimelineMediaItem3]] = Field(
        None, title='Media'
    )


class TwitterDLModelsTimelineItem(BaseModel):
    entryId: Optional[str] = Field(None, title='Entryid')
    item: Optional[TwitterDLModelsTimelineItem1] = None


class TwitterDLModelsTimelineMediaItem2(BaseModel):
    display_url: Optional[str] = Field(None, title='Display Url')
    expanded_url: Optional[str] = Field(None, title='Expanded Url')
    id_str: Optional[str] = Field(None, title='Id Str')
    indices: Optional[List[int]] = Field(None, title='Indices')
    media_key: Optional[str] = Field(None, title='Media Key')
    media_url_https: Optional[str] = Field(None, title='Media Url Https')
    source_status_id_str: Optional[str] = Field(None, title='Source Status Id Str')
    source_user_id_str: Optional[str] = Field(None, title='Source User Id Str')
    type: Optional[str] = Field(None, title='Type')
    url: Optional[str] = Field(None, title='Url')
    additional_media_info: Optional[TwitterDLModelsTimelineAdditionalMediaInfo] = None
    ext_media_availability: Optional[TwitterDLModelsTimelineExtMediaAvailability] = None
    sizes: Optional[TwitterDLModelsTimelineSizes2] = None
    original_info: Optional[OriginalInfo2] = None
    video_info: Optional[TwitterDLModelsTimelineVideoInfo] = None
    media_results: Optional[TwitterDLModelsTimelineMediaResults2] = None
    features: Optional[Features2] = None
    allow_download_status: Optional[AllowDownloadStatus] = None


class TwitterDLModelsUserData(BaseModel):
    user: Optional[TwitterDLModelsUserUser] = None


class TwitterUser(BaseModel):
    data: Optional[TwitterDLModelsUserData] = None


class XdtShortcodeMedia(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    field__isXDTGraphMediaInterface: Optional[str] = Field(
        None, alias='__isXDTGraphMediaInterface', title='  Isxdtgraphmediainterface'
    )
    id: Optional[str] = Field(None, title='Id')
    shortcode: Optional[str] = Field(None, title='Shortcode')
    thumbnail_src: Optional[str] = Field(None, title='Thumbnail Src')
    dimensions: Optional[InstagramDLModelsPostDimensions] = None
    gating_info: None = Field(None, title='Gating Info')
    fact_check_overall_rating: None = Field(None, title='Fact Check Overall Rating')
    fact_check_information: None = Field(None, title='Fact Check Information')
    sensitivity_friction_info: None = Field(None, title='Sensitivity Friction Info')
    sharing_friction_info: Optional[InstagramDLModelsPostSharingFrictionInfo] = None
    media_overlay_info: None = Field(None, title='Media Overlay Info')
    media_preview: Optional[str] = Field(None, title='Media Preview')
    display_url: Optional[str] = Field(None, title='Display Url')
    display_resources: Optional[List[DisplayResource]] = Field(
        None, title='Display Resources'
    )
    accessibility_caption: None = Field(None, title='Accessibility Caption')
    dash_info: Optional[InstagramDLModelsPostDashInfo] = None
    has_audio: Optional[bool] = Field(None, title='Has Audio')
    video_url: Optional[str] = Field(None, title='Video Url')
    video_view_count: Optional[int] = Field(None, title='Video View Count')
    video_play_count: Optional[int] = Field(None, title='Video Play Count')
    encoding_status: None = Field(None, title='Encoding Status')
    is_published: Optional[bool] = Field(None, title='Is Published')
    product_type: Optional[str] = Field(None, title='Product Type')
    title: Optional[str] = Field(None, title='Title')
    video_duration: Optional[float] = Field(None, title='Video Duration')
    clips_music_attribution_info: Optional[
        InstagramDLModelsPostClipsMusicAttributionInfo
    ] = None
    is_video: Optional[bool] = Field(None, title='Is Video')
    tracking_token: Optional[str] = Field(None, title='Tracking Token')
    upcoming_event: None = Field(None, title='Upcoming Event')
    edge_media_to_tagged_user: Optional[
        InstagramDLModelsPostEdgeMediaToTaggedUser
    ] = None
    owner: Optional[InstagramDLModelsPostOwner] = None
    edge_media_to_caption: Optional[InstagramDLModelsPostEdgeMediaToCaption] = None
    can_see_insights_as_brand: Optional[bool] = Field(
        None, title='Can See Insights As Brand'
    )
    caption_is_edited: Optional[bool] = Field(None, title='Caption Is Edited')
    has_ranked_comments: Optional[bool] = Field(None, title='Has Ranked Comments')
    like_and_view_counts_disabled: Optional[bool] = Field(
        None, title='Like And View Counts Disabled'
    )
    edge_media_to_parent_comment: Optional[EdgeMediaToParentComment] = None
    edge_media_to_hoisted_comment: Optional[EdgeMediaToHoistedComment] = None
    edge_media_preview_comment: Optional[EdgeMediaPreviewComment] = None
    comments_disabled: Optional[bool] = Field(None, title='Comments Disabled')
    commenting_disabled_for_viewer: Optional[bool] = Field(
        None, title='Commenting Disabled For Viewer'
    )
    taken_at_timestamp: Optional[int] = Field(None, title='Taken At Timestamp')
    edge_media_preview_like: Optional[InstagramDLModelsPostEdgeMediaPreviewLike] = None
    edge_media_to_sponsor_user: Optional[EdgeMediaToSponsorUser] = None
    is_affiliate: Optional[bool] = Field(None, title='Is Affiliate')
    is_paid_partnership: Optional[bool] = Field(None, title='Is Paid Partnership')
    location: None = Field(None, title='Location')
    nft_asset_info: None = Field(None, title='Nft Asset Info')
    viewer_has_liked: Optional[bool] = Field(None, title='Viewer Has Liked')
    viewer_has_saved: Optional[bool] = Field(None, title='Viewer Has Saved')
    viewer_has_saved_to_collection: Optional[bool] = Field(
        None, title='Viewer Has Saved To Collection'
    )
    viewer_in_photo_of_you: Optional[bool] = Field(None, title='Viewer In Photo Of You')
    viewer_can_reshare: Optional[bool] = Field(None, title='Viewer Can Reshare')
    is_ad: Optional[bool] = Field(None, title='Is Ad')
    edge_web_media_to_related_media: Optional[EdgeWebMediaToRelatedMedia] = None
    coauthor_producers: Optional[List] = Field(None, title='Coauthor Producers')
    pinned_for_users: Optional[List] = Field(None, title='Pinned For Users')
    edge_related_profiles: Optional[InstagramDLModelsPostEdgeRelatedProfiles] = None


class InstagramDLModelsPostData(BaseModel):
    xdt_shortcode_media: Optional[XdtShortcodeMedia] = None


class InstagramDLModelsUserData(BaseModel):
    user: Optional[InstagramDLModelsUserUser] = None


class InstagramPost(BaseModel):
    data: Optional[InstagramDLModelsPostData] = None
    extensions: Optional[InstagramDLModelsPostExtensions] = None


class InstagramWebProfileResponse(BaseModel):
    data: Optional[InstagramDLModelsUserData] = None
    status: Optional[str] = Field(None, title='Status')
    count: Optional[int] = Field(15, title='Count')


class QuotedStatusResult(BaseModel):
    result: Optional[Result3] = None


class QuotedStatusResult1(BaseModel):
    result: Optional[Result20] = None


class TwitterDLModelsPostItemContent1(BaseModel):
    itemType: Optional[str] = Field(None, title='Itemtype')
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    tweet_results: Optional[TwitterDLModelsPostTweetResults1] = None
    tweetDisplayType: Optional[str] = Field(None, title='Tweetdisplaytype')


class TwitterDLModelsTimelineEntities5(BaseModel):
    hashtags: Optional[List[TwitterDLModelsTimelineHashtag]] = Field(
        None, title='Hashtags'
    )
    media: Optional[List[TwitterDLModelsTimelineMediaItem2]] = Field(
        None, title='Media'
    )
    symbols: Optional[List] = Field(None, title='Symbols')
    timestamps: Optional[List] = Field(None, title='Timestamps')
    urls: Optional[List[Url10]] = Field(None, title='Urls')
    user_mentions: Optional[List[TwitterDLModelsTimelineUserMention]] = Field(
        None, title='User Mentions'
    )


class TwitterDLModelsTimelineLegacy5(BaseModel):
    bookmark_count: Optional[int] = Field(None, title='Bookmark Count')
    bookmarked: Optional[bool] = Field(None, title='Bookmarked')
    created_at: Optional[str] = Field(None, title='Created At')
    conversation_id_str: Optional[str] = Field(None, title='Conversation Id Str')
    display_text_range: Optional[List[int]] = Field(None, title='Display Text Range')
    entities: Optional[TwitterDLModelsTimelineEntities5] = None
    extended_entities: Optional[TwitterDLModelsTimelineExtendedEntities1] = None
    favorite_count: Optional[int] = Field(None, title='Favorite Count')
    favorited: Optional[bool] = Field(None, title='Favorited')
    full_text: Optional[str] = Field(None, title='Full Text')
    is_quote_status: Optional[bool] = Field(None, title='Is Quote Status')
    lang: Optional[str] = Field(None, title='Lang')
    possibly_sensitive: Optional[bool] = Field(None, title='Possibly Sensitive')
    possibly_sensitive_editable: Optional[bool] = Field(
        None, title='Possibly Sensitive Editable'
    )
    quote_count: Optional[int] = Field(None, title='Quote Count')
    reply_count: Optional[int] = Field(None, title='Reply Count')
    retweet_count: Optional[int] = Field(None, title='Retweet Count')
    retweeted: Optional[bool] = Field(None, title='Retweeted')
    user_id_str: Optional[str] = Field(None, title='User Id Str')
    id_str: Optional[str] = Field(None, title='Id Str')
    retweeted_status_result: Optional[RetweetedStatusResult] = None
    scopes: Optional[Scopes] = None
    quoted_status_id_str: Optional[str] = Field(None, title='Quoted Status Id Str')
    quoted_status_permalink: Optional[QuotedStatusPermalink] = None


class TwitterDLModelsTimelineResult1(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    core: Optional[TwitterDLModelsTimelineCore] = None
    unmention_data: Optional[Dict[str, Any]] = Field(None, title='Unmention Data')
    edit_control: Optional[TwitterDLModelsTimelineEditControl] = None
    is_translatable: Optional[bool] = Field(None, title='Is Translatable')
    views: Optional[TwitterDLModelsTimelineViews] = None
    source: Optional[str] = Field(None, title='Source')
    quoted_status_result: Optional[QuotedStatusResult] = None
    legacy: Optional[TwitterDLModelsTimelineLegacy3] = None
    quick_promote_eligibility: Optional[
        TwitterDLModelsTimelineQuickPromoteEligibility
    ] = None


class TwitterDLModelsTimelineResult7(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    rest_id: Optional[str] = Field(None, title='Rest Id')
    core: Optional[Core2] = None
    unmention_data: Optional[Dict[str, Any]] = Field(None, title='Unmention Data')
    edit_control: Optional[TwitterDLModelsTimelineEditControl] = None
    is_translatable: Optional[bool] = Field(None, title='Is Translatable')
    views: Optional[TwitterDLModelsTimelineViews] = None
    source: Optional[str] = Field(None, title='Source')
    legacy: Optional[TwitterDLModelsTimelineLegacy5] = None
    quick_promote_eligibility: Optional[
        TwitterDLModelsTimelineQuickPromoteEligibility
    ] = None
    card: Optional[Card1] = None
    quoted_status_result: Optional[QuotedStatusResult1] = None


class TwitterDLModelsTimelineTweetResults(BaseModel):
    result: Optional[TwitterDLModelsTimelineResult1] = None


class TwitterDLModelsTimelineTweetResults1(BaseModel):
    result: Optional[TwitterDLModelsTimelineResult7] = None


class TwitterDLModelsPostItem1(BaseModel):
    itemContent: Optional[TwitterDLModelsPostItemContent1] = None
    clientEventInfo: Optional[TwitterDLModelsPostClientEventInfo] = None


class TwitterDLModelsTimelineItemContent(BaseModel):
    itemType: Optional[str] = Field(None, title='Itemtype')
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    tweet_results: Optional[TwitterDLModelsTimelineTweetResults] = None
    tweetDisplayType: Optional[str] = Field(None, title='Tweetdisplaytype')
    socialContext: Optional[SocialContext] = None


class TwitterDLModelsTimelineItemContent1(BaseModel):
    itemType: Optional[str] = Field(None, title='Itemtype')
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    tweet_results: Optional[TwitterDLModelsTimelineTweetResults1] = None
    tweetDisplayType: Optional[str] = Field(None, title='Tweetdisplaytype')
    promotedMetadata: Optional[PromotedMetadata] = None


class Content1(BaseModel):
    entryType: Optional[str] = Field(None, title='Entrytype')
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    itemContent: Optional[TwitterDLModelsTimelineItemContent1] = None
    clientEventInfo: Optional[TwitterDLModelsTimelineClientEventInfo1] = None
    items: Optional[List[TwitterDLModelsTimelineItem]] = Field(None, title='Items')
    displayType: Optional[str] = Field(None, title='Displaytype')
    header: Optional[Header] = None
    footer: Optional[Footer] = None
    value: Optional[str] = Field(None, title='Value')
    cursorType: Optional[str] = Field(None, title='Cursortype')


class Entry1(BaseModel):
    entryId: Optional[str] = Field(None, title='Entryid')
    sortIndex: Optional[str] = Field(None, title='Sortindex')
    content: Optional[Content1] = None


class TwitterDLModelsPostItem(BaseModel):
    entryId: Optional[str] = Field(None, title='Entryid')
    item: Optional[TwitterDLModelsPostItem1] = None


class TwitterDLModelsTimelineContent(BaseModel):
    entryType: Optional[str] = Field(None, title='Entrytype')
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    itemContent: Optional[TwitterDLModelsTimelineItemContent] = None
    clientEventInfo: Optional[TwitterDLModelsTimelineClientEventInfo] = None


class TwitterDLModelsTimelineEntry(BaseModel):
    entryId: Optional[str] = Field(None, title='Entryid')
    sortIndex: Optional[str] = Field(None, title='Sortindex')
    content: Optional[TwitterDLModelsTimelineContent] = None


class TwitterDLModelsTimelineInstruction(BaseModel):
    type: Optional[str] = Field(None, title='Type')
    entry: Optional[TwitterDLModelsTimelineEntry] = None
    entries: Optional[List[Entry1]] = Field(None, title='Entries')


class Timeline(BaseModel):
    instructions: Optional[List[TwitterDLModelsTimelineInstruction]] = Field(
        None, title='Instructions'
    )
    metadata: Optional[TwitterDLModelsTimelineMetadata] = None


class TimelineV2(BaseModel):
    timeline: Optional[Timeline] = None


class TwitterDLModelsPostContent(BaseModel):
    entryType: Optional[str] = Field(None, title='Entrytype')
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    itemContent: Optional[TwitterDLModelsPostItemContent] = None
    items: Optional[List[TwitterDLModelsPostItem]] = Field(None, title='Items')
    displayType: Optional[str] = Field(None, title='Displaytype')
    clientEventInfo: Optional[TwitterDLModelsPostClientEventInfo1] = None


class TwitterDLModelsPostEntry(BaseModel):
    entryId: Optional[str] = Field(None, title='Entryid')
    sortIndex: Optional[str] = Field(None, title='Sortindex')
    content: Optional[TwitterDLModelsPostContent] = None


class TwitterDLModelsPostInstruction(BaseModel):
    type: Optional[str] = Field(None, title='Type')
    entries: Optional[List[TwitterDLModelsPostEntry]] = Field(None, title='Entries')
    direction: Optional[str] = Field(None, title='Direction')


class TwitterDLModelsTimelineResult(BaseModel):
    field__typename: Optional[str] = Field(None, alias='__typename', title='  Typename')
    timeline_v2: Optional[TimelineV2] = None


class TwitterDLModelsTimelineUser(BaseModel):
    result: Optional[TwitterDLModelsTimelineResult] = None


class ThreadedConversationWithInjectionsV2(BaseModel):
    instructions: Optional[List[TwitterDLModelsPostInstruction]] = Field(
        None, title='Instructions'
    )


class TwitterDLModelsPostData(BaseModel):
    threaded_conversation_with_injections_v2: Optional[
        ThreadedConversationWithInjectionsV2
    ] = None


class TwitterDLModelsTimelineData(BaseModel):
    user: Optional[TwitterDLModelsTimelineUser] = None


class TwitterPost(BaseModel):
    data: Optional[TwitterDLModelsPostData] = None


class TwitterTimeline(BaseModel):
    data: Optional[TwitterDLModelsTimelineData] = None
